; Buffer for saved game data
g$5B00 DEFB $01,$00,$00,$00,$00,$00,$00,$00
 $5B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B18 DEFB $00,$00,$00,$00,$00,$00,$E0,$FF
 $5B20 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5B28 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5B30 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5B38 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$00,$3F
 $5B40 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5B48 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5B50 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5B58 DEFB $FF,$FF,$FF,$FF,$E0,$FF,$FF,$FF
 $5B60 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5B68 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5B70 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5B78 DEFB $FF,$FF,$FF,$FF,$00,$00,$00,$00
 $5B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B98 DEFB $00,$00,$00,$FF,$FF,$FF,$FF,$FF
 $5BA0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5BA8 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5BB0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5BB8 DEFB $FF,$FF,$01,$00,$00,$21,$00,$00
 $5BC0 DEFB $21,$00,$00,$21,$00,$00,$21,$00
 $5BC8 DEFB $00,$21,$00,$00,$21,$00,$00,$21
 $5BD0 DEFB $00,$00,$21,$00,$00,$21,$00,$00
 $5BD8 DEFB $20,$FF,$09,$DC,$3F,$33,$13,$3F
 $5BE0 DEFB $06,$4A,$3F,$55,$25,$3F,$75,$25
 $5BE8 DEFB $3F,$52,$77,$3F,$55,$74,$3F,$1D
 $5BF0 DEFB $14,$3F,$0D,$C8,$3F,$19,$C8,$3F
 $5BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Unused
u$5C00 DEFB $FF,$00,$00,$00,$FF,$00,$23,$0D
 $5C08 DEFB $0D,$23,$05,$00,$00,$00,$11,$0B
 $5C10 DEFB $01,$00,$06,$00,$0B,$00,$01,$00
 $5C18 DEFB $01,$00,$06,$00,$10,$00,$00,$00
 $5C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C30 DEFB $00,$00,$00,$00,$00,$00,$00,$3C
 $5C38 DEFB $40,$00,$FF,$CD,$00,$8D,$65,$00
 $5C40 DEFB $00,$00,$00,$00,$FF,$28,$00,$01
 $5C48 DEFB $07,$00,$00,$8B,$5D,$00,$00,$B6
 $5C50 DEFB $5C,$BB,$5C,$CB,$5C,$8B,$5D,$CA
 $5C58 DEFB $5C,$8C,$5D,$8F,$5D,$8A,$5D,$E6
 $5C60 DEFB $5D,$91,$5D,$91,$5D,$91,$5D,$2D
 $5C68 DEFB $92,$5C,$00,$00,$00,$00,$00,$00
 $5C70 DEFB $00,$00,$00,$00,$B6,$1A,$40,$01
 $5C78 DEFB $40,$01,$00,$58,$FF,$00,$00,$21
 $5C80 DEFB $00,$5B,$21,$17,$00,$50,$E0,$50
 $5C88 DEFB $21,$08,$21,$17,$03,$00,$00,$00
 $5C90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CB0 DEFB $00,$00,$90,$65,$FF,$FF,$F4,$09
 $5CB8 DEFB $A8,$10,$4B,$F4,$09,$C4,$15,$53
 $5CC0 DEFB $81,$0F,$C4,$15,$52,$F4,$09,$C4
 $5CC8 DEFB $15,$50,$80,$00,$0F,$6A,$00,$FD
 $5CD0 DEFB $32,$36,$30,$30,$30,$0E,$00,$00
 $5CD8 DEFB $90,$65,$00,$3A,$D9,$30,$0E,$00
 $5CE0 DEFB $00,$00,$00,$00,$3A,$DA,$30,$0E
 $5CE8 DEFB $00,$00,$00,$00,$00,$3A,$E7,$30
 $5CF0 DEFB $0E,$00,$00,$00,$00,$00,$3A,$FB
 $5CF8 DEFB $3A,$F5,$AC,$31,$31,$0E,$00,$00
 $5D00 DEFB $0B,$00,$00,$2C,$38,$0E,$00,$00
 $5D08 DEFB $08,$00,$00,$3B,$DB,$31,$0E,$00
 $5D10 DEFB $00,$01,$00,$00,$3B,$D9,$37,$0E
 $5D18 DEFB $00,$00,$07,$00,$00,$3B,$DA,$32
 $5D20 DEFB $0E,$00,$00,$02,$00,$00,$3B,$22
 $5D28 DEFB $52,$45,$44,$48,$41,$57,$4B,$20
 $5D30 DEFB $4C,$4F,$41,$44,$49,$4E,$47,$22
 $5D38 DEFB $0D,$00,$10,$1A,$00,$F4,$32,$33
 $5D40 DEFB $36,$35,$39,$0E,$00,$00,$6B,$5C
 $5D48 DEFB $00,$2C,$30,$0E,$00,$00,$00,$00
 $5D50 DEFB $00,$3A,$EF,$22,$22,$AF,$0D,$00
 $5D58 DEFB $11,$1E,$00,$EF,$22,$22,$AF,$35
 $5D60 DEFB $30,$30,$30,$30,$0E,$00,$00,$50
 $5D68 DEFB $C3,$00,$3A,$F9,$C0,$35,$30,$30
 $5D70 DEFB $30,$30,$0E,$00,$00,$50,$C3,$00
 $5D78 DEFB $0D,$00,$28,$0E,$00,$F9,$C0,$32
 $5D80 DEFB $36,$30,$30,$30,$0E,$00,$00,$90
 $5D88 DEFB $65,$00,$0D,$80,$EF,$22,$22,$0D
 $5D90 DEFB $80,$00,$00,$90,$65,$00,$20,$20
 $5D98 DEFB $20,$20,$20,$20,$00,$00,$50,$C3
 $5DA0 DEFB $00,$00,$03,$53,$20,$20,$20,$20
 $5DA8 DEFB $20,$20,$20,$20,$20,$28,$16,$E6
 $5DB0 DEFB $05,$CD,$05,$93,$00,$6D,$E1,$00

; Room graphics table
b$5DB8 DEFW $5E0C
 $5DBA DEFW $5E8A
 $5DBC DEFW $5EC2
 $5DBE DEFW $5EF5
 $5DC0 DEFW $5F2D
 $5DC2 DEFW $5F59
 $5DC4 DEFW $5F8C
 $5DC6 DEFW $6005
 $5DC8 DEFW $603E
 $5DCA DEFW $6093
 $5DCC DEFW $60B0
 $5DCE DEFW $610D
 $5DD0 DEFW $616A
 $5DD2 DEFW $61D7
 $5DD4 DEFW $627B
 $5DD6 DEFW $62BF
 $5DD8 DEFW $62ED
 $5DDA DEFW $6307
 $5DDC DEFW $6322
 $5DDE DEFW $6344
 $5DE0 DEFW $63B8
 $5DE2 DEFW $642E
 $5DE4 DEFW $6467
 $5DE6 DEFW $6498
 $5DE8 DEFW $64AE
 $5DEA DEFW $64F1
 $5DEC DEFW $6552
 $5DEE DEFW $6552
 $5DF0 DEFW $6552
 $5DF2 DEFW $6552
 $5DF4 DEFW $65BA
 $5DF6 DEFW $65F6
 $5DF8 DEFW $667D
 $5DFA DEFW $66A6
 $5DFC DEFW $66DD
 $5DFE DEFW $6703
 $5E00 DEFW $6741
 $5E02 DEFW $6781
 $5E04 DEFW $6801
 $5E06 DEFW $6820
 $5E08 DEFW $6856
 $5E0A DEFW $686F

; Room graphics 00
b$5E0C DEFB $28,$12,$80,$00,$80,$48,$50,$58
 $5E14 DEFB $FE,$50,$70,$80,$78,$80,$78,$80
 $5E1C DEFB $D7,$FF,$10,$31,$70,$68,$1E,$10
 $5E24 DEFB $31,$00,$58,$1E,$12,$4F,$70,$4C
 $5E2C DEFB $6D,$32,$6D,$31,$6F,$FE,$31,$6F
 $5E34 DEFB $FF,$12,$4B,$6C,$40,$59,$FF,$12
 $5E3C DEFB $18,$00,$18,$30,$31,$30,$FF,$10
 $5E44 DEFB $1D,$00,$08,$04,$10,$1D,$10,$08
 $5E4C DEFB $04,$10,$1D,$20,$08,$04,$10,$25
 $5E54 DEFB $20,$08,$04,$10,$25,$10,$08,$04
 $5E5C DEFB $10,$25,$00,$08,$04,$10,$2D,$00
 $5E64 DEFB $08,$04,$10,$2D,$10,$08,$04,$10
 $5E6C DEFB $2D,$20,$08,$04,$06,$21,$7C,$80
 $5E74 DEFB $10,$48,$4F,$53,$50,$49,$54,$41
 $5E7C DEFB $4C,$00,$12,$29,$7C,$29,$30,$FF
 $5E84 DEFB $10,$24,$B0,$08,$04,$00

; Room graphics 01
b$5E8A DEFB $28,$12,$80,$00,$80,$D7,$FF,$02
 $5E92 DEFB $38,$68,$28,$48,$20,$10,$10,$02
 $5E9A DEFB $38,$90,$28,$48,$20,$10,$10,$12
 $5EA2 DEFB $78,$D7,$78,$B8,$FE,$78,$68,$78
 $5EAA DEFB $00,$FE,$70,$00,$70,$68,$FE,$70
 $5EB2 DEFB $B8,$70,$D7,$FF,$06,$20,$00,$50
 $5EBA DEFB $10,$4F,$4C,$4F,$47,$59,$00,$00

; Room graphics 02
b$5EC2 DEFB $28,$0A,$80,$5C,$12,$70,$00,$70
 $5ECA DEFB $48,$40,$78,$FE,$40,$84,$70,$5C
 $5ED2 DEFB $70,$D7,$FF,$06,$38,$17,$40,$10
 $5EDA DEFB $50,$41,$52,$4B,$00,$10,$48,$1F
 $5EE2 DEFB $08,$18,$10,$48,$47,$08,$18,$12
 $5EEA DEFB $40,$D7,$40,$57,$FE,$40,$17,$40
 $5EF2 DEFB $00,$FF,$00

; Room graphics 03
b$5EF5 DEFB $28,$0A,$80,$5C,$10,$40,$30,$28
 $5EFD DEFB $40,$10,$44,$34,$20,$38,$10,$40
 $5F05 DEFB $58,$28,$40,$10,$44,$5C,$20,$38
 $5F0D DEFB $06,$1C,$38,$40,$10,$43,$49,$54
 $5F15 DEFB $59,$00,$06,$2C,$20,$70,$10,$53
 $5F1D DEFB $54,$41,$54,$49,$4F,$4E,$00,$08
 $5F25 DEFB $40,$00,$01,$08,$48,$98,$00,$00

; Room graphics 04
b$5F2D DEFB $28,$0A,$80,$5C,$02,$40,$10,$28
 $5F35 DEFB $40,$60,$18,$14,$18,$14,$06,$1C
 $5F3D DEFB $70,$80,$10,$46,$45,$45,$54,$20
 $5F45 DEFB $53,$54,$52,$00,$08,$20,$40,$02
 $5F4D DEFB $08,$68,$B8,$03,$04,$40,$50,$30
 $5F55 DEFB $20,$A0,$00,$00

; Room graphics 05
b$5F59 DEFB $28,$12,$80,$00,$80,$D7,$FF,$02
 $5F61 DEFB $30,$50,$30,$50,$60,$20,$1C,$20
 $5F69 DEFB $1C,$04,$30,$00,$30,$28,$A0,$00
 $5F71 DEFB $10,$38,$A0,$18,$10,$12,$3B,$A4
 $5F79 DEFB $3B,$B3,$FE,$3E,$B3,$3E,$A4,$FE
 $5F81 DEFB $42,$A4,$42,$B2,$FE,$45,$B2,$45
 $5F89 DEFB $AD,$FF,$00

; Room graphics 06
b$5F8C DEFB $28,$0A,$80,$5C,$10,$30,$00,$D8
 $5F94 DEFB $18,$10,$28,$00,$D8,$08,$10,$40
 $5F9C DEFB $18,$04,$08,$10,$40,$38,$04,$08
 $5FA4 DEFB $10,$40,$58,$04,$08,$10,$40,$80
 $5FAC DEFB $04,$08,$10,$40,$B0,$04,$08,$12
 $5FB4 DEFB $48,$98,$30,$98,$28,$95,$FF,$12
 $5FBC DEFB $28,$6D,$30,$6F,$30,$6F,$48,$6F
 $5FC4 DEFB $48,$6F,$FE,$48,$4F,$30,$4F,$30
 $5FCC DEFB $4F,$28,$4E,$FE,$28,$2E,$30,$2F
 $5FD4 DEFB $48,$2F,$FF,$10,$38,$9F,$04,$04
 $5FDC DEFB $10,$38,$8A,$04,$04,$10,$38,$76
 $5FE4 DEFB $04,$04,$10,$38,$63,$04,$04,$10
 $5FEC DEFB $38,$53,$04,$04,$10,$38,$43,$04
 $5FF4 DEFB $04,$10,$38,$33,$04,$04,$10,$38
 $5FFC DEFB $23,$04,$04,$10,$38,$0B,$04,$04
 $6004 DEFB $00

; Room graphics 07
b$6005 DEFB $28,$0A,$80,$5C,$02,$30,$08,$30
 $600D DEFB $50,$20,$20,$20,$06,$20,$00,$50
 $6015 DEFB $10,$42,$52,$41,$52,$59,$00,$04
 $601D DEFB $30,$60,$20,$28,$9B,$00,$04,$30
 $6025 DEFB $98,$20,$28,$9B,$00,$08,$68,$A8
 $602D DEFB $02,$08,$60,$48,$00,$12,$6E,$A8
 $6035 DEFB $6E,$A2,$FE,$68,$B2,$68,$B9,$FF
 $603D DEFB $00

; Room graphics 08
b$603E DEFB $28,$12,$80,$00,$80,$D7,$FF,$02
 $6046 DEFB $60,$00,$D8,$20,$01,$12,$58,$00
 $604E DEFB $58,$D7,$FF,$12,$5E,$00,$5E,$D7
 $6056 DEFB $FF,$10,$2C,$8A,$14,$20,$12,$34
 $605E DEFB $8D,$34,$99,$FE,$36,$99,$36,$8F
 $6066 DEFB $FE,$39,$8E,$39,$99,$FE,$3D,$99
 $606E DEFB $3D,$8F,$FE,$40,$8F,$40,$99,$FE
 $6076 DEFB $42,$99,$42,$8E,$FE,$45,$8E,$45
 $607E DEFB $98,$FE,$47,$95,$47,$99,$FF,$06
 $6086 DEFB $22,$11,$70,$10,$53,$49,$4C,$45
 $608E DEFB $4E,$43,$45,$00,$00

; Room graphics 09
b$6093 DEFB $28,$14,$80,$A0,$06,$10,$28,$60
 $609B DEFB $10,$42,$4F,$57,$20,$53,$54,$00
 $60A3 DEFB $08,$50,$57,$00,$08,$28,$07,$03
 $60AB DEFB $08,$30,$88,$02,$00

; Room graphics 0A
b$60B0 DEFB $28,$02,$40,$60,$28,$40,$10,$04
 $60B8 DEFB $48,$66,$1C,$18,$30,$00,$12,$80
 $60C0 DEFB $D7,$80,$37,$3B,$37,$3B,$0F,$80
 $60C8 DEFB $0F,$80,$00,$FE,$80,$36,$68,$1E
 $60D0 DEFB $68,$0F,$FF,$12,$68,$1F,$3D,$1F
 $60D8 DEFB $FF,$10,$41,$A3,$20,$28,$10,$45
 $60E0 DEFB $A7,$08,$08,$10,$50,$A7,$18,$14
 $60E8 DEFB $12,$54,$AA,$54,$BA,$FE,$56,$BA
 $60F0 DEFB $56,$AA,$FE,$59,$AA,$59,$BB,$FE
 $60F8 DEFB $5C,$BB,$5C,$AA,$FE,$5F,$AA,$5F
 $6100 DEFB $BB,$FE,$61,$BB,$61,$B2,$FF,$10
 $6108 DEFB $45,$B3,$0C,$08,$00

; Room graphics 0B
b$610D DEFB $28,$12,$58,$00,$58,$98,$88,$D7
 $6115 DEFB $FE,$58,$99,$00,$99,$FF,$04,$10
 $611D DEFB $28,$20,$14,$30,$00,$10,$0C,$24
 $6125 DEFB $28,$1C,$08,$12,$6C,$01,$08,$3A
 $612D DEFB $0C,$02,$08,$3A,$5C,$03,$12,$40
 $6135 DEFB $B2,$48,$C0,$FE,$45,$BB,$3F,$BB
 $613D DEFB $FE,$42,$C0,$3B,$B0,$FE,$3D,$B5
 $6145 DEFB $40,$B5,$FF,$12,$40,$B5,$42,$B5
 $614D DEFB $FF,$12,$3E,$B8,$39,$B8,$FF,$12
 $6155 DEFB $60,$00,$60,$A0,$FE,$6C,$B1,$6C
 $615D DEFB $00,$FE,$7C,$00,$7C,$C8,$FE,$90
 $6165 DEFB $D7,$90,$00,$FF,$00

; Room graphics 0C
b$616A DEFB $28,$12,$78,$00,$78,$D7,$FE,$7C
 $6172 DEFB $D7,$7C,$00,$FE,$82,$00,$82,$D7
 $617A DEFB $FE,$8A,$D7,$8A,$00,$FF,$12,$6A
 $6182 DEFB $08,$77,$00,$FE,$6A,$08,$6A,$D7
 $618A DEFB $FF,$10,$00,$08,$10,$6A,$12,$01
 $6192 DEFB $15,$69,$15,$FE,$69,$12,$01,$12
 $619A DEFB $FE,$01,$0E,$69,$0E,$FF,$10,$00
 $61A2 DEFB $AC,$10,$6A,$12,$00,$B0,$69,$B0
 $61AA DEFB $FE,$69,$B3,$01,$B3,$FE,$01,$B7
 $61B2 DEFB $FE,$01,$B7,$69,$B7,$FF,$06,$16
 $61BA DEFB $28,$70,$10,$47,$41,$4C,$4C,$45
 $61C2 DEFB $52,$59,$00,$02,$30,$40,$3C,$3A
 $61CA DEFB $10,$12,$30,$5E,$69,$5E,$FE,$69
 $61D2 DEFB $5F,$31,$5F,$FF,$00

; Room graphics 0D
b$61D7 DEFB $28,$12,$70,$D7,$70,$34,$00,$34
 $61DF DEFB $FE,$70,$34,$8C,$08,$FF,$04,$24
 $61E7 DEFB $48,$20,$20,$10,$00,$04,$1C,$80
 $61EF DEFB $30,$38,$10,$00,$12,$29,$16,$51
 $61F7 DEFB $16,$41,$2A,$21,$2A,$28,$15,$FF
 $61FF DEFB $12,$28,$25,$40,$25,$47,$1B,$2D
 $6207 DEFB $1B,$28,$24,$FF,$12,$44,$84,$44
 $620F DEFB $AC,$FF,$10,$34,$8C,$18,$10,$12
 $6217 DEFB $34,$8C,$2E,$8C,$2E,$A4,$36,$A4
 $621F DEFB $FF,$10,$37,$90,$03,$03,$10,$37
 $6227 DEFB $9B,$03,$03,$10,$3E,$95,$04,$06
 $622F DEFB $12,$45,$99,$4F,$9E,$FE,$4F,$8E
 $6237 DEFB $45,$95,$FE,$3E,$8D,$FE,$3E,$8C
 $623F DEFB $3E,$85,$FE,$3E,$A5,$FE,$3E,$A4
 $6247 DEFB $3E,$AC,$FF,$12,$2E,$54,$31,$54
 $624F DEFB $31,$54,$31,$57,$2B,$58,$2C,$5D
 $6257 DEFB $32,$5D,$36,$5F,$3B,$5D,$3B,$56
 $625F DEFB $3B,$56,$37,$52,$33,$50,$30,$50
 $6267 DEFB $2E,$52,$2E,$52,$FF,$12,$36,$1D
 $626F DEFB $36,$20,$38,$20,$32,$23,$3B,$23
 $6277 DEFB $3B,$1D,$FF,$00

; Room graphics 0E
b$627B DEFB $28,$0A,$80,$5C,$10,$40,$30,$28
 $6283 DEFB $40,$10,$44,$34,$20,$38,$10,$40
 $628B DEFB $58,$28,$40,$10,$44,$5C,$20,$38
 $6293 DEFB $06,$1C,$20,$70,$10,$43,$45,$4E
 $629B DEFB $54,$52,$41,$4C,$00,$06,$2C,$20
 $62A3 DEFB $70,$10,$53,$54,$41,$54,$49,$4F
 $62AB DEFB $4E,$00,$08,$40,$00,$02,$08,$48
 $62B3 DEFB $A4,$01,$10,$3C,$2B,$5A,$44,$08
 $62BB DEFB $67,$9A,$00,$00

; Room graphics 0F
b$62BF DEFB $28,$12,$80,$00,$80,$D7,$FF,$02
 $62C7 DEFB $60,$00,$D8,$20,$01,$12,$58,$00
 $62CF DEFB $58,$D7,$FF,$12,$5E,$00,$5E,$D7
 $62D7 DEFB $FF,$04,$20,$30,$48,$30,$6B,$00
 $62DF DEFB $12,$18,$00,$18,$A8,$04,$D8,$FE
 $62E7 DEFB $18,$A8,$58,$A8,$FF,$00

; Room graphics 10
b$62ED DEFB $28,$04,$30,$30,$48,$30,$6B,$00
 $62F5 DEFB $0A,$80,$5C,$02,$38,$98,$28,$48
 $62FD DEFB $01,$08,$18,$90,$01,$08,$48,$08
 $6305 DEFB $02,$00

; Room graphics 11
b$6307 DEFB $28,$12,$80,$00,$80,$D7,$FF,$02
 $630F DEFB $60,$00,$D8,$20,$01,$12,$5C,$00
 $6317 DEFB $5C,$D7,$FF,$04,$10,$00,$D8,$48
 $631F DEFB $77,$00,$00

; Room graphics 12
b$6322 DEFB $28,$0A,$80,$5C,$06,$20,$48,$B0
 $632A DEFB $10,$53,$49,$44,$45,$20,$53,$54
 $6332 DEFB $52,$45,$45,$54,$00,$08,$48,$08
 $633A DEFB $01,$08,$68,$81,$00,$08,$40,$C1
 $6342 DEFB $02,$00

; Room graphics 13
b$6344 DEFB $28,$10,$30,$30,$40,$50,$12,$30
 $634C DEFB $30,$38,$28,$78,$28,$80,$30,$FF
 $6354 DEFB $12,$78,$40,$78,$58,$70,$50,$70
 $635C DEFB $50,$40,$60,$40,$38,$70,$46,$78
 $6364 DEFB $3E,$78,$3E,$FF,$12,$6C,$4F,$44
 $636C DEFB $5C,$44,$5C,$FE,$44,$5A,$6C,$4D
 $6374 DEFB $FF,$12,$80,$70,$FF,$12,$77,$67
 $637C DEFB $7F,$6F,$7F,$6F,$FE,$77,$67,$77
 $6384 DEFB $57,$FE,$77,$3F,$77,$27,$FF,$12
 $638C DEFB $77,$67,$39,$67,$31,$6F,$FE,$39
 $6394 DEFB $67,$39,$27,$FF,$12,$79,$3F,$79
 $639C DEFB $57,$FE,$7A,$57,$7A,$3E,$7A,$3E
 $63A4 DEFB $FF,$12,$6A,$BE,$6A,$53,$FE,$6A
 $63AC DEFB $45,$6A,$00,$6A,$00,$FE,$6A,$C0
 $63B4 DEFB $00,$C0,$FF,$00

; Room graphics 14
b$63B8 DEFB $28,$12,$78,$00,$78,$D7,$FE,$7C
 $63C0 DEFB $D7,$7C,$00,$FE,$82,$00,$82,$D7
 $63C8 DEFB $FE,$8A,$D7,$8A,$00,$FF,$12,$6A
 $63D0 DEFB $08,$77,$00,$FE,$6A,$08,$6A,$D7
 $63D8 DEFB $FF,$10,$00,$08,$10,$6A,$12,$01
 $63E0 DEFB $15,$69,$15,$FE,$69,$12,$01,$12
 $63E8 DEFB $FE,$01,$0E,$69,$0E,$FF,$10,$00
 $63F0 DEFB $AC,$10,$6A,$12,$00,$B0,$69,$B0
 $63F8 DEFB $FE,$69,$B3,$01,$B3,$FE,$01,$B7
 $6400 DEFB $FE,$01,$B7,$69,$B7,$FF,$06,$18
 $6408 DEFB $30,$60,$10,$4D,$55,$53,$45,$55
 $6410 DEFB $4D,$00,$02,$30,$40,$3C,$3A,$10
 $6418 DEFB $12,$30,$5E,$69,$5E,$FE,$69,$5F
 $6420 DEFB $31,$5F,$FF,$06,$08,$40,$40,$10
 $6428 DEFB $43,$49,$54,$59,$00,$00

; Room graphics 15
b$642E DEFB $28,$0A,$80,$5C,$10,$40,$30,$28
 $6436 DEFB $40,$10,$44,$34,$20,$38,$10,$40
 $643E DEFB $58,$28,$40,$10,$44,$5C,$20,$38
 $6446 DEFB $06,$1C,$30,$50,$10,$48,$45,$41
 $644E DEFB $54,$48,$00,$06,$2C,$20,$70,$10
 $6456 DEFB $53,$54,$41,$54,$49,$4F,$4E,$00
 $645E DEFB $08,$49,$04,$01,$08,$54,$94,$00
 $6466 DEFB $00

; Room graphics 16
b$6467 DEFB $28,$0A,$80,$5C,$10,$38,$00,$D8
 $646F DEFB $48,$06,$48,$60,$40,$10,$4B,$45
 $6477 DEFB $45,$50,$00,$06,$58,$68,$30,$10
 $647F DEFB $4F,$55,$54,$00,$08,$58,$18,$00
 $6487 DEFB $10,$38,$58,$50,$48,$12,$38,$80
 $648F DEFB $48,$80,$FE,$68,$80,$80,$80,$FF
 $6497 DEFB $00

; Room graphics 17
b$6498 DEFB $28,$12,$70,$D7,$70,$34,$00,$34
 $64A0 DEFB $FE,$70,$34,$A5,$08,$FF,$04,$24
 $64A8 DEFB $48,$90,$20,$10,$00,$00

; Room graphics 18
b$64AE DEFB $28,$06,$30,$00,$B0,$10,$52,$41
 $64B6 DEFB $44,$49,$4F,$41,$43,$54,$49,$56
 $64BE DEFB $45,$00,$06,$20,$26,$60,$10,$44
 $64C6 DEFB $41,$4E,$47,$45,$52,$00,$12,$80
 $64CE DEFB $00,$80,$40,$48,$40,$48,$70,$80
 $64D6 DEFB $70,$80,$D7,$80,$D7,$FF,$12,$80
 $64DE DEFB $6F,$70,$4F,$70,$4F,$48,$4F,$48
 $64E6 DEFB $4F,$FF,$12,$70,$4F,$70,$41,$70
 $64EE DEFB $41,$FF,$00

; Room graphics 19
b$64F1 DEFB $28,$10,$60,$00,$68,$20,$10,$60
 $64F9 DEFB $80,$68,$20,$12,$58,$60,$58,$00
 $6501 DEFB $58,$00,$FE,$58,$60,$60,$68,$FE
 $6509 DEFB $60,$80,$58,$78,$58,$78,$58,$D7
 $6511 DEFB $FE,$58,$78,$78,$78,$80,$80,$80
 $6519 DEFB $80,$FF,$12,$68,$78,$68,$68,$FF
 $6521 DEFB $04,$20,$48,$20,$20,$2B,$00,$10
 $6529 DEFB $28,$10,$20,$04,$10,$20,$10,$02
 $6531 DEFB $08,$10,$1D,$13,$04,$0B,$10,$21
 $6539 DEFB $17,$03,$07,$10,$1E,$1A,$02,$09
 $6541 DEFB $12,$20,$20,$23,$1D,$23,$1D,$27
 $6549 DEFB $23,$27,$23,$24,$26,$20,$21,$FF
 $6551 DEFB $00

; Room graphics 1A
b$6552 DEFB $28,$12,$80,$00,$80,$28,$38,$28
 $655A DEFB $38,$58,$80,$58,$80,$A0,$38,$A0
 $6562 DEFB $38,$D0,$80,$D0,$80,$D7,$FE,$80
 $656A DEFB $D0,$60,$A8,$60,$A0,$FE,$60,$A8
 $6572 DEFB $38,$A8,$FF,$12,$80,$58,$68,$40
 $657A DEFB $68,$40,$38,$40,$FE,$58,$40,$58
 $6582 DEFB $28,$FF,$10,$30,$80,$04,$48,$10
 $658A DEFB $30,$70,$04,$48,$10,$38,$74,$0C
 $6592 DEFB $04,$10,$44,$74,$0C,$04,$10,$50
 $659A DEFB $74,$0C,$04,$10,$5C,$74,$0C,$04
 $65A2 DEFB $10,$68,$74,$0C,$04,$10,$08,$64
 $65AA DEFB $28,$28,$12,$30,$8C,$20,$6C,$08
 $65B2 DEFB $6C,$FE,$20,$6C,$20,$64,$FF,$00

; Room graphics 1B
b$65BA DEFB $28,$0A,$80,$5C,$10,$40,$30,$28
 $65C2 DEFB $40,$10,$44,$34,$20,$38,$10,$40
 $65CA DEFB $58,$28,$40,$10,$44,$5C,$20,$38
 $65D2 DEFB $06,$1C,$18,$80,$10,$44,$49,$53
 $65DA DEFB $54,$52,$49,$43,$54,$00,$06,$2C
 $65E2 DEFB $20,$70,$10,$53,$54,$41,$54,$49
 $65EA DEFB $4F,$4E,$00,$08,$49,$04,$01,$08
 $65F2 DEFB $54,$94,$00,$00

; Room graphics 1C
b$65F6 DEFB $28,$10,$60,$00,$68,$20,$10,$60
 $65FE DEFB $80,$68,$20,$12,$58,$60,$58,$00
 $6606 DEFB $58,$00,$FE,$58,$60,$60,$68,$FE
 $660E DEFB $60,$80,$58,$78,$58,$78,$58,$D7
 $6616 DEFB $FE,$58,$78,$78,$78,$80,$80,$80
 $661E DEFB $80,$FF,$12,$68,$78,$68,$68,$FF
 $6626 DEFB $04,$18,$48,$20,$28,$2B,$00,$10
 $662E DEFB $28,$10,$20,$04,$10,$20,$10,$02
 $6636 DEFB $08,$10,$1D,$13,$04,$0B,$10,$21
 $663E DEFB $17,$03,$07,$10,$1E,$1A,$02,$09
 $6646 DEFB $12,$20,$20,$23,$1D,$23,$1D,$27
 $664E DEFB $23,$27,$23,$24,$26,$20,$21,$FF
 $6656 DEFB $10,$30,$89,$20,$04,$12,$30,$8E
 $665E DEFB $2E,$8B,$2E,$8B,$28,$91,$28,$91
 $6666 DEFB $2A,$93,$2F,$8E,$2F,$8E,$FF,$10
 $666E DEFB $24,$93,$02,$0C,$10,$29,$96,$03
 $6676 DEFB $07,$10,$21,$9A,$05,$0F,$00

; Room graphics 1D
b$667D DEFB $28,$06,$10,$00,$E0,$10,$54,$52
 $6685 DEFB $41,$4E,$53,$20,$47,$4C,$4F,$42
 $668D DEFB $41,$4C,$20,$53,$00,$12,$80,$00
 $6695 DEFB $80,$D7,$FF,$04,$40,$97,$30,$20
 $669D DEFB $2A,$00,$02,$30,$37,$38,$50,$11
 $66A5 DEFB $00

; Room graphics 1E
b$66A6 DEFB $28,$0A,$80,$5C,$10,$38,$00,$D8
 $66AE DEFB $48,$08,$50,$20,$02,$10,$38,$58
 $66B6 DEFB $40,$48,$12,$38,$78,$80,$78,$FF
 $66BE DEFB $08,$68,$B8,$00,$12,$08,$D7,$08
 $66C6 DEFB $00,$FF,$10,$20,$10,$20,$18,$06
 $66CE DEFB $10,$48,$90,$10,$57,$41,$52,$45
 $66D6 DEFB $48,$4F,$55,$53,$45,$00,$00

; Room graphics 1F
b$66DD DEFB $28,$14,$80,$80,$02,$38,$18,$20
 $66E5 DEFB $48,$10,$04,$38,$50,$20,$20,$2A
 $66ED DEFB $00,$04,$08,$50,$20,$20,$2A,$00
 $66F5 DEFB $04,$08,$00,$20,$20,$2A,$00,$12
 $66FD DEFB $90,$C0,$38,$80,$FF,$00

; Room graphics 20
b$6703 DEFB $28,$04,$20,$48,$20,$20,$2B,$00
 $670B DEFB $10,$28,$10,$20,$04,$10,$20,$10
 $6713 DEFB $02,$08,$10,$1D,$13,$04,$0B,$10
 $671B DEFB $21,$17,$03,$07,$10,$1E,$1A,$02
 $6723 DEFB $09,$12,$20,$20,$23,$1D,$23,$1D
 $672B DEFB $27,$23,$27,$23,$24,$26,$20,$21
 $6733 DEFB $FF,$12,$70,$00,$70,$D7,$FF,$02
 $673B DEFB $20,$7F,$30,$50,$10,$00

; Room graphics 21
b$6741 DEFB $28,$12,$80,$00,$80,$D7,$FF,$02
 $6749 DEFB $40,$48,$20,$40,$60,$18,$18,$18
 $6751 DEFB $18,$02,$40,$68,$20,$40,$60,$18
 $6759 DEFB $18,$18,$18,$06,$1C,$40,$50,$10
 $6761 DEFB $46,$4C,$41,$54,$53,$00,$06,$3C
 $6769 DEFB $00,$40,$10,$52,$4F,$4F,$4B,$00
 $6771 DEFB $06,$3C,$98,$50,$10,$43,$4F,$55
 $6779 DEFB $52,$54,$00,$08,$68,$C0,$02,$00

; Room graphics 22
b$6781 DEFB $28,$10,$28,$10,$20,$04,$10,$20
 $6789 DEFB $10,$02,$08,$10,$1D,$13,$04,$0B
 $6791 DEFB $10,$21,$17,$03,$07,$10,$1E,$1A
 $6799 DEFB $02,$09,$12,$20,$20,$23,$1D,$23
 $67A1 DEFB $1D,$27,$23,$27,$23,$24,$26,$20
 $67A9 DEFB $21,$FF,$10,$30,$89,$20,$04,$12
 $67B1 DEFB $30,$8E,$2E,$8B,$2E,$8B,$28,$91
 $67B9 DEFB $28,$91,$2A,$93,$2F,$8E,$2F,$8E
 $67C1 DEFB $FF,$10,$24,$93,$02,$0C,$10,$29
 $67C9 DEFB $96,$03,$07,$10,$21,$9A,$05,$0F
 $67D1 DEFB $12,$70,$00,$70,$D7,$70,$D7,$FF
 $67D9 DEFB $04,$20,$3F,$30,$30,$4C,$00,$12
 $67E1 DEFB $50,$3A,$50,$74,$51,$75,$51,$75
 $67E9 DEFB $FE,$52,$3A,$52,$78,$50,$75,$FF
 $67F1 DEFB $12,$50,$39,$52,$38,$52,$39,$52
 $67F9 DEFB $39,$FF,$10,$1C,$3B,$38,$34,$00

; Room graphics 23
b$6801 DEFB $28,$0A,$80,$5C,$06,$1C,$78,$80
 $6809 DEFB $10,$53,$4D,$41,$4C,$4C,$4D,$41
 $6811 DEFB $4E,$00,$08,$48,$A0,$01,$08,$28
 $6819 DEFB $30,$00,$08,$60,$58,$03,$00

; Room graphics 24
b$6820 DEFB $28,$12,$78,$00,$78,$D7,$78,$D7
 $6828 DEFB $FF,$04,$38,$3F,$20,$40,$2B,$00
 $6830 DEFB $04,$38,$5F,$20,$40,$2B,$00,$10
 $6838 DEFB $34,$3B,$48,$44,$12,$74,$D7,$74
 $6840 DEFB $83,$FE,$74,$3B,$74,$00,$FF,$04
 $6848 DEFB $3C,$08,$18,$18,$10,$00,$04,$3C
 $6850 DEFB $9B,$18,$18,$10,$00,$00

; Room graphics 25
b$6856 DEFB $28,$02,$54,$00,$58,$36,$01,$12
 $685E DEFB $64,$08,$64,$58,$FF,$10,$34,$00
 $6866 DEFB $58,$20,$12,$30,$08,$30,$58,$FF
 $686E DEFB $00

; Room graphics 26
; Room graphics 26
b$686F DEFB $28,$02,$54,$00,$58,$36,$01,$12
 $6877 DEFB $64,$08,$64,$58,$FF,$10,$34,$00
 $687F DEFB $18,$20,$12,$30,$08,$30,$58,$FF
 $6887 DEFB $10,$34,$20,$18,$20,$10,$34,$40
 $688F DEFB $18,$20,$06,$14,$08,$50,$10,$4D
 $6897 DEFB $45,$54,$52,$4F,$00

; Unused
u$689C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68A4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68AC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68B4 DEFB $00,$00,$00

; Kevin large
;
; #CALL:print_udg(#PC,kevin_large,7,7,40)
b$68B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68BF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68C7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68CF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68E7 DEFB $00,$00,$00,$03,$FF,$C0,$00,$00
 $68EF DEFB $00,$00,$07,$FF,$E0,$00,$00,$00
 $68F7 DEFB $00,$0F,$FF,$F0,$00,$00,$00,$00
 $68FF DEFB $0B,$FF,$F0,$00,$00,$00,$00,$19
 $6907 DEFB $FF,$F8,$00,$00,$00,$00,$1D,$FF
 $690F DEFB $F8,$00,$00,$00,$00,$1E,$FF,$B8
 $6917 DEFB $00,$00,$00,$00,$1C,$7F,$38,$00
 $691F DEFB $00,$00,$00,$1C,$00,$38,$00,$00
 $6927 DEFB $00,$00,$1C,$00,$38,$00,$00,$00
 $692F DEFB $00,$18,$00,$18,$00,$00,$00,$00
 $6937 DEFB $18,$00,$18,$00,$00,$00,$00,$18
 $693F DEFB $00,$18,$00,$00,$00,$00,$17,$E7
 $6947 DEFB $E8,$00,$00,$00,$00,$1D,$BD,$B8
 $694F DEFB $00,$00,$00,$00,$14,$24,$28,$00
 $6957 DEFB $00,$00,$00,$14,$5A,$28,$00,$00
 $695F DEFB $00,$00,$0B,$81,$D0,$00,$00,$00
 $6967 DEFB $00,$10,$00,$08,$00,$00,$00,$00
 $696F DEFB $10,$00,$08,$00,$00,$00,$00,$08
 $6977 DEFB $00,$10,$00,$00,$00,$00,$0E,$24
 $697F DEFB $70,$00,$00,$00,$00,$0A,$00,$50
 $6987 DEFB $00,$00,$00,$00,$0A,$3C,$50,$00
 $698F DEFB $00,$00,$00,$0A,$42,$50,$00,$00
 $6997 DEFB $00,$00,$04,$3C,$20,$00,$00,$00
 $699F DEFB $00,$04,$42,$20,$00,$00,$00,$00
 $69A7 DEFB $06,$00,$60,$00,$00,$00,$00,$0F
 $69AF DEFB $00,$F0,$00,$00,$00,$00,$1B,$FF
 $69B7 DEFB $D8,$00,$00,$00,$00,$3B,$F8,$DC
 $69BF DEFB $00,$00,$00,$00,$79,$81,$9E,$00
 $69C7 DEFB $00,$00,$1C,$F8,$7E,$1F,$38,$00
 $69CF DEFB $3F,$E6,$F8,$18,$1F,$67,$FC,$3F
 $69D7 DEFB $E7,$FC,$3C,$3F,$E7,$FC,$7F,$F5
 $69DF DEFB $F4,$7E,$2F,$AF,$FE,$7F,$F7,$72
 $69E7 DEFB $7E,$4E,$EF,$FE,$7F,$F5,$79,$BD
 $69EF DEFB $9E,$AF,$FE,$7F,$F6,$F9,$18,$9F
 $69F7 DEFB $6F,$FE,$FF,$F7,$F8,$10,$1F,$EF
 $69FF DEFB $FF,$FF,$F6,$FC,$3C,$3F,$6F,$FF
 $6A07 DEFB $FF,$F7,$FC,$3C,$3F,$EF,$FF,$FF
 $6A0F DEFB $FA,$FC,$3C,$3F,$5F,$FF,$FF,$FB
 $6A17 DEFB $7C,$3C,$3E,$DF,$FF,$FF,$FB,$FC
 $6A1F DEFB $3C,$3F,$DF,$FF,$FF,$FB,$7C,$3C
 $6A27 DEFB $3E,$DF,$FF,$FF,$FB,$BE,$7E,$7D
 $6A2F DEFB $DF,$FF,$FF,$FB,$FE,$7E,$7F,$DF
 $6A37 DEFB $FF,$FF,$F9,$BE,$7E,$7D,$9F,$FF

; Redhawk large
;
; #CALL:print_udg(#PC,redhawk_large,7,7,40)
b$6A3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A5F DEFB $00,$00,$00,$00,$02,$00,$00,$00
 $6A67 DEFB $40,$00,$00,$0C,$00,$00,$00,$30
 $6A6F DEFB $00,$00,$3C,$03,$FF,$C0,$2C,$00
 $6A77 DEFB $00,$3C,$07,$FE,$E0,$2C,$00,$00
 $6A7F DEFB $78,$0F,$F5,$70,$16,$00,$00,$7C
 $6A87 DEFB $0F,$FA,$B0,$3A,$00,$00,$F6,$1F
 $6A8F DEFB $D5,$58,$7D,$00,$00,$FE,$1F,$AA
 $6A97 DEFB $A8,$7B,$00,$01,$FB,$DF,$D5,$53
 $6A9F DEFB $FD,$80,$01,$F7,$7F,$AA,$AF,$FE
 $6AA7 DEFB $80,$01,$EA,$BF,$55,$57,$FD,$80
 $6AAF DEFB $01,$FD,$DE,$AA,$AF,$FE,$80,$03
 $6AB7 DEFB $EA,$BF,$55,$57,$FD,$40,$03,$F7
 $6ABF DEFB $7F,$AA,$AF,$FE,$C0,$03,$EA,$BF
 $6AC7 DEFB $7D,$77,$FD,$40,$01,$FD,$DF,$AA
 $6ACF DEFB $EF,$FE,$80,$01,$EA,$BF,$FF,$F7
 $6AD7 DEFB $FD,$80,$01,$F7,$7C,$2C,$2F,$FE
 $6ADF DEFB $80,$01,$EA,$BC,$76,$3F,$FD,$80
 $6AE7 DEFB $01,$FD,$DF,$F9,$DF,$FE,$80,$00
 $6AEF DEFB $EA,$BA,$E6,$6F,$FD,$00,$00,$F7
 $6AF7 DEFB $74,$81,$3F,$FF,$00,$00,$7A,$BB
 $6AFF DEFB $00,$DF,$FC,$00,$00,$7D,$FE,$24
 $6B07 DEFB $5F,$FA,$00,$00,$3A,$AE,$00,$7F
 $6B0F DEFB $FC,$00,$00,$3F,$7E,$3C,$5F,$FC
 $6B17 DEFB $00,$00,$1E,$EF,$42,$5F,$F8,$00
 $6B1F DEFB $00,$0F,$FC,$3C,$3F,$F0,$00,$00
 $6B27 DEFB $E6,$BC,$42,$3F,$E7,$00,$03,$53
 $6B2F DEFB $FE,$00,$7F,$CA,$C0,$06,$A9,$BF
 $6B37 DEFB $00,$BF,$95,$60,$05,$DF,$FF,$FF
 $6B3F DEFB $F7,$FA,$A0,$0F,$ED,$FF,$FF,$FB
 $6B47 DEFB $B7,$30,$1F,$FD,$FF,$FE,$A9,$BF
 $6B4F DEFB $F8,$1D,$5E,$DF,$FD,$5B,$6A,$B8
 $6B57 DEFB $0E,$AB,$7F,$EA,$AB,$2A,$A8,$1F
 $6B5F DEFB $55,$9F,$D5,$5E,$55,$50,$3B,$AB
 $6B67 DEFB $FE,$AA,$A8,$AA,$B8,$71,$D5,$8D
 $6B6F DEFB $55,$5F,$55,$74,$68,$EB,$8A,$AA
 $6B77 DEFB $B1,$AA,$C2,$70,$75,$8D,$55,$51
 $6B7F DEFB $55,$82,$FC,$FA,$FA,$AA,$B1,$AB
 $6B87 DEFB $82,$F0,$7D,$55,$55,$5F,$55,$82
 $6B8F DEFB $C0,$7A,$AA,$AA,$AA,$AB,$82,$D0
 $6B97 DEFB $1F,$55,$55,$55,$56,$01,$E0,$6E
 $6B9F DEFB $AA,$AA,$AA,$AE,$81,$D0,$17,$55
 $6BA7 DEFB $55,$55,$59,$01,$E0,$7F,$AA,$BE
 $6BAF DEFB $AA,$B3,$81,$D0,$19,$D5,$5D,$55
 $6BB7 DEFB $63,$01,$E0,$1D,$EA,$AA,$AA,$E3
 $6BBF DEFB $81,$D0,$3F,$F5,$5D,$55,$C3,$01

; Sprite positions 1
b$6BC7 DEFB $28 ; Height
 $6BC8 DEFB $03 ; Width
 $CBC9 DEFB $78 ; Size in bytes

; Redhawk background R
;
; #CALL:print_udg(#PC,redhawk_background_r,3,5,40)
b$6BCA DEFB $01,$18,$80,$00,$BD,$00,$01,$66
 $6BD2 DEFB $80,$01,$3C,$80,$00,$A5,$00,$02
 $6BDA DEFB $BD,$40,$09,$7E,$90,$07,$DB,$E0
 $6BE2 DEFB $09,$FF,$90,$08,$FF,$08,$0A,$FF
 $6BEA DEFB $48,$09,$7E,$84,$13,$7E,$E4,$14
 $6BF2 DEFB $BD,$14,$14,$FF,$24,$1D,$24,$98
 $6BFA DEFB $1C,$FF,$3C,$3A,$FF,$70,$32,$FF
 $6C02 DEFB $70,$32,$FE,$90,$03,$3C,$90,$03
 $6C0A DEFB $18,$50,$03,$10,$48,$02,$08,$48
 $6C12 DEFB $02,$18,$48,$02,$18,$24,$02,$24
 $6C1A DEFB $26,$03,$24,$25,$05,$22,$25,$05
 $6C22 DEFB $3F,$35,$07,$C0,$9A,$05,$60,$5C
 $6C2A DEFB $0B,$C0,$78,$03,$C0,$78,$03,$C0
 $6C32 DEFB $38,$01,$80,$18,$01,$80,$18,$03
 $6C3A DEFB $80,$3C,$0F,$80,$38,$00,$00,$00

; The Rat background
;
; #CALL:print_udg(#PC,rat_background,3,5,40)
b$6C42 DEFB $00,$40,$80,$00,$20,$80,$00,$11
 $6C4A DEFB $80,$00,$3F,$80,$00,$1F,$80,$00
 $6C52 DEFB $1A,$80,$00,$1F,$00,$00,$3F,$80
 $6C5A DEFB $00,$77,$40,$00,$83,$60,$01,$03
 $6C62 DEFB $10,$01,$01,$20,$02,$20,$20,$02
 $6C6A DEFB $40,$60,$04,$80,$50,$04,$80,$50
 $6C72 DEFB $03,$C0,$D0,$03,$C0,$B8,$06,$F0
 $6C7A DEFB $BC,$0F,$79,$1C,$1F,$3E,$9C,$1D
 $6C82 DEFB $30,$4C,$1A,$00,$40,$1A,$00,$20
 $6C8A DEFB $1A,$14,$20,$1C,$22,$20,$0C,$41
 $6C92 DEFB $10,$0E,$81,$10,$17,$01,$10,$17
 $6C9A DEFB $00,$90,$3F,$C0,$B0,$24,$F0,$50
 $6CA2 DEFB $28,$38,$88,$28,$0C,$90,$30,$04
 $6CAA DEFB $90,$48,$06,$50,$48,$02,$48,$F8
 $6CB2 DEFB $02,$4C,$00,$02,$3E,$00,$00,$00

; Techno background
;
; #CALL:print_udg(#PC,techno_background,3,5,40)
b$6CBA DEFB $00,$00,$00,$00,$18,$00,$00,$24
 $6CC2 DEFB $00,$00,$7E,$40,$00,$24,$40,$07
 $6CCA DEFB $A5,$E0,$02,$DB,$40,$25,$00,$A0
 $6CD2 DEFB $39,$21,$90,$28,$C0,$D8,$38,$80
 $6CDA DEFB $54,$31,$80,$DC,$13,$0C,$88,$13
 $6CE2 DEFB $1E,$C8,$13,$BF,$48,$15,$BF,$48
 $6CEA DEFB $0A,$BF,$28,$16,$9D,$70,$0A,$63
 $6CF2 DEFB $50,$05,$B6,$E0,$03,$1C,$A0,$01
 $6CFA DEFB $88,$C0,$01,$04,$40,$01,$04,$C0
 $6D02 DEFB $01,$08,$60,$01,$08,$60,$01,$14
 $6D0A DEFB $A0,$03,$14,$C0,$05,$14,$C0,$05
 $6D12 DEFB $24,$C0,$07,$67,$40,$03,$A0,$80
 $6D1A DEFB $02,$44,$80,$02,$84,$80,$04,$84
 $6D22 DEFB $80,$05,$06,$80,$07,$02,$40,$04
 $6D2A DEFB $83,$60,$07,$C3,$F8,$00,$00,$00

; Merlin background
;
; #CALL:print_udg(#PC,merlin_background,3,5,40)
b$6D32 DEFB $00,$18,$00,$00,$24,$00,$00,$42
 $6D3A DEFB $00,$00,$42,$02,$00,$99,$05,$00
 $6D42 DEFB $BD,$02,$01,$5A,$82,$03,$DB,$C2
 $6D4A DEFB $04,$66,$22,$04,$18,$22,$08,$00
 $6D52 DEFB $12,$09,$00,$92,$11,$18,$92,$13
 $6D5A DEFB $E7,$D2,$13,$00,$DA,$13,$00,$CC
 $6D62 DEFB $13,$81,$CC,$13,$CF,$E4,$33,$F0
 $6D6A DEFB $EC,$37,$1F,$F6,$3D,$E3,$CE,$31
 $6D72 DEFB $42,$C4,$7B,$42,$C4,$7E,$24,$44
 $6D7A DEFB $FE,$22,$48,$FE,$22,$48,$FC,$22
 $6D82 DEFB $28,$FC,$22,$28,$FC,$66,$28,$FC
 $6D8A DEFB $67,$28,$FC,$E7,$38,$ED,$44,$B8
 $6D92 DEFB $CB,$42,$D8,$88,$C3,$10,$85,$7C
 $6D9A DEFB $B0,$05,$00,$B0,$0A,$00,$50,$12
 $6DA2 DEFB $00,$58,$3E,$00,$7C,$00,$00,$00

; Fusor background
;
; #CALL:print_udg(#PC,fusor_background,3,5,40)
b$6DAA DEFB $00,$50,$00,$00,$2D,$00,$00,$42
 $6DB2 DEFB $00,$00,$9A,$00,$00,$A5,$00,$00
 $6DBA DEFB $66,$00,$00,$99,$00,$01,$FF,$80
 $6DC2 DEFB $02,$04,$40,$06,$18,$60,$0F,$A1
 $6DCA DEFB $F0,$1F,$99,$F8,$1E,$E7,$78,$1C
 $6DD2 DEFB $81,$38,$0E,$42,$70,$07,$42,$E0
 $6DDA DEFB $03,$C3,$C0,$03,$81,$C0,$00,$81
 $6DE2 DEFB $00,$01,$00,$80,$01,$24,$80,$01
 $6DEA DEFB $18,$40,$02,$08,$40,$03,$88,$C0
 $6DF2 DEFB $07,$D7,$C0,$07,$E7,$E0,$07,$E3
 $6DFA DEFB $E0,$07,$C3,$E0,$07,$C1,$E0,$07
 $6E02 DEFB $81,$E0,$0F,$00,$F0,$0E,$00,$F0
 $6E0A DEFB $0E,$00,$70,$0E,$00,$70,$0E,$00
 $6E12 DEFB $70,$0C,$00,$70,$0C,$00,$30,$1C
 $6E1A DEFB $00,$38,$1C,$00,$38,$3C,$00,$3C

; Lesley background
;
; #CALL:print_udg(#PC,lesley_background,3,5,40)
b$6E22 DEFB $00,$10,$00,$00,$6A,$00,$00,$DB
 $6E2A DEFB $00,$00,$A5,$80,$00,$A5,$00,$00
 $6E32 DEFB $44,$80,$00,$BD,$00,$00,$24,$80
 $6E3A DEFB $00,$C5,$80,$01,$FB,$80,$01,$FF
 $6E42 DEFB $C0,$03,$FF,$C0,$03,$FF,$C0,$17
 $6E4A DEFB $7E,$C0,$17,$42,$C0,$1B,$7E,$60
 $6E52 DEFB $0A,$7E,$E0,$0C,$7E,$E0,$00,$FF
 $6E5A DEFB $C0,$00,$FF,$20,$00,$FF,$C0,$00
 $6E62 DEFB $FF,$80,$00,$FF,$80,$00,$FF,$80
 $6E6A DEFB $01,$FF,$80,$01,$FF,$80,$01,$FF
 $6E72 DEFB $80,$01,$BF,$80,$01,$39,$80,$01
 $6E7A DEFB $A9,$80,$01,$2D,$C0,$01,$25,$00
 $6E82 DEFB $01,$24,$80,$01,$24,$80,$01,$42
 $6E8A DEFB $80,$01,$42,$80,$01,$42,$80,$01
 $6E92 DEFB $C2,$80,$01,$C3,$80,$03,$87,$80

; Curator background
;
; #CALL:print_udg(#PC,curator_background,3,5,40)
b$6E9A DEFB $00,$00,$00,$00,$18,$00,$00,$24
 $6EA2 DEFB $00,$00,$24,$00,$00,$24,$00,$00
 $6EAA DEFB $24,$00,$00,$18,$00,$00,$24,$00
 $6EB2 DEFB $00,$DB,$00,$01,$52,$80,$03,$55
 $6EBA DEFB $80,$02,$B9,$40,$06,$91,$20,$05
 $6EC2 DEFB $91,$60,$39,$91,$A0,$52,$91,$90
 $6ECA DEFB $34,$91,$90,$08,$91,$A0,$00,$91
 $6ED2 DEFB $20,$00,$FF,$40,$00,$FF,$40,$01
 $6EDA DEFB $FF,$80,$01,$FF,$80,$01,$FF,$80
 $6EE2 DEFB $01,$FF,$80,$01,$EF,$80,$01,$F7
 $6EEA DEFB $80,$01,$E7,$80,$01,$E7,$80,$01
 $6EF2 DEFB $C3,$C0,$01,$C3,$C0,$01,$C1,$C0
 $6EFA DEFB $01,$C1,$C0,$01,$C1,$C0,$01,$C1
 $6F02 DEFB $C0,$01,$C1,$C0,$01,$C1,$C0,$01
 $6F0A DEFB $C1,$C0,$01,$C1,$C0,$03,$C1,$E0

; Editor background
;
; #CALL:print_udg(#PC,editor_background,3,5,40)
b$6F12 DEFB $00,$00,$00,$00,$18,$00,$00,$3C
 $6F1A DEFB $00,$00,$24,$00,$00,$24,$00,$00
 $6F22 DEFB $24,$00,$00,$18,$00,$00,$24,$00
 $6F2A DEFB $00,$DB,$00,$01,$D3,$80,$03,$F7
 $6F32 DEFB $80,$02,$FF,$40,$06,$FD,$20,$05
 $6F3A DEFB $FF,$60,$39,$FF,$9C,$52,$FF,$4A
 $6F42 DEFB $34,$FF,$2C,$08,$FF,$10,$00,$FF
 $6F4A DEFB $00,$00,$E7,$00,$00,$FF,$00,$01
 $6F52 DEFB $FF,$80,$01,$FF,$80,$01,$FF,$80
 $6F5A DEFB $01,$FF,$80,$01,$F7,$80,$01,$EF
 $6F62 DEFB $80,$01,$E7,$80,$01,$E7,$80,$03
 $6F6A DEFB $C3,$80,$03,$C3,$80,$03,$83,$80
 $6F72 DEFB $03,$83,$80,$03,$83,$80,$03,$83
 $6F7A DEFB $80,$03,$83,$80,$03,$83,$80,$03
 $6F82 DEFB $83,$80,$03,$83,$80,$07,$83,$C0

; Librarian background
;
; #CALL:print_udg(#PC,librarian_background,3,5,40)
b$6F8A DEFB $00,$00,$00,$00,$18,$00,$00,$3C
 $6F92 DEFB $00,$00,$24,$00,$00,$24,$00,$00
 $6F9A DEFB $24,$00,$00,$18,$00,$00,$24,$00
 $6FA2 DEFB $00,$DB,$00,$01,$D3,$80,$03,$F7
 $6FAA DEFB $80,$03,$FF,$C0,$06,$FD,$40,$04
 $6FB2 DEFB $FF,$40,$04,$FF,$20,$04,$FF,$20
 $6FBA DEFB $05,$FF,$A0,$04,$FF,$20,$05,$FF
 $6FC2 DEFB $A0,$0A,$E7,$60,$05,$FF,$40,$03
 $6FCA DEFB $FF,$80,$01,$FF,$80,$01,$FF,$80
 $6FD2 DEFB $01,$FF,$80,$01,$F7,$80,$01,$EF
 $6FDA DEFB $80,$01,$E7,$80,$01,$E7,$80,$03
 $6FE2 DEFB $C3,$80,$03,$C3,$80,$03,$83,$80
 $6FEA DEFB $03,$83,$80,$03,$83,$80,$03,$83
 $6FF2 DEFB $80,$03,$83,$80,$03,$83,$80,$03
 $6FFA DEFB $83,$80,$03,$83,$80,$07,$83,$C0

; Director background
;
; #CALL:print_udg(#PC,director_background,3,5,40)
b$7002 DEFB $00,$38,$00,$00,$3C,$00,$00,$7E
 $700A DEFB $00,$00,$24,$00,$00,$24,$00,$00
 $7012 DEFB $24,$00,$00,$18,$00,$00,$24,$00
 $701A DEFB $01,$DB,$80,$01,$7E,$80,$03,$B7
 $7022 DEFB $80,$02,$5A,$C0,$07,$B7,$C0,$06
 $702A DEFB $DF,$40,$05,$B6,$A0,$06,$D5,$60
 $7032 DEFB $05,$BB,$A0,$06,$D5,$60,$07,$BB
 $703A DEFB $E0,$0C,$D5,$20,$05,$BB,$40,$07
 $7042 DEFB $D5,$80,$01,$BB,$80,$01,$EF,$80
 $704A DEFB $01,$55,$80,$01,$B6,$80,$01,$6D
 $7052 DEFB $80,$01,$A6,$80,$01,$67,$80,$03
 $705A DEFB $C2,$80,$02,$C3,$80,$03,$82,$80
 $7062 DEFB $02,$83,$80,$03,$82,$80,$02,$83
 $706A DEFB $80,$03,$82,$80,$02,$83,$80,$03
 $7072 DEFB $82,$80,$02,$83,$80,$07,$83,$C0

; Professor background
;
; #CALL:print_udg(#PC,professor_background,3,5,40)
b$707A DEFB $00,$14,$00,$00,$59,$00,$00,$2E
 $7082 DEFB $00,$00,$34,$00,$00,$24,$00,$00
 $708A DEFB $24,$00,$10,$18,$00,$00,$24,$00
 $7092 DEFB $00,$DB,$00,$21,$52,$80,$03,$55
 $709A DEFB $80,$12,$A9,$40,$06,$89,$20,$25
 $70A2 DEFB $95,$60,$39,$97,$A0,$52,$91,$90
 $70AA DEFB $34,$91,$90,$28,$91,$A0,$20,$91
 $70B2 DEFB $20,$00,$92,$40,$00,$92,$40,$01
 $70BA DEFB $17,$80,$01,$14,$80,$01,$13,$80
 $70C2 DEFB $01,$14,$80,$01,$14,$80,$01,$13
 $70CA DEFB $80,$02,$10,$80,$03,$10,$80,$03
 $70D2 DEFB $92,$80,$03,$ED,$80,$03,$C7,$80
 $70DA DEFB $03,$83,$80,$03,$83,$80,$03,$83
 $70E2 DEFB $80,$03,$83,$80,$03,$83,$80,$03
 $70EA DEFB $83,$80,$03,$83,$80,$07,$83,$C0

; Cop background
;
; #CALL:print_udg(#PC,cop_background,3,5,40)
b$70F2 DEFB $00,$00,$00,$00,$7E,$00,$00,$3C
 $70FA DEFB $00,$00,$3C,$00,$00,$24,$00,$00
 $7102 DEFB $24,$00,$00,$3C,$00,$00,$24,$00
 $710A DEFB $00,$FF,$00,$01,$F7,$80,$03,$FF
 $7112 DEFB $80,$03,$FF,$C0,$03,$FD,$C0,$07
 $711A DEFB $FD,$E2,$07,$FF,$E2,$07,$FF,$E2
 $7122 DEFB $06,$FF,$74,$06,$FF,$74,$06,$FF
 $712A DEFB $38,$06,$E7,$34,$03,$7E,$14,$01
 $7132 DEFB $FF,$08,$02,$FF,$10,$03,$FF,$00
 $713A DEFB $00,$EF,$00,$00,$FF,$00,$00,$EF
 $7142 DEFB $00,$00,$EF,$00,$00,$EF,$00,$00
 $714A DEFB $EF,$00,$00,$E7,$00,$00,$E7,$00
 $7152 DEFB $00,$E7,$00,$00,$E7,$00,$00,$E7
 $715A DEFB $00,$00,$E7,$00,$00,$E7,$00,$00
 $7162 DEFB $E7,$00,$01,$E7,$80,$03,$C7,$C0

; Mugger background
;
; #CALL:print_udg(#PC,mugger_background,3,5,40)
b$716A DEFB $00,$00,$00,$00,$3C,$00,$00,$3C
 $7172 DEFB $00,$00,$24,$00,$00,$3C,$00,$00
 $717A DEFB $24,$00,$00,$3C,$00,$00,$66,$00
 $7182 DEFB $01,$FF,$80,$03,$6E,$E0,$07,$AD
 $718A DEFB $F0,$0F,$EF,$F0,$0F,$EF,$F8,$0F
 $7192 DEFB $EF,$F8,$0F,$EF,$78,$0E,$EF,$7C
 $719A DEFB $07,$EF,$3C,$0F,$EF,$3C,$06,$83
 $71A2 DEFB $78,$07,$FF,$F8,$05,$0F,$90,$02
 $71AA DEFB $21,$A0,$03,$21,$40,$01,$10,$80
 $71B2 DEFB $01,$10,$80,$02,$10,$80,$02,$18
 $71BA DEFB $80,$02,$1C,$80,$02,$28,$80,$02
 $71C2 DEFB $28,$80,$02,$28,$40,$02,$24,$40
 $71CA DEFB $02,$46,$40,$02,$42,$40,$02,$42
 $71D2 DEFB $40,$02,$42,$40,$02,$42,$40,$03
 $71DA DEFB $C3,$C0,$07,$C3,$C0,$0F,$87,$C0

; Kevin background R
;
; #CALL:print_udg(#PC,kevin_background_r,3,5,40)
b$71E2 DEFB $00,$00,$00,$00,$18,$00,$00,$3C
 $71EA DEFB $00,$00,$24,$00,$00,$24,$00,$00
 $71F2 DEFB $24,$00,$00,$3C,$00,$03,$DB,$C0
 $71FA DEFB $03,$6A,$C0,$03,$E3,$C0,$03,$B6
 $7202 DEFB $C0,$07,$F7,$C0,$07,$B6,$E0,$0F
 $720A DEFB $D5,$E0,$0F,$F7,$E0,$0F,$54,$E0
 $7212 DEFB $0F,$E3,$F0,$0E,$6A,$70,$07,$E3
 $721A DEFB $78,$06,$FF,$78,$03,$FF,$36,$01
 $7222 DEFB $FF,$2C,$01,$F7,$3E,$03,$EB,$7E
 $722A DEFB $00,$FF,$2C,$01,$FF,$80,$01,$FF
 $7232 DEFB $80,$01,$FF,$80,$01,$EF,$80,$01
 $723A DEFB $EF,$C0,$03,$E7,$C0,$03,$E3,$C0
 $7242 DEFB $03,$E3,$C0,$03,$C1,$C0,$03,$C1
 $724A DEFB $E0,$03,$C1,$E0,$03,$C1,$E0,$03
 $7252 DEFB $C1,$E0,$01,$C0,$E0,$01,$E0,$F0

; Sprite positions 2
b$725A DEFB $30 ; Height
 $725B DEFB $04 ; Width
 $725C DEFB $C0 ; Size in bytes

; Redhawk foreground
;
; #CALL:print_udg(#PC,redhawk_foreground,4,5,40)
b$725D DEFB $01,$00,$00,$80,$01,$00,$00,$80
 $7265 DEFB $03,$07,$E0,$C0,$07,$0F,$50,$A0
 $726D DEFB $07,$9E,$B9,$60,$07,$9D,$59,$A0
 $7275 DEFB $07,$7E,$AF,$60,$07,$BF,$7B,$A0
 $727D DEFB $07,$5B,$DF,$60,$02,$B9,$9B,$C0
 $7285 DEFB $03,$7F,$FF,$C0,$02,$BC,$3B,$C0
 $728D DEFB $03,$78,$17,$C0,$01,$F8,$1F,$80
 $7295 DEFB $01,$F9,$97,$80,$0C,$7C,$3E,$70
 $729D DEFB $1F,$FF,$FF,$F8,$3D,$FF,$DD,$54
 $72A5 DEFB $3A,$FF,$BE,$AC,$7D,$4D,$53,$5C
 $72AD DEFB $7E,$CE,$B2,$BA,$67,$7D,$5F,$62
 $72B5 DEFB $43,$AB,$EA,$C2,$E3,$D5,$D5,$81
 $72BD DEFB $C3,$EA,$AB,$51,$84,$D5,$55,$21
 $72C5 DEFB $CE,$6A,$AB,$21,$E5,$75,$D6,$31
 $72CD DEFB $76,$3A,$AA,$26,$66,$15,$D4,$2A
 $72D5 DEFB $67,$1A,$E8,$22,$43,$95,$F9,$52
 $72DD DEFB $61,$FF,$FE,$E2,$43,$FF,$7F,$C2
 $72E5 DEFB $61,$8E,$B1,$E2,$C1,$CD,$50,$C2
 $72ED DEFB $A3,$86,$B1,$E2,$FF,$C5,$60,$C4
 $72F5 DEFB $E3,$C6,$A0,$84,$C1,$A7,$63,$C4
 $72FD DEFB $61,$D2,$A1,$C8,$79,$E3,$61,$B8
 $7305 DEFB $3F,$E2,$A3,$C8,$1F,$FF,$FF,$EA
 $730D DEFB $3F,$FE,$7F,$CE,$0F,$FE,$7F,$FC
 $7315 DEFB $0F,$FF,$FE,$F8,$07,$FA,$AF,$F8

; Techno foreground
;
; #CALL:print_udg(#PC,techno_foreground,4,5,40)
b$731D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7325 DEFB $00,$00,$00,$00,$00,$07,$E0,$00
 $732D DEFB $00,$18,$18,$00,$00,$19,$88,$00
 $7335 DEFB $00,$11,$88,$00,$00,$34,$2C,$00
 $733D DEFB $04,$27,$E4,$00,$04,$36,$64,$00
 $7345 DEFB $04,$30,$0C,$00,$04,$18,$18,$00
 $734D DEFB $04,$10,$08,$00,$0A,$D8,$19,$C0
 $7355 DEFB $7F,$FC,$1B,$FE,$C0,$3F,$EC,$01
 $735D DEFB $EE,$3F,$FC,$72,$6A,$38,$1C,$54
 $7365 DEFB $3E,$1F,$F8,$7C,$70,$0C,$30,$0E
 $736D DEFB $F8,$03,$E0,$1B,$F4,$00,$00,$21
 $7375 DEFB $FC,$00,$00,$31,$DA,$00,$00,$41
 $737D DEFB $CC,$01,$80,$23,$EE,$00,$00,$71
 $7385 DEFB $CE,$01,$80,$71,$DF,$00,$00,$79
 $738D DEFB $F7,$80,$00,$FD,$B3,$E1,$81,$FD
 $7395 DEFB $E3,$FB,$DE,$E7,$63,$A8,$24,$E6
 $739D DEFB $A3,$C0,$01,$71,$E2,$E0,$01,$61
 $73A5 DEFB $F2,$C0,$01,$73,$B6,$E0,$01,$6D
 $73AD DEFB $D4,$FF,$F9,$39,$EC,$FF,$FD,$31
 $73B5 DEFB $C8,$F0,$07,$31,$C4,$7F,$FE,$31
 $73BD DEFB $EC,$77,$E6,$39,$C8,$BC,$3D,$31
 $73C5 DEFB $E8,$80,$01,$39,$88,$FC,$3F,$19
 $73CD DEFB $68,$FF,$FF,$1A,$4D,$C0,$01,$B2
 $73D5 DEFB $73,$C0,$00,$CA,$37,$FF,$FF,$E4

; Merlin foreground
;
; #CALL:print_udg(#PC,merlin_foreground,4,5,40)
b$73DD DEFB $00,$00,$00,$00,$00,$00,$00,$60
 $73E5 DEFB $00,$03,$C0,$90,$00,$0E,$70,$F0
 $73ED DEFB $00,$19,$88,$90,$00,$36,$64,$F0
 $73F5 DEFB $00,$35,$AC,$60,$00,$7E,$7A,$60
 $73FD DEFB $00,$6F,$F6,$60,$00,$FF,$F9,$60
 $7405 DEFB $00,$BF,$FD,$60,$00,$D9,$9B,$60
 $740D DEFB $01,$FC,$3C,$E0,$01,$B8,$1D,$E0
 $7415 DEFB $11,$FC,$3E,$B0,$1D,$BD,$B9,$B8
 $741D DEFB $1F,$DF,$CA,$F8,$1F,$EB,$B5,$3C
 $7425 DEFB $33,$FB,$DB,$FC,$69,$7E,$6E,$32
 $742D DEFB $60,$BE,$7C,$32,$50,$01,$80,$32
 $7435 DEFB $E0,$01,$81,$B1,$D1,$00,$00,$F1
 $743D DEFB $D1,$40,$00,$F1,$E0,$80,$04,$B1
 $7445 DEFB $C1,$C0,$08,$B1,$61,$A0,$88,$B2
 $744D DEFB $C1,$D1,$D3,$B2,$C1,$FF,$FC,$B6
 $7455 DEFB $E3,$F6,$6B,$F1,$C3,$E8,$01,$F1
 $745D DEFB $E3,$C0,$01,$F1,$C2,$C1,$C3,$F1
 $7465 DEFB $E3,$E2,$A7,$71,$E2,$E4,$71,$59
 $746D DEFB $E1,$FA,$2D,$39,$D2,$F4,$01,$5A
 $7475 DEFB $73,$EC,$11,$BE,$65,$EA,$21,$5A
 $747D DEFB $23,$F4,$27,$7C,$31,$FC,$3E,$DC
 $7485 DEFB $21,$FF,$FF,$5C,$71,$F5,$D7,$3A
 $748D DEFB $61,$7F,$AF,$5A,$71,$FA,$5E,$BE
 $7495 DEFB $7D,$FF,$FF,$42,$7F,$FF,$FF,$FE

; Fusor foreground
;
; #CALL:print_udg(#PC,fusor_foreground,4,5,40)
b$749D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $74A5 DEFB $00,$00,$00,$00,$00,$08,$10,$00
 $74AD DEFB $00,$04,$20,$00,$00,$13,$C8,$00
 $74B5 DEFB $00,$00,$00,$00,$00,$08,$10,$00
 $74BD DEFB $00,$54,$2A,$00,$00,$83,$C1,$00
 $74C5 DEFB $00,$66,$66,$00,$00,$2F,$F4,$00
 $74CD DEFB $01,$0D,$B0,$80,$00,$4E,$72,$00
 $74D5 DEFB $00,$84,$20,$80,$00,$44,$22,$00
 $74DD DEFB $02,$94,$29,$80,$00,$02,$40,$20
 $74E5 DEFB $04,$93,$C9,$00,$01,$67,$E6,$80
 $74ED DEFB $03,$EF,$F7,$80,$02,$F7,$EF,$40
 $74F5 DEFB $05,$7F,$FE,$20,$0A,$1F,$F8,$10
 $74FD DEFB $0C,$40,$10,$10,$18,$00,$F0,$18
 $7505 DEFB $3D,$E3,$C4,$BC,$3F,$AF,$05,$FC
 $750D DEFB $7F,$C8,$03,$FE,$7F,$C0,$81,$FE
 $7515 DEFB $7F,$E0,$41,$FE,$FC,$C0,$A1,$3F
 $751D DEFB $FC,$E1,$CB,$3F,$F8,$6A,$76,$1F
 $7525 DEFB $F8,$7C,$3E,$1F,$FC,$70,$02,$3F
 $752D DEFB $FC,$30,$04,$3F,$7C,$30,$04,$3E
 $7535 DEFB $7E,$30,$04,$7E,$3E,$70,$0A,$7C
 $753D DEFB $1F,$B0,$0D,$F8,$0F,$F0,$0F,$F0
 $7545 DEFB $07,$F8,$1F,$E0,$03,$F4,$2F,$C0
 $754D DEFB $01,$E8,$17,$80,$01,$D0,$0B,$80
 $7555 DEFB $03,$E0,$06,$C0,$03,$FF,$FF,$C0

; The Rat foreground
;
; #CALL:print_udg(#PC,rat_foreground,4,5,40)
b$755D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7565 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $756D DEFB $00,$20,$04,$00,$00,$27,$E4,$00
 $7575 DEFB $00,$35,$6C,$00,$00,$3E,$BC,$00
 $757D DEFB $00,$3D,$54,$00,$00,$3E,$F4,$00
 $7585 DEFB $00,$16,$68,$00,$00,$17,$E8,$00
 $758D DEFB $01,$18,$18,$00,$02,$AE,$B5,$00
 $7595 DEFB $01,$DD,$72,$80,$00,$EE,$B5,$00
 $759D DEFB $01,$FF,$7A,$C0,$03,$FE,$DA,$C0
 $75A5 DEFB $06,$77,$4B,$60,$18,$BB,$94,$18
 $75AD DEFB $34,$48,$0A,$04,$38,$10,$10,$04
 $75B5 DEFB $78,$00,$00,$04,$75,$C0,$01,$C2
 $75BD DEFB $69,$80,$00,$C2,$71,$40,$00,$A2
 $75C5 DEFB $69,$80,$00,$C2,$71,$C0,$80,$A2
 $75CD DEFB $71,$80,$C0,$C2,$72,$D0,$EB,$82
 $75D5 DEFB $69,$F5,$FD,$D2,$39,$FE,$7F,$F4
 $75DD DEFB $31,$E0,$03,$CC,$21,$E0,$04,$C2
 $75E5 DEFB $71,$F0,$01,$C2,$61,$C1,$C7,$82
 $75ED DEFB $71,$F2,$21,$C2,$61,$64,$12,$82
 $75F5 DEFB $77,$64,$02,$C2,$63,$78,$02,$82
 $75FD DEFB $61,$70,$02,$C2,$39,$68,$02,$A4
 $7605 DEFB $31,$70,$02,$E8,$19,$F8,$06,$44
 $760D DEFB $1D,$3C,$FC,$84,$1E,$BF,$FC,$C4
 $7615 DEFB $1B,$FE,$7E,$84,$0F,$FF,$FF,$FC

; Mugger foreground
;
; #CALL:print_udg(#PC,mugger_foreground,4,5,40)
b$761D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7625 DEFB $00,$0F,$F0,$00,$00,$1F,$F8,$00
 $762D DEFB $00,$1F,$F8,$00,$00,$13,$C8,$00
 $7635 DEFB $00,$10,$08,$00,$00,$16,$68,$00
 $763D DEFB $00,$13,$C8,$00,$00,$10,$08,$00
 $7645 DEFB $00,$0C,$30,$00,$00,$14,$28,$00
 $764D DEFB $00,$09,$90,$00,$00,$0C,$30,$00
 $7655 DEFB $00,$14,$28,$00,$00,$3F,$FC,$00
 $765D DEFB $00,$6F,$FE,$00,$07,$B3,$E7,$C0
 $7665 DEFB $1F,$CD,$DD,$F0,$1F,$FE,$FB,$F8
 $766D DEFB $3F,$F6,$DF,$F8,$3F,$FA,$BF,$FC
 $7675 DEFB $3F,$FE,$FF,$FC,$7F,$FE,$FF,$FE
 $767D DEFB $7E,$FE,$FF,$7E,$7F,$FF,$7F,$FE
 $7685 DEFB $7F,$FF,$7F,$FE,$7F,$FF,$7F,$FE
 $768D DEFB $3F,$FF,$7F,$FC,$3E,$FF,$7F,$7C
 $7695 DEFB $3F,$FF,$7F,$FC,$3F,$FF,$7F,$FC
 $769D DEFB $3F,$FF,$7F,$FC,$3F,$FF,$7F,$FC
 $76A5 DEFB $7F,$FF,$7F,$FE,$7F,$FF,$7F,$FE
 $76AD DEFB $7F,$FF,$7F,$FE,$7E,$7F,$7E,$7E
 $76B5 DEFB $7E,$7F,$7E,$7E,$7F,$7F,$7E,$FE
 $76BD DEFB $7F,$FF,$7F,$FE,$3F,$FF,$7F,$FC
 $76C5 DEFB $3F,$5E,$7A,$FC,$3F,$41,$02,$FC
 $76CD DEFB $3F,$81,$01,$FC,$1E,$81,$01,$78
 $76D5 DEFB $12,$81,$79,$48,$3F,$FF,$FF,$FC

; Kevin foreground
;
; #CALL:print_udg(#PC,kevin_foreground,4,5,40)
;
;
;
; Note, the sprite collides with the sprite position definitions at #R$779C
b$76DD DEFB $00,$00,$00,$00,$00,$0F,$F0,$00
 $76E5 DEFB $00,$1F,$F8,$00,$00,$37,$FC,$00
 $76ED DEFB $00,$3B,$9C,$00,$00,$38,$1C,$00
 $76F5 DEFB $00,$30,$0C,$00,$00,$3F,$FC,$00
 $76FD DEFB $00,$31,$8C,$00,$00,$2E,$74,$00
 $7705 DEFB $00,$10,$08,$00,$00,$10,$08,$00
 $770D DEFB $00,$10,$08,$00,$00,$09,$90,$00
 $7715 DEFB $00,$18,$18,$00,$00,$37,$EC,$00
 $771D DEFB $3D,$F3,$CE,$FC,$7F,$EB,$D7,$FE
 $7725 DEFB $7E,$DD,$BA,$FE,$FE,$D9,$9A,$FF
 $772D DEFB $FE,$ED,$B6,$FF,$FF,$ED,$AF,$FF
 $7735 DEFB $FF,$75,$8D,$FF,$FE,$77,$DD,$FF
 $773D DEFB $FF,$77,$DD,$7F,$FE,$FB,$BF,$FF
 $7745 DEFB $FF,$BB,$BB,$FF,$FF,$BB,$BB,$FF
 $774D DEFB $FF,$BD,$7B,$FF,$7E,$FE,$FF,$7E
 $7755 DEFB $7F,$DF,$F7,$FE,$7F,$DE,$F7,$FE
 $775D DEFB $7F,$DF,$F7,$FE,$7F,$FE,$FF,$FE
 $7765 DEFB $FF,$EF,$EF,$FE,$FF,$EE,$EF,$FE
 $776D DEFB $FF,$F2,$BF,$FF,$FF,$64,$4F,$7F
 $7775 DEFB $FF,$ED,$6F,$7F,$7F,$64,$4F,$FF
 $777D DEFB $7F,$E3,$8F,$FE,$7F,$7E,$FF,$FE
 $7785 DEFB $7F,$FF,$FF,$FE,$3F,$FE,$FF,$FE
 $778D DEFB $7F,$7F,$FF,$FC,$3F,$FE,$FF,$FE
 $7795 DEFB $3F,$FF,$FF,$FC,$3F,$FF,$7F
 
; Sprite positions 3
b$779C DEFB $28 ; Height 
 $779D DEFB $03 ; Width
 $779E DEFB $78 ; Size in bytes

; Kevin walking L
;
; #CALL:print_udg(#PC,kevin_walking_l,3,5,40)
b$779F DEFB $00,$00,$00,$00,$18,$00,$00,$3C
 $77A7 DEFB $00,$00,$2C,$00,$00,$24,$00,$00
 $77AF DEFB $2C,$00,$00,$38,$00,$00,$34,$00
 $77B7 DEFB $00,$4E,$00,$00,$6F,$80,$00,$6B
 $77BF DEFB $80,$00,$DF,$C0,$00,$DB,$C0,$00
 $77C7 DEFB $DF,$E0,$00,$DB,$E0,$00,$DF,$F0
 $77CF DEFB $01,$D7,$70,$03,$8F,$70,$05,$A7
 $77D7 DEFB $70,$06,$8F,$28,$00,$7F,$38,$00
 $77DF DEFB $7F,$18,$00,$FF,$00,$00,$FF,$00
 $77E7 DEFB $00,$FE,$00,$01,$FD,$00,$01,$FB
 $77EF DEFB $00,$01,$F7,$00,$01,$EF,$80,$01
 $77F7 DEFB $EF,$80,$03,$EF,$80,$03,$E7,$C0
 $77FF DEFB $03,$E3,$C0,$03,$C3,$E0,$03,$C1
 $7807 DEFB $F0,$03,$C0,$F8,$01,$80,$7C,$03
 $780F DEFB $80,$38,$07,$80,$70,$0F,$80,$E0

; Redhawk walking L
;
; #CALL:print_udg(#PC,redhawk_walking_l,3,5,40)
b$7817 DEFB $00,$E6,$00,$01,$FE,$00,$01,$72
 $781F DEFB $00,$01,$F2,$00,$01,$72,$00,$01
 $7827 DEFB $E4,$00,$00,$EC,$00,$01,$FA,$00
 $782F DEFB $03,$E6,$00,$03,$C2,$00,$03,$C2
 $7837 DEFB $00,$03,$C1,$00,$03,$E1,$00,$03
 $783F DEFB $91,$00,$01,$91,$00,$01,$A2,$00
 $7847 DEFB $02,$F5,$00,$07,$79,$00,$07,$F9
 $784F DEFB $00,$03,$E5,$00,$01,$E4,$80,$01
 $7857 DEFB $C4,$80,$01,$42,$80,$01,$42,$80
 $785F DEFB $02,$42,$40,$02,$24,$40,$02,$22
 $7867 DEFB $20,$03,$22,$10,$05,$32,$08,$05
 $786F DEFB $32,$10,$07,$D2,$30,$05,$6E,$C0
 $7877 DEFB $0B,$CE,$00,$03,$CE,$80,$03,$C3
 $787F DEFB $80,$01,$83,$C0,$01,$81,$E0,$03
 $7887 DEFB $83,$C0,$0F,$87,$80,$1F,$07,$00

; The Rat walking R
;
; #CALL:print_udg(#PC,rat_walking_r,3,5,40)
b$788F DEFB $00,$20,$00,$00,$18,$00,$00,$14
 $7897 DEFB $00,$00,$12,$00,$00,$2A,$00,$00
 $789F DEFB $3F,$00,$00,$3D,$00,$00,$1F,$00
 $78A7 DEFB $00,$1F,$00,$00,$2B,$80,$00,$31
 $78AF DEFB $80,$00,$20,$80,$00,$40,$40,$00
 $78B7 DEFB $84,$40,$01,$08,$40,$01,$12,$40
 $78BF DEFB $00,$89,$C0,$00,$4A,$80,$00,$48
 $78C7 DEFB $80,$00,$DD,$00,$01,$BE,$E0,$03
 $78CF DEFB $9F,$60,$07,$87,$60,$07,$0C,$80
 $78D7 DEFB $0D,$10,$80,$0D,$18,$80,$0D,$24
 $78DF DEFB $40,$07,$24,$40,$06,$24,$40,$03
 $78E7 DEFB $42,$40,$07,$C2,$C0,$03,$C1,$40
 $78EF DEFB $05,$82,$20,$04,$C2,$40,$04,$E2
 $78F7 DEFB $40,$09,$31,$40,$05,$19,$20,$02
 $78FF DEFB $CD,$30,$03,$C7,$F8,$00,$00,$00

; Techno walking R
;
; #CALL:print_udg(#PC,tecno_walking_r,3,5,40)
b$7907 DEFB $00,$00,$00,$00,$18,$00,$00,$24
 $790F DEFB $00,$00,$34,$00,$00,$25,$00,$00
 $7917 DEFB $25,$00,$01,$5B,$00,$00,$FF,$80
 $791F DEFB $04,$AE,$00,$0B,$10,$80,$09,$10
 $7927 DEFB $C0,$08,$C8,$C0,$06,$CA,$C0,$03
 $792F DEFB $C7,$80,$02,$57,$40,$02,$A7,$40
 $7937 DEFB $05,$27,$20,$02,$97,$20,$00,$92
 $793F DEFB $A0,$00,$48,$C0,$00,$D1,$00,$00
 $7947 DEFB $E9,$80,$00,$82,$80,$00,$84,$80
 $794F DEFB $01,$04,$40,$01,$08,$60,$01,$14
 $7957 DEFB $90,$03,$14,$90,$05,$14,$A0,$05
 $795F DEFB $24,$E0,$07,$67,$40,$03,$A2,$80
 $7967 DEFB $02,$44,$80,$02,$84,$80,$04,$84
 $796F DEFB $80,$05,$06,$80,$07,$02,$40,$04
 $7977 DEFB $83,$60,$07,$C3,$F8,$00,$00,$00

; Merlin walking R
;
; #CALL:print_udg(#PC,merlin_walking_r,3,5,40)
b$797F DEFB $00,$0C,$00,$00,$12,$00,$00,$11
 $7987 DEFB $02,$00,$10,$85,$00,$10,$43,$00
 $798F DEFB $20,$C2,$00,$21,$82,$00,$29,$84
 $7997 DEFB $00,$36,$84,$00,$49,$C4,$00,$40
 $799F DEFB $44,$00,$88,$48,$00,$8C,$C8,$01
 $79A7 DEFB $96,$C8,$01,$90,$50,$03,$10,$50
 $79AF DEFB $03,$10,$50,$07,$90,$A0,$07,$9F
 $79B7 DEFB $20,$07,$88,$E0,$07,$C7,$C0,$0F
 $79BF DEFB $E9,$40,$0F,$95,$40,$0F,$89,$40
 $79C7 DEFB $0F,$01,$20,$0F,$11,$20,$0F,$10
 $79CF DEFB $A0,$0F,$90,$A0,$0F,$10,$A0,$0F
 $79D7 DEFB $90,$A0,$1F,$F0,$E0,$1E,$12,$E0
 $79DF DEFB $1F,$3B,$60,$3F,$3E,$40,$3F,$BE
 $79E7 DEFB $C0,$01,$A2,$C0,$00,$A1,$40,$00
 $79EF DEFB $A1,$60,$01,$F1,$F0,$00,$00,$00

; Fusor walking R
;
; #CALL:print_udg(#PC,fusor_walking_r,3,5,40)
b$79F7 DEFB $00,$10,$00,$00,$28,$00,$00,$44
 $79FF DEFB $00,$00,$98,$00,$02,$A6,$00,$04
 $7A07 DEFB $64,$00,$03,$96,$00,$00,$58,$00
 $7A0F DEFB $05,$3E,$00,$02,$D4,$00,$03,$82
 $7A17 DEFB $00,$03,$C3,$00,$07,$CB,$00,$06
 $7A1F DEFB $B7,$80,$07,$43,$80,$07,$43,$00
 $7A27 DEFB $03,$E3,$00,$01,$E7,$00,$00,$E3
 $7A2F DEFB $00,$01,$22,$00,$01,$16,$00,$02
 $7A37 DEFB $19,$00,$02,$19,$00,$01,$11,$00
 $7A3F DEFB $01,$36,$00,$00,$F7,$00,$01,$F7
 $7A47 DEFB $00,$01,$EF,$00,$01,$EF,$00,$01
 $7A4F DEFB $EF,$00,$01,$E7,$00,$01,$E7,$00
 $7A57 DEFB $01,$C3,$00,$01,$C3,$00,$03,$83
 $7A5F DEFB $00,$03,$83,$00,$03,$83,$00,$03
 $7A67 DEFB $83,$00,$03,$83,$80,$03,$C3,$C0

; Mugger walking R
;
; #CALL:print_udg(#PC,mugger_walking_r,3,5,40)
b$7A6F DEFB $00,$00,$00,$00,$1E,$00,$00,$3E
 $7A77 DEFB $00,$00,$3A,$00,$00,$3A,$00,$00
 $7A7F DEFB $36,$00,$00,$3A,$00,$00,$16,$00
 $7A87 DEFB $00,$73,$00,$00,$FF,$00,$00,$FF
 $7A8F DEFB $80,$03,$FE,$80,$03,$FF,$80,$03
 $7A97 DEFB $FE,$C0,$03,$DF,$C0,$07,$FF,$40
 $7A9F DEFB $07,$7F,$C0,$07,$FE,$C0,$07,$FF
 $7AA7 DEFB $C0,$07,$7E,$C0,$07,$FE,$E0,$07
 $7AAF DEFB $3D,$30,$07,$05,$90,$03,$84,$80
 $7AB7 DEFB $01,$08,$80,$01,$08,$80,$01,$88
 $7ABF DEFB $80,$00,$88,$80,$00,$88,$80,$00
 $7AC7 DEFB $88,$80,$01,$14,$40,$01,$14,$40
 $7ACF DEFB $01,$14,$40,$01,$22,$40,$01,$22
 $7AD7 DEFB $40,$01,$22,$40,$01,$22,$40,$00
 $7ADF DEFB $E3,$80,$00,$C1,$E0,$01,$E1,$F0

; Character set (small)
b$7AE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AEF DEFB $00,$80,$80,$80,$80,$00,$80,$00
 $7AF7 DEFB $00,$A0,$A0,$00,$00,$00,$00,$00
 $7AFF DEFB $00,$00,$A0,$E0,$A0,$E0,$A0,$00
 $7B07 DEFB $00,$40,$60,$80,$40,$20,$C0,$40
 $7B0F DEFB $00,$00,$80,$20,$40,$80,$20,$00
 $7B17 DEFB $00,$10,$28,$10,$2A,$44,$3A,$00
 $7B1F DEFB $00,$40,$80,$00,$00,$00,$00,$00
 $7B27 DEFB $00,$40,$80,$80,$80,$80,$40,$00
 $7B2F DEFB $00,$40,$20,$20,$20,$20,$40,$00
 $7B37 DEFB $00,$00,$00,$A0,$40,$A0,$00,$00
 $7B3F DEFB $00,$00,$00,$40,$E0,$40,$00,$00
 $7B47 DEFB $00,$00,$00,$00,$00,$40,$40,$80
 $7B4F DEFB $00,$00,$00,$00,$E0,$00,$00,$00
 $7B57 DEFB $00,$00,$00,$00,$00,$00,$80,$00
 $7B5F DEFB $00,$80,$40,$40,$40,$40,$20,$00
 $7B67 DEFB $00,$00,$E0,$A0,$A0,$A0,$E0,$00
 $7B6F DEFB $00,$00,$40,$C0,$40,$40,$E0,$00
 $7B77 DEFB $00,$00,$C0,$20,$40,$80,$E0,$00
 $7B7F DEFB $00,$00,$C0,$20,$C0,$20,$C0,$00
 $7B87 DEFB $00,$00,$20,$60,$A0,$E0,$20,$00
 $7B8F DEFB $00,$00,$E0,$80,$C0,$20,$C0,$00
 $7B97 DEFB $00,$00,$40,$80,$C0,$A0,$40,$00
 $7B9F DEFB $00,$00,$E0,$20,$40,$80,$80,$00
 $7BA7 DEFB $00,$00,$40,$A0,$40,$A0,$40,$00
 $7BAF DEFB $00,$00,$60,$A0,$60,$20,$20,$00
 $7BB7 DEFB $00,$00,$00,$40,$00,$40,$00,$00
 $7BBF DEFB $00,$00,$00,$40,$00,$40,$40,$80
 $7BC7 DEFB $00,$00,$20,$40,$80,$40,$20,$00
 $7BCF DEFB $00,$00,$00,$E0,$00,$E0,$00,$00
 $7BD7 DEFB $00,$00,$80,$40,$20,$40,$80,$00
 $7BDF DEFB $00,$40,$A0,$A0,$20,$40,$00,$40
 $7BE7 DEFB $00,$00,$60,$A0,$E0,$80,$60,$00
 $7BEF DEFB $00,$40,$A0,$E0,$A0,$A0,$A0,$00
 $7BF7 DEFB $00,$C0,$A0,$C0,$A0,$A0,$C0,$00
 $7BFF DEFB $00,$40,$A0,$80,$80,$A0,$40,$00
 $7C07 DEFB $00,$C0,$A0,$A0,$A0,$A0,$C0,$00
 $7C0F DEFB $00,$E0,$80,$E0,$80,$80,$E0,$00
 $7C17 DEFB $00,$E0,$80,$C0,$80,$80,$80,$00
 $7C1F DEFB $00,$40,$A0,$80,$E0,$A0,$40,$00
 $7C27 DEFB $00,$A0,$A0,$E0,$A0,$A0,$A0,$00
 $7C2F DEFB $00,$E0,$40,$40,$40,$40,$E0,$00
 $7C37 DEFB $00,$20,$20,$20,$A0,$A0,$40,$00
 $7C3F DEFB $00,$80,$A0,$C0,$A0,$A0,$A0,$00
 $7C47 DEFB $00,$80,$80,$80,$80,$80,$E0,$00
 $7C4F DEFB $00,$A0,$E0,$E0,$E0,$A0,$A0,$00
 $7C57 DEFB $00,$40,$A0,$A0,$A0,$A0,$A0,$00
 $7C5F DEFB $00,$40,$A0,$A0,$A0,$A0,$40,$00
 $7C67 DEFB $00,$C0,$A0,$C0,$80,$80,$80,$00
 $7C6F DEFB $00,$40,$A0,$A0,$A0,$A0,$40,$60
 $7C77 DEFB $00,$C0,$A0,$A0,$C0,$A0,$A0,$00
 $7C7F DEFB $00,$60,$80,$40,$20,$A0,$40,$00
 $7C87 DEFB $00,$E0,$40,$40,$40,$40,$40,$00
 $7C8F DEFB $00,$A0,$A0,$A0,$A0,$A0,$E0,$00
 $7C97 DEFB $00,$A0,$A0,$A0,$A0,$A0,$40,$00
 $7C9F DEFB $00,$A0,$A0,$E0,$E0,$E0,$A0,$00
 $7CA7 DEFB $00,$A0,$A0,$40,$A0,$A0,$A0,$00
 $7CAF DEFB $00,$A0,$A0,$40,$40,$40,$40,$00
 $7CB7 DEFB $00,$E0,$20,$40,$40,$80,$E0,$00

; Character set (small letters)
b$7CBF DEFB $00,$C0,$80,$80,$80,$80,$C0,$00
 $7CC7 DEFB $00,$80,$40,$40,$40,$40,$20,$00
 $7CCF DEFB $00,$C0,$40,$40,$40,$40,$C0,$00
 $7CD7 DEFB $00,$00,$40,$E0,$40,$40,$40,$00
 $7CDF DEFB $00,$00,$00,$00,$00,$00,$00,$E0
 $7CE7 DEFB $00,$60,$40,$E0,$40,$40,$E0,$00
 $7CEF DEFB $00,$00,$C0,$20,$E0,$A0,$E0,$00
 $7CF7 DEFB $00,$00,$80,$80,$C0,$A0,$C0,$00
 $7CFF DEFB $00,$00,$40,$A0,$80,$A0,$40,$00
 $7D07 DEFB $00,$00,$20,$20,$60,$A0,$60,$00
 $7D0F DEFB $00,$00,$40,$A0,$E0,$80,$E0,$00
 $7D17 DEFB $00,$00,$60,$80,$C0,$80,$80,$00
 $7D1F DEFB $00,$00,$60,$A0,$A0,$60,$20,$C0
 $7D27 DEFB $00,$00,$80,$80,$E0,$A0,$A0,$00
 $7D2F DEFB $00,$40,$00,$C0,$40,$40,$E0,$00
 $7D37 DEFB $00,$20,$00,$20,$20,$20,$A0,$40
 $7D3F DEFB $00,$00,$80,$A0,$C0,$A0,$A0,$00
 $7D47 DEFB $00,$00,$80,$80,$80,$80,$40,$00
 $7D4F DEFB $00,$00,$A0,$E0,$E0,$A0,$A0,$00
 $7D57 DEFB $00,$00,$40,$A0,$A0,$A0,$A0,$00
 $7D5F DEFB $00,$00,$40,$A0,$A0,$A0,$40,$00
 $7D67 DEFB $00,$00,$C0,$A0,$A0,$C0,$80,$80
 $7D6F DEFB $00,$00,$60,$A0,$A0,$60,$20,$20
 $7D77 DEFB $00,$00,$40,$A0,$80,$80,$80,$00
 $7D7F DEFB $00,$00,$60,$80,$40,$20,$C0,$00
 $7D87 DEFB $00,$00,$40,$E0,$40,$40,$20,$00
 $7D8F DEFB $00,$00,$A0,$A0,$A0,$A0,$E0,$00
 $7D97 DEFB $00,$00,$A0,$A0,$A0,$40,$40,$00
 $7D9F DEFB $00,$00,$A0,$A0,$E0,$E0,$A0,$00
 $7DA7 DEFB $00,$00,$A0,$A0,$40,$A0,$A0,$00
 $7DAF DEFB $00,$00,$A0,$A0,$A0,$60,$20,$C0
 $7DB7 DEFB $00,$00,$E0,$20,$40,$80,$E0

; Character set (large)
b$7DBE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DC6 DEFB $00,$00,$18,$18,$18,$18,$00,$18
 $7DCE DEFB $00,$00,$24,$24,$00,$00,$00,$00
 $7DD6 DEFB $00,$00,$0F,$1F,$37,$3B,$38,$30
 $7DDE DEFB $3F,$00,$F0,$F8,$FC,$9C,$1C,$0C
 $7DE6 DEFB $FC,$31,$2E,$10,$10,$10,$09,$08
 $7DEE DEFB $07,$8C,$74,$08,$08,$08,$90,$10
 $7DF6 DEFB $E0,$00,$08,$10,$00,$00,$00,$00
 $7DFE DEFB $00,$00,$00,$0C,$18,$30,$18,$0C
 $7E06 DEFB $00,$00,$00,$30,$18,$0C,$18,$30
 $7E0E DEFB $00,$00,$00,$14,$08,$3E,$08,$14
 $7E16 DEFB $00,$00,$00,$08,$08,$3E,$08,$08
 $7E1E DEFB $00,$00,$00,$00,$00,$00,$08,$08
 $7E26 DEFB $10,$00,$00,$00,$00,$3C,$00,$00
 $7E2E DEFB $00,$00,$00,$00,$00,$00,$18,$18
 $7E36 DEFB $00,$00,$00,$06,$0C,$18,$30,$60
 $7E3E DEFB $00,$00,$3C,$66,$6E,$76,$66,$3C
 $7E46 DEFB $00,$00,$18,$38,$18,$18,$18,$3C
 $7E4E DEFB $00,$00,$3C,$46,$06,$3C,$60,$7E
 $7E56 DEFB $00,$00,$3C,$66,$0C,$06,$66,$3C
 $7E5E DEFB $00,$00,$0C,$1C,$3C,$6C,$7E,$0C
 $7E66 DEFB $00,$00,$7E,$60,$7C,$06,$66,$3C
 $7E6E DEFB $00,$00,$3C,$60,$7C,$66,$66,$3C
 $7E76 DEFB $00,$00,$7E,$06,$0C,$18,$30,$30
 $7E7E DEFB $00,$00,$3C,$66,$3C,$66,$66,$3C
 $7E86 DEFB $00,$00,$3C,$66,$66,$3E,$06,$3C
 $7E8E DEFB $00,$00,$18,$18,$00,$00,$18,$18
 $7E96 DEFB $00,$00,$00,$10,$00,$00,$10,$10
 $7E9E DEFB $20,$00,$00,$0C,$18,$30,$18,$0C
 $7EA6 DEFB $00,$00,$00,$00,$3E,$00,$3E,$00
 $7EAE DEFB $00,$00,$00,$30,$18,$0C,$18,$30
 $7EB6 DEFB $00,$00,$3C,$66,$0C,$18,$00,$18
 $7EBE DEFB $00,$00,$3C,$4A,$56,$5E,$40,$3C
 $7EC6 DEFB $00,$00,$3C,$66,$66,$7E,$66,$66
 $7ECE DEFB $00,$00,$7C,$66,$7C,$66,$66,$7C
 $7ED6 DEFB $00,$00,$3C,$66,$60,$60,$66,$3C
 $7EDE DEFB $00,$00,$78,$6C,$66,$66,$6C,$78
 $7EE6 DEFB $00,$00,$7E,$60,$7C,$60,$60,$7E
 $7EEE DEFB $00,$00,$7E,$60,$7C,$60,$60,$60
 $7EF6 DEFB $00,$00,$3C,$66,$60,$6E,$66,$3C
 $7EFE DEFB $00,$00,$66,$66,$7E,$66,$66,$66
 $7F06 DEFB $00,$00,$3C,$18,$18,$18,$18,$3C
 $7F0E DEFB $00,$00,$06,$06,$06,$66,$66,$3C
 $7F16 DEFB $00,$00,$6C,$78,$70,$78,$6C,$66
 $7F1E DEFB $00,$00,$60,$60,$60,$60,$60,$7E
 $7F26 DEFB $00,$00,$42,$66,$7E,$66,$66,$66
 $7F2E DEFB $00,$00,$66,$66,$76,$6E,$66,$66
 $7F36 DEFB $00,$00,$3C,$66,$66,$66,$66,$3C
 $7F3E DEFB $00,$00,$7C,$66,$66,$7C,$60,$60
 $7F46 DEFB $00,$00,$3C,$66,$66,$76,$6E,$3C
 $7F4E DEFB $00,$00,$7C,$66,$66,$7C,$6C,$66
 $7F56 DEFB $00,$00,$3C,$60,$3C,$06,$66,$3C
 $7F5E DEFB $00,$00,$7E,$18,$18,$18,$18,$18
 $7F66 DEFB $00,$00,$66,$66,$66,$66,$66,$3C
 $7F6E DEFB $00,$00,$66,$66,$66,$66,$3C,$18
 $7F76 DEFB $00,$00,$66,$66,$66,$66,$7E,$24
 $7F7E DEFB $00,$00,$66,$3C,$18,$18,$3C,$66
 $7F86 DEFB $00,$00,$66,$3C,$18,$18,$18,$18
 $7F8E DEFB $00,$00,$7E,$06,$0C,$18,$30,$7E
 $7F96 DEFB $00,$00,$07,$0F,$1E,$1D,$1E,$1F
 $7F9E DEFB $1B,$00,$E0,$50,$B8,$58,$A8,$78
 $7FA6 DEFB $D8,$19,$1F,$1C,$08,$08,$09,$0C
 $7FAE DEFB $07,$98,$F8,$38,$10,$10,$90,$30
 $7FB6 DEFB $E0,$00,$00,$00,$00,$00,$00,$00
 $7FBE DEFB $FF,$00,$1C,$36,$78,$30,$30,$7E
 $7FC6 DEFB $00,$00,$18,$3C,$66,$66,$7E,$66
 $7FCE DEFB $66,$00,$FC,$66,$66,$7C,$66,$66
 $7FD6 DEFB $FC,$00,$3C,$66,$C0,$C0,$C0,$66
 $7FDE DEFB $3C,$00,$F8,$6C,$66,$66,$66,$6C
 $7FE6 DEFB $F8,$00,$FE,$62,$68,$78,$68,$62
 $7FEE DEFB $FE,$00,$FE,$62,$68,$78,$68,$60
 $7FF6 DEFB $F0,$00,$3C,$66,$C0,$C0,$CE,$66
 $7FFE DEFB $3E,$00,$66,$66,$66,$7E,$66,$66
 $8006 DEFB $66,$00,$7E,$18,$18,$18,$18,$18
 $800E DEFB $7E,$00,$1E,$0C,$0C,$0C,$CC,$CC
 $8016 DEFB $78,$00,$E6,$66,$6C,$78,$6C,$66
 $801E DEFB $E6,$00,$F0,$60,$60,$60,$62,$66
 $8026 DEFB $FE,$00,$C6,$EE,$FE,$FE,$D6,$C6
 $802E DEFB $C6,$00,$C6,$E6,$F6,$DE,$CE,$C6
 $8036 DEFB $C6,$00,$38,$6C,$C6,$C6,$C6,$6C
 $803E DEFB $38,$00,$FC,$66,$66,$7C,$60,$60
 $8046 DEFB $F0,$00,$38,$6C,$C6,$C6,$DA,$CC
 $804E DEFB $76,$00,$FC,$66,$66,$7C,$6C,$66
 $8056 DEFB $E6,$00,$3C,$66,$60,$3C,$06,$66
 $805E DEFB $3C,$00,$7E,$5A,$18,$18,$18,$18
 $8066 DEFB $3C,$00,$66,$66,$66,$66,$66,$66
 $806E DEFB $3C,$00,$66,$66,$66,$66,$66,$3C
 $8076 DEFB $18,$00,$C6,$C6,$C6,$D6,$FE,$EE
 $807E DEFB $C6,$00,$C6,$6C,$38,$38,$6C,$C6
 $8086 DEFB $C6,$00,$66,$66,$66,$3C,$18,$18
 $808E DEFB $3C,$00,$FE,$C6,$8C,$18,$32,$66
 $8096 DEFB $FE,$00,$7E,$46,$4A,$56,$66,$7E
 $809E DEFB $00,$00,$08,$08,$08,$18,$18,$18
 $80A6 DEFB $00,$00,$7E,$42,$02,$7E,$60,$7E
 $80AE DEFB $00,$00,$7C,$44,$1E,$06,$46,$7E
 $80B6 DEFB $00,$00,$7C,$44,$44,$44,$7E,$0C
 $80BE DEFB $00,$00,$7E,$40,$7E,$06,$46,$7E
 $80C6 DEFB $00,$00,$7E,$40,$7E,$46,$46,$7E
 $80CE DEFB $00,$00,$7C,$04,$04,$0C,$0C,$0C
 $80D6 DEFB $00,$00,$3C,$24,$7E,$46,$46,$7E
 $80DE DEFB $00,$00,$7E,$42,$42,$7E,$06,$06

;Unused
u$80E6 DEFB $00,$00

; Pointers to text tables
;
; Used by the routine in #R$CB37
b$80E8 DEFW $8124   ; Table 05 : Directions
 $80EA DEFW $818B   ; Table 06 : Adverbs
 $80EC DEFW $81AC   ; Table 07 : Prepositions
 $80EE DEFW $81FC   ; Table 08 : User flags
 $80F0 DEFW $8248   ; Table 09 : Response words
 $80F2 DEFW $8391   ; Table 0A : Alert words
 $80F4 DEFW $8445   ; Table 0B : Verbs
 $80F6 DEFW $8711   ; Table 0C : Responses
 $80F8 DEFW $AA5E   ; Table 0D : Nouns
 $80FA DEFW $ADF1   ; Table 0E : Character responses
 $80FC DEFW $B5FF   ; Table 0F : Room specific responses

; Pointers to data tables
;
; Used by the routine in #R$D6C0
b$80FE DEFW $BD81   ; Table 10
 $8100 DEFW $BDCD   ; Table 11
 $8102 DEFW $BE1D   ; Table 12
 $8104 DEFW $BE6D   ; Table 13

; Offset difference table
b$8106 DEFB $09,$12,$2F,$3C,$3E,$46,$48,$56
 $810E DEFB $69,$8D,$8D,$A5,$D0,$E3,$F7

; Unused
u$8115 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $811D DEFB $00,$00,$00,$00,$00,$00,$00

; Data table 05
b$8124 DEFM $08,"n,north"
 $812C DEFM $08,"s,south"
 $8134 DEFM $07,"e,east"
 $813B DEFM $07,"w,west"
 $8142 DEFM $05,"u,up"
 $8147 DEFM $07,"d,down"
 $814E DEFM $15,"in,into,inside,enter"
 $8163 DEFB $28,"out,outside,exit,leave,escape,break out"

; Data table 06
b$818B DEFM $10,"quickly,rapidly"
 $819B DEFM $11,"slowly,carefully"

; Data table 07
b$81AC DEFM $0D,"about,around"
 $81B9 DEFM $05,"from"
 $81BE DEFM $08,"on,onto"
 $81C6 DEFM $03,"of"
 $81C9 DEFM $04,"off"
 $81CD DEFM $04,"out"
 $81D1 DEFM $05,"over"
 $81D6 DEFM $06,"under"
 $81DC DEFM $07,"behind"
 $81E3 DEFM $08,"through"
 $81EB DEFM $03,"to"
 $81EE DEFM $05,"with"
 $81F3 DEFM $03,"at"
 $81F6 DEFM $06,"until"

; Data table 08 (user flags)
;
; Accessed by pointing to (#R$80EE)
;.
; Accessed via the macro #N$FF, xx
g$81FC DEFB $00

; Current character (?)
;
g$81FD DEFB $00

; Game status buffer entry at 81FE
g$81FE DEFB $68

; Game status buffer entry at 81FF
g$81FF DEFB $E3

; Game status buffer entry at 8200
g$8200 DEFB $00

; Popularity
g$8201 DEFB $00

; Game status buffer entry at 8202
g$8202 DEFB $00

; Game status buffer entry at 8203
g$8203 DEFB $0A

; Game status buffer entry at 8204
g$8204 DEFB $00

; Energy
g$8205 DEFB $00

; Game status buffer entry at 8206
g$8206 DEFB $00

; Game status buffer entry at 8207
g$8207 DEFB $21

; Game status buffer entry at 8208
g$8208 DEFB $00

; Current sprite flags
g$8209 DEFB $00

; Game status buffer entry at 820A
g$820A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8212 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $821A DEFB $00,$04,$00,$00,$00,$00,$00,$00
 $8222 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $822A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8232 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $823A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8242 DEFB $00,$00,$00,$00,$00,$00

; Data table 09 - Common words
;
; Accessed via the macro #N$FE, xx
b$8248 DEFM $06,"what " ; Entry 00
 $824E DEFM $04,$FE,$00,"?" ; Entry 01
 $8252 DEFM $07,"where?" ; Entry 02
 $8259 DEFM $05,"the " ; Entry 03
 $825E DEFM $05,"that" ; Entry 04
 $8263 DEFM $04,"..." ; Entry 05
 $8267 DEFM $03,"a " ; Entry 06
 $826A DEFM $07,"can't " ; Entry 07
 $8271 DEFM $07,"looks " ; Entry 08
 $8278 DEFM $08,$91," goes " ; Entry 09
 $8280 DEFM $09,$91," flies " ; Entry 0A
 $8289 DEFM $10,"(",$91," ",$FE,$08,"for ",$FE,$06,"way " ; Entry 0B
 $8299 DEFM $06,"north" ; Entry 0C
 $829F DEFM $06,"south" ; Entry 0D
 $82A5 DEFM $05,"east" ; Entry 0E
 $82AA DEFM $05,"west" ; Entry 0F
 $82AF DEFM $03,"up" ; Entry 10
 $82B2 DEFM $05,"down" ; Entry 11
 $82B7 DEFM $03,"in" ; Entry 12
 $82BA DEFM $04,"out" ; Entry 13
 $82BE DEFM $0E,"Arrest me Red" ; Entry 14
 $82CC DEFM $13,"<<< Press SPACE to" ; Entry 15
 $82DF DEFM $12,$90,"'s moving. Wait!" ; Entry 16
 $82F1 DEFM $04,"at " ; Entry 17
 $82F5 DEFM $08," isn't " ; Entry 18
 $82FD DEFM $05,"and " ; Entry 19
 $8302 DEFM $06,"hanks" ; Entry 1A
 $8308 DEFM $09," appears" ; Entry 1B
 $8311 DEFM $0E,$28,$91," arrives at" ; Entry 1C
 $831F DEFM $07,"misses" ; Entry 1D
 $8326 DEFM $11,$91," already has ",$FE,$03 ; Entry 1E
 $8337 DEFM $0E,$91," can see no " ; Entry 1F
 $8345 DEFM $11,"Nothing special " ; Entry 20
 $8356 DEFM $14,"I'll do an analysis" ; Entry 21
 $836A DEFM $0B,$3D,$28,$91," sees",$FE,$05 ; Entry 22
 $8375 DEFM $1C,"Likely place to get mugged?" ; Entry 23

; Data table 0A
;
; Contains assorted general syntax / semantic errors
b$8391 DEFM $14,"M#X,-\"",$8F,"\" confuses ",$91
 $83A5 DEFM $13,"M#N#C#,-Do ",$FE,$00,"to ",$8D,"?"
 $83B8 DEFM $11,"M#C#,-Do ",$FE,$00,"to ",$8B,"?"
 $83C9 DEFM $15,"M#O#,-Do ",$FE,$00,"with ",$FE,$03,$8B,"?"
 $83DE DEFM $0E,"M#A#,-",$89," do ",$FE,$01
 $83EC DEFM $1E,"M#A#A,#V#V,#N#N#N,#P#P,-What?"
 $840A DEFM $09,"MV,-",$8A," ",$FE,$01
 $8413 DEFM $19,"M#V#,-Try to rephrase ",$FE,$04
 $842C DEFM $19,"M#,-",$91," doesn't understand"

; Data table 0B
b$8445 DEFM $0D,"Vgo,walk,run"
 $8452 DEFB $0D,$48,$61,$56,$70,$44,$61,$2C
 $845A DEFB $61,$56,$70,$4C,$61
 $845F DEFM $09,"MV,-",$8A," ",$FE,$02
 $8468 DEFM $0D,"MVP#,-",$8A," ",$8C," ",$FE,$02
 $8475 DEFM $05,"Vfly"
 $847A DEFB $0D,$48,$61,$56,$70,$44,$61,$2C
 $8482 DEFB $61,$56,$70,$4C,$61
 $8487 DEFM $09,"MV,-",$8A," ",$FE,$02
 $8490 DEFM $0D,"MVP#,-",$8A," ",$8C," ",$FE,$02
 $849D DEFM $11,"Vremove,take off"
 $84AE DEFB $04,$48,$56,$4F
 $84B2 DEFM $0F,"Vget,take,pick"
 $84C1 DEFB $17,$48,$61,$56,$64,$4F,$61,$2C
 $84C9 DEFB $61,$56,$4F,$64,$61,$2C,$56,$4C
 $84D1 DEFB $50,$4C,$2C,$56,$4F,$50,$43
 $84D8 DEFM $11,"MVDl,VlD,-",$8A," ",$8B," ",$FE,$01
 $84E9 DEFM $12,"MVL#,-",$8A," ",$FE,$06,$8B," to ",$FE,$02
 $84FB DEFM $06,"Vdrop"
 $8501 DEFB $04,$48,$56,$4F
 $8505 DEFM $0D,"Vwear,put on"
 $8512 DEFB $04,$48,$56,$4F
 $8516 DEFM $0C,"Vput,insert"
 $8522 DEFB $1C,$48,$56,$4F,$50,$43,$2C,$61
 $852A DEFB $56,$4F,$50,$4F,$61,$2C,$56,$4F
 $8532 DEFB $44,$2C,$56,$44,$4F,$2C,$61,$56
 $853A DEFB $4F,$44,$4F,$61
 $853E DEFM $0D,"MVOP,-",$8A," ",$8C," ",$FE,$01
 $854B DEFM $0F,"MVO#,-",$8A," ",$FE,$03,$8B," ",$FE,$02
 $855A DEFM $0C,"Vgive,offer"
 $8566 DEFB $07,$48,$61,$56,$4F,$50,$43
 $856D DEFM $15,"MaVO#,-",$8A," ",$FE,$03,$8B," to who?"
 $8582 DEFM $07,"Vthrow"
 $8589 DEFB $12,$48,$61,$56,$4F,$50,$43,$2C
 $8591 DEFB $61,$56,$4F,$50,$4F,$2C,$61,$56
 $8599 DEFB $4F,$44
 $859B DEFM $0E,"MaVOP,-",$8A," ",$8C," ",$FE,$01
 $85A9 DEFM $0F,"MaVO,-",$8A," ",$FE,$03,$8B," ",$FE,$02
 $85B8 DEFM $06,"Vwait"
 $85BE DEFB $07,$48,$56,$2C,$56,$50,$54
 $85C5 DEFM $14,"MVp#,-",$8A," until when?"
 $85D9 DEFM $13,"Varrest,stop,catch"
 $85EC DEFB $05,$48,$61,$56,$43
 $85F1 DEFM $0D,"MaV#,-",$8A," who?"
 $85FE DEFM $15,"Vexam,examine,search"
 $8613 DEFB $10,$48,$61,$56,$4F,$61,$2C,$61
 $861B DEFB $56,$43,$61,$2C,$61,$56,$4C,$61
 $8623 DEFM $06,"Vread"
 $8629 DEFB $06,$48,$61,$56,$6F,$61
 $862F DEFM $0C,"MaVna,-",$8A," ",$FE,$01
 $863B DEFM $08,"Vl,look"
 $8643 DEFB $07,$48,$61,$56,$70,$6E,$61
 $864A DEFM $18,"Vi,inv,invent,inventory"
 $8662 DEFB $03,$48,$56
 $8665 DEFM $06,"Vhelp"
 $866B DEFB $03,$48,$56
 $866E DEFM "#Vfight,hit,attack,kill,punch,break"
 $8691 DEFB $11,$48,$56,$43,$2C,$56,$43,$50
 $8699 DEFB $4F,$2C,$56,$4F,$2C,$56,$4F,$50
 $86A1 DEFB $4F
 $86A2 DEFM $15,"MVCP#,VOP#,-",$8A," ",$8B," ",$8C," ",$FE,$01
 $86B7 DEFM $0B,"Vsay,shout"
 $86C2 DEFB $0E,$48,$56,$51,$2C,$56,$51,$50
 $86CA DEFB $43,$2C,$56,$50,$43,$51
 $86D0 DEFM $07,"Vstore"
 $86D7 DEFB $03,$48,$56
 $86DA DEFM $08,"Vrecall"
 $86E2 DEFB $03,$48,$56
 $86E5 DEFM $09,"Vrestart"
 $86EE DEFB $03,$48,$56
 $86F1 DEFM $06,"Vsave"
 $86F7 DEFB $03,$48,$56
 $86FA DEFM $06,"Vload"
 $8700 DEFB $03,$48,$56
 $8703 DEFM $0B,"Vquit game"
 $870E DEFB $03,$48,$56

; Data table 0C
b$8711 DEFM $02,"L"
 $8713 DEFM $02,"T"
 $8715 DEFM $0B,"*",$B3,$82,$00,$00,"-",$B3,$82,$84,"."
 $8720 DEFM $07,$96,"What!"     ; Blocking message
 $8727 DEFM $08,"*+",$B3,"@Vh",$E4
 $872F DEFM $06,$9B,"@X",$00,$01
 $8735 DEFM $06,$AA,"h",$E4,"@X"
 $873B DEFM $0B,"T",$02,$BE,$BF,$C0,$C1,$C2,$C3,$C4,$C5
 $8746 DEFM $1A,"*",$B3,$81,$00,$00,$B3,$83,$00,$00,$B3,$84,$00,$00,"..",$B3,$81,"P",$8D,"/",$B8,$BC,$82,"-."
 $8760 DEFM $0B,$94,"*",$B3,$82,$BE,",",$FE,$0B,$FE,$0C
 $876B DEFM $0B,$94,"*",$B3,$82,$BF,",",$FE,$0B,$FE,$0D
 $8776 DEFM $0B,$94,"*",$B3,$82,$C0,",",$FE,$0B,$FE,$0E
 $8781 DEFM $0B,$94,"*",$B3,$82,$C1,",",$FE,$0B,$FE,$0F
 $878C DEFM $0B,$94,"*",$B3,$82,$C2,",",$FE,$0B,$FE,$10
 $8797 DEFM $0B,$94,"*",$B3,$82,$C3,",",$FE,$0B,$FE,$11
 $87A2 DEFM $0B,$94,"*",$B3,$82,$C4,",",$FE,$0B,$FE,$12
 $87AD DEFM $0B,$94,"*",$B3,$82,$C5,",",$FE,$0B,$FE,$13
 $87B8 DEFM $11,$94,"@but ",$FE,$07,"find one"
 $87C9 DEFM $0F,$94,"*",$B3,$85,"X",$CE,$B3,$85,"X",$CF,"/,",$FE,$16
 $87D8 DEFM $14,"*",$B3,$81,$00,$00,$B3,$83,$00,$00,$B3,$84,$00,$00,$B8,$BC,$82,"..."
 $87EC DEFM $0B,$94,"*",$B3,$82,$BE,",",$FE,$09,$FE,$0C
 $87F7 DEFM $0B,$94,"*",$B3,$82,$BF,",",$FE,$09,$FE,$0D
 $8802 DEFM $0B,$94,"*",$B3,$82,$C0,",",$FE,$09,$FE,$0E
 $880D DEFM $0B,$94,"*",$B3,$82,$C1,",",$FE,$09,$FE,$0F
 $8818 DEFM $0B,$94,"*",$B3,$82,$C2,",",$FE,$09,$FE,$10
 $8823 DEFM $0B,$94,"*",$B3,$82,$C3,",",$FE,$09,$FE,$11
 $882E DEFM $0B,$94,"*",$B3,$82,$C4,",",$FE,$09,$FE,$12
 $8839 DEFM $0B,$94,"*",$B3,$82,$C5,",",$FE,$09,$FE,$13
 $8844 DEFM $02,$AB
 $8846 DEFM $04,$92,$86,$88
 $884A DEFM $02,$AC
 $884C DEFM $02,$9D
 $884E DEFM $04,$94,$FE,$1C
 $8852 DEFM $04,$94,"@",$90
 $8856 DEFM $08,$94,"*",$BA,$85,",",$FE,"\""
 $885E DEFM $03,$A5,$85
 $8861 DEFM $04,"TP",$8D
 $8865 DEFM $09,"*",$B8,$BC,$82,"-",$B7,$82,"."
 $886E DEFM $11,$94,"(",$91," ",$FE,$08,"all around"
 $887F DEFM $12,$94,"@but ",$FE,$07,"see ",$FE,$03,"way"
 $8891 DEFM $0F,$94,"*",$B3,$85,"X",$CE,$B3,$85,"X",$CF,"/,",$FE,$16
 $88A0 DEFM $03,"*+"
 $88A3 DEFM $05,$99,"@[",$88
 $88A8 DEFM $04,"TP",$8E
 $88AC DEFM $07,"*",$B3,$86,"h",$E4,"-"
 $88B3 DEFM $13,$94,"(",$91," flaps his arms"
 $88C6 DEFM $0D,$95,"Tweet tweet"
 $88D3 DEFM $0F,$94,"Wh",$FE,$17,$FE,$06,"turkey!"
 $88E2 DEFM $09,"*",$B3,$82,$C4,$B3,$82,$C5,"/"
 $88EB DEFM $05,$98,"BAM"
 $88F0 DEFM $14,$94,$91," missed ",$FE,$03,"doorway"
 $8904 DEFM $05,"*",$B5,$85,"-"
 $8909 DEFM $0D,$94,$91," takes off"
 $8916 DEFM $06,$98,"WACK"
 $891C DEFM $10,$94,")",$FE,$19,"hits ",$FE,$03,"roof"
 $892C DEFM $08,$95,"@Ouch!"
 $8934 DEFM $08,"*",$B7,$82,$B5,$82,"-."
 $893C DEFM $0F,$96,$91," ",$FE,$07,"l",$FE,$19,"there!"    ; Blocking message
 $894B DEFM $09,"*",$B6,$82,$B8,$BC,$82,"-."
 $8954 DEFM $17,$96,"*",$B3,$82,$C3,"-,",$91," ",$FE,$07,"leave town!"
 $896B DEFM $0B,$98,"*",$B3,$82,$C3,",THUD"
 $8976 DEFM $06,"*+",$B8,$BC,$82
 $897C DEFM $06,$99,"@[",$00,$01
 $8982 DEFM $07,"*+",$B8,$BC,$82,"-"
 $8989 DEFM $06,$99,"@[",$00,$03
 $898F DEFM $05,$99,"@\\",$82
 $8994 DEFM $03,"*+"
 $8997 DEFM $06,$9B,"@X@["
 $899D DEFM $06,$AA,"h",$E4,"@X"
 $89A3 DEFM $06,"TP",$8D,"P",$8E
 $89A9 DEFM $05,"*",$B3,$82,$85
 $89AE DEFM $0B,$96,$91," is ",$FE,$17,$90,"!"  ; Blocking message
 $89B9 DEFM $06,"*+",$B8,$BC,$82
 $89BF DEFM $05,$99,"@Z",$85
 $89C4 DEFM $02,$9D
 $89C6 DEFM $05,$99,"@\\",$85
 $89CB DEFM $05,$9C,$86,"@Z"
 $89D0 DEFM $0A,"*+",$B6,$82,$B3,$81,"P",$8D,"."
 $89DA DEFM $0B,$94,"*",$B3,$82,$BE,",",$FE,$09,$FE,$0C
 $89E5 DEFM $0B,$94,"*",$B3,$82,$BF,",",$FE,$09,$FE,$0D
 $89F0 DEFM $0B,$94,"*",$B3,$82,$C0,",",$FE,$09,$FE,$0E
 $89FB DEFM $0B,$94,"*",$B3,$82,$C1,",",$FE,$09,$FE,$0F
 $8A06 DEFM $0B,$94,"*",$B3,$82,$C2,",",$FE,$09,$FE,$10
 $8A11 DEFM $0B,$94,"*",$B3,$82,$C3,",",$FE,$09,$FE,$11
 $8A1C DEFM $0B,$94,"*",$B3,$82,$C4,",",$FE,$09,$FE,$12
 $8A27 DEFM $0B,$94,"*",$B3,$82,$C5,",",$FE,$09,$FE,$13
 $8A32 DEFM $0B,"*+",$B6,$82,$B3,$81,"P",$8D,"-."
 $8A3D DEFM $0B,$94,"*",$B3,$82,$BE,",",$FE,$0A,$FE,$0C
 $8A48 DEFM $0B,$94,"*",$B3,$82,$BF,",",$FE,$0A,$FE,$0D
 $8A53 DEFM $0B,$94,"*",$B3,$82,$C0,",",$FE,$0A,$FE,$0E
 $8A5E DEFM $0B,$94,"*",$B3,$82,$C1,",",$FE,$0A,$FE,$0F
 $8A69 DEFM $0B,$94,"*",$B3,$82,$C2,",",$FE,$0A,$FE,$10
 $8A74 DEFM $0B,$94,"*",$B3,$82,$C3,",",$FE,$0A,$FE,$11
 $8A7F DEFM $02,"*"
 $8A81 DEFM $10,$94,"*",$B7,$82,",",$91," leaves ",$90
 $8A91 DEFM $02,$AB
 $8A93 DEFM $05,$92,$86,"@["
 $8A98 DEFM $02,$AC
 $8A9A DEFM $05,$9C,$86,"@\\"
 $8A9F DEFM $0A,$94,"*",$B3,$81,"P",$8D,",",$FE,$1C
 $8AA9 DEFM $13,$94,"*",$B3,$81,"P",$8E,",(",$91," lands at"
 $8ABC DEFM $04,$94,"@",$90
 $8AC0 DEFM $08,$94,"*",$BA,$85,",",$FE,"\""
 $8AC8 DEFM $03,$A5,$85
 $8ACB DEFM $07,"TP",$90,$02,$60,$D5
 $8AD2 DEFM $10,"*",$B3,$85,"X",$AE,$B3,$85,"X",$AB,$B3,$85,"X",$B0,"//"
 $8AE2 DEFM $0B,$96,$91," ",$FE,$07,$8A," ",$FE,$03,$8B ; Blocking message
 $8AED DEFM $15,"*",$B3,$85,"X",$A9,$B3,$85,"X",$B4,$B3,$85,"X",$BB,$B3,$85,"X",$C4,"///"
 $8B02 DEFM $05,$96,"No!" ; Blocking message
 $8B07 DEFM $09,"TP",$90,$02,"X",$CF,$03,$D2
 $8B10 DEFM $16,"*",$B3,$85,"X",$A9,$B3,$85,"X",$B4,$B3,$85,"X",$BB,$B3,$85,"X",$C4,"///-"
 $8B26 DEFM $10,$96,$91,$FE,$18,$FE,$17,$FE,$06,"station" ; Blocking message
 $8B36 DEFM $06,"*",$B8,$BD,$84,"-"
 $8B3C DEFM $17,$96,"A station called \"",$8D,"\"?" ; Blocking message
 $8B53 DEFM $03,"*+"
 $8B56 DEFM $05,$99,"@[",$88
 $8B5B DEFM $06,$99,"@Z",$00,$01
 $8B61 DEFM $05,$99,"@f",$84
 $8B66 DEFM $09,"TP",$90,$02,"X",$CE,$03,$D2
 $8B6F DEFM $05,"*",$B5,$85,"-"
 $8B74 DEFM $15,$96,$91," ",$FE,$07,"get ",$FE,$06,$8B," in here" ; Blocking message
 $8B89 DEFM $03,"*+"
 $8B8C DEFM $06,$99,"@[",$00,$05
 $8B92 DEFM $06,$99,"@Z",$00,$05
 $8B98 DEFM $05,$99,"@f",$84
 $8B9D DEFM $07,"*+",$B3,$84,"X",$A7
 $8BA4 DEFM $06,$99,"@fX",$A6
 $8BAA DEFM $07,"*+",$B3,$84,"X",$AB
 $8BB1 DEFM $06,$99,"@fX",$AA
 $8BB7 DEFM $07,"*+",$B3,$84,"X",$AE
 $8BBE DEFM $06,$99,"@fX",$AD
 $8BC4 DEFM $07,"*+",$B3,$84,"X",$B0
 $8BCB DEFM $06,$99,"@fX",$AF
 $8BD1 DEFM $07,"*+",$B3,$84,"X",$B3
 $8BD8 DEFM $06,$99,"@fX",$B2
 $8BDE DEFM $07,"*+",$B3,$84,"X",$B5
 $8BE5 DEFM $06,$99,"@fX",$B6
 $8BEB DEFM $07,"*+",$B3,$84,"X",$B7
 $8BF2 DEFM $06,$99,"@fX",$B8
 $8BF8 DEFM $07,"*+",$B3,$84,"X",$B9
 $8BFF DEFM $06,$99,"@fX",$BA
 $8C05 DEFM $0C,"*+",$B3,$84,"X",$BD,$B3,$84,"X",$BF,"/"
 $8C11 DEFM $06,$99,"@fX",$BE
 $8C17 DEFM $07,"*+",$B3,$84,"X",$C6
 $8C1E DEFM $06,$99,"@fX",$C7
 $8C24 DEFM $07,"*+",$B3,$84,"X",$C5
 $8C2B DEFM $06,$99,"@fX",$C4
 $8C31 DEFM $0A,"*",$B7,"@f",$B5,"@f-."
 $8C3B DEFM $14,$96,$91," ",$FE,$07,$8A," ",$FE,$06,$8B," to there" ; Blocking message
 $8C4F DEFM $09,"TP",$90,$02,"X",$CF,"X",$CE
 $8C58 DEFM $06,"*",$B3,$83,$D2,"-"
 $8C5E DEFM $0D,$96,$8A," ",$FE,$06,$8B," to ",$FE,$02 ; Blocking message
 $8C6B DEFM $05,"*",$B3,$85,$84
 $8C70 DEFM $0A,$96,$91," is ",$FE,$17,$90 ; Blocking message
 $8C7A DEFM $0C,"*",$B4,"@Z@]",$B2,$60,$D3,"-/"
 $8C86 DEFM $1A,$94,"(",$91," doesn't have ",$60,$FF,$04," fare"
 $8CA0 DEFM $08,"*+",$B3,"@Z@]"
 $8CA8 DEFM $0E,$95,"My last ",$60,$FF,$04,"!"
 $8CB6 DEFM $06,$9C,$60,$D3,"X",$A5
 $8CBC DEFM $02,"*"
 $8CBE DEFM $04,$9C,$86,$82
 $8CC2 DEFM $0C,$94,$91," ",$8A,"s ",$FE,$06,$8B,$FE,$05
 $8CCE DEFM $06,$9B,"@]@Z"
 $8CD4 DEFM $04,$A8,"h",$E6
 $8CD8 DEFM $06,$92,"h",$E6,"@["
 $8CDE DEFM $04,$A7,"h",$E6
 $8CE2 DEFM $06,$92,"@V",$00,$00
 $8CE8 DEFM $02,$AC
 $8CEA DEFM $05,$9C,$86,"@f"
 $8CEF DEFM $04,$94,$FE,$1C
 $8CF3 DEFM $04,$94,"@",$90
 $8CF7 DEFM $08,$94,"*",$BA,$85,",",$FE,"\""
 $8CFF DEFM $03,$A5,$85
 $8D02 DEFM $07,"TP",$90,$02,$60,$D2
 $8D09 DEFM $06,"*",$B2,$60,$D0,"-"
 $8D0F DEFM $12,$96,$91," needs ",$FE,$06,"camera" ; Blocking message
 $8D21 DEFM $06,"*",$B2,$60,$D1,"-"
 $8D27 DEFM $0F,$95,"Rats! No film"
 $8D36 DEFM $0D,"*",$B3,"@d",$00,$00,$B3,"@e",$85,"-/"
 $8D43 DEFM $1D,$94,"(",$91," considers taking ",$FE,$06,"photo"
 $8D60 DEFM $18,$95,"No, nothing worthwhile"
 $8D78 DEFM $02,"*"
 $8D7A DEFM $08,$95,"Smile!"
 $8D82 DEFM $06,$98,"SNAP"
 $8D88 DEFM $06,$9A,"@c",$00,$14
 $8D8E DEFM $06,$99,"@d",$00,$00
 $8D94 DEFM $07,"TP",$90,$03,$C9,$CC
 $8D9B DEFM $05,"*",$B1,$82,"-"
 $8DA0 DEFM $06,$96,$8A," ",$FE,$01 ; Blocking message
 $8DA6 DEFM $05,"*",$B0,$84,"-"
 $8DAB DEFM $0E,$96,$8A," ",$FE,$03,$8B," ",$8C," who?" ; Blocking message
 $8DB9 DEFM $02,"*"
 $8DBB DEFM $0C,$95,$FE,$03,$8B," please"
 $8DC7 DEFM $05,$92,$84,$00,$00
 $8DCC DEFM $04,"*",$BB,$84
 $8DD0 DEFM $0A,$95,"Get off!"
 $8DDA DEFM $05,"*",$B2,$82,"-"
 $8DDF DEFM $12,$95,"I don't have ",$FE,$03,$8B
 $8DF1 DEFM $02,"*"
 $8DF3 DEFM $04,$95,"OK"
 $8DF7 DEFM $05,$9C,$82,"@V"
 $8DFC DEFM $04,"TP",$90
 $8E00 DEFM $11,"*",$B6,$82,$B3,$82,$C2,"-.",$B6,$84,$B3,$84,$C2,"-./"
 $8E11 DEFM $06,$96,$8A," ",$FE,$01 ; Blocking message
 $8E17 DEFM $0A,"*+",$B3,$84,$00,$00,$B6,$84,"/"
 $8E21 DEFM $05,$99,"@",$5E,$82
 $8E26 DEFM $05,"*+",$B6,$82
 $8E2B DEFM $05,$99,"@",$5E,$84
 $8E30 DEFM $04,"TP",$90
 $8E34 DEFM $05,"*",$B2,"@",$5E
 $8E39 DEFM $0B,$96,"*",$B3,"@",$5E,$82,",",$FE,$1E,$8B ; Blocking message
 $8E44 DEFM $0B,$96,"*",$B3,"@",$5E,$84,",",$FE,$1E,$8D ; Blocking message
 $8E4F DEFM $06,"*",$AF,"@",$5E,"-"
 $8E55 DEFM $0B,$96,"*",$B3,"@",$5E,$82,",",$FE,$1F,$8B ; Blocking message
 $8E60 DEFM $0B,$96,"*",$B3,"@",$5E,$84,",",$FE,$1F,$8D ; Blocking message
 $8E6B DEFM $05,"*",$B5,"@",$5E
 $8E70 DEFM $0D,$95,"I ",$FE,$07,"get ",$FE,$04,"!"
 $8E7D DEFM $02,"*"
 $8E7F DEFM $10,$94,"*",$B3,$84,$00,$00,",",$91," ",$8A,"s ",$FE,$03,$8B
 $8E8F DEFM $10,$94,"*",$B6,$82,",",$91," ",$8A,"s ",$8B," ",$FE,$03,$8D
 $8E9F DEFM $10,$94,"*",$B6,$84,",",$91," ",$8A,"s ",$FE,$03,$8B," ",$8D
 $8EAF DEFM $05,$9C,"@",$5E,$86
 $8EB4 DEFM $0A,"TP",$91,"P",$95,"P",$92,"P",$94
 $8EBE DEFM $08,"*",$B2,$82,"-",$AF,$82,"."
 $8EC6 DEFM $17,$96,$91," must get ",$FE,$03,$8B," first!" ; Blocking message
 $8EDD DEFM $05,"*",$B2,$82,"-"
 $8EE2 DEFM $08,$96,$8A," ",$FE,$00,$8B,"?" ; Blocking message
 $8EEA DEFM $04,"TP",$92
 $8EEE DEFM $03,"*+"
 $8EF1 DEFM $10,$94,$91," tries on ",$FE,$03,$8B
 $8F01 DEFM $06,"*",$B3,$82,$60,$DA
 $8F07 DEFM $0B,$95,"Too small"
 $8F12 DEFM $06,"*",$B3,$82,$60,$D8
 $8F18 DEFM $05,$99,"@g",$86
 $8F1D DEFM $0A,$95,"Nice fit"
 $8F27 DEFM $02,"*"
 $8F29 DEFM $0F,$94,$91," is an idiot"
 $8F38 DEFM $04,"TP",$8F
 $8F3C DEFM $0B,"*",$B3,$82,$60,$D8,$B3,"@g",$86,"."
 $8F47 DEFM $0F,$94,$91," removes ",$FE,$03,$8B
 $8F56 DEFM $06,$99,"@g",$00,$00
 $8F5C DEFM $02,"*"
 $8F5E DEFM $0F,$96,$91,$FE,$18,"wearing ",$FE,$04 ; Blocking message
 $8F6D DEFM $04,"TP",$91
 $8F71 DEFM $03,"*+"
 $8F74 DEFM $0A,$94,$91," ",$8A,"s ",$FE,$03,$8B
 $8F7E DEFM $07,"*+",$B3,$82,$60,$DC
 $8F85 DEFM $06,$98,"WAIL"
 $8F8B DEFM $16,$97,"*",$AF,$60,$D6,",Siren heard ",$FE,$17,$90
 $8FA1 DEFM $07,"*+",$B3,$82,$60,$D8
 $8FA8 DEFM $06,$99,"@g",$00,$00
 $8FAE DEFM $10,"*",$B3,$85,"X",$C0,$B3,$85,"X",$C1,$B3,$85,"X",$C2,"//"
 $8FBE DEFM $06,$98,"PLOP"
 $8FC4 DEFM $05,$9C,$82,"X",$C3
 $8FC9 DEFM $06,"*",$B3,$82,$60,$E2
 $8FCF DEFM $06,$98,"SMSH"
 $8FD5 DEFM $05,$9C,$82,"X",$A5
 $8FDA DEFM $02,"*"
 $8FDC DEFM $04,$9C,$82,$85
 $8FE0 DEFM $06,"TP",$93,"P",$95
 $8FE6 DEFM $03,"*+"
 $8FE9 DEFM $06,$99,"@",$5E,$00,$00
 $8FEF DEFM $08,"*+",$B1,$82,$B6,$84,"."
 $8FF7 DEFM $05,$99,"@",$5E,$82
 $8FFC DEFM $08,"*+",$B1,$84,$B6,$82,"."
 $9004 DEFM $05,$99,"@",$5E,$84
 $9009 DEFM $0D,"*",$B2,"@",$5E,"-",$B3,"@",$5E,$00,$00,"-."
 $9016 DEFM $13,$96,$91," doesn't have it" ; Blocking message
 $9029 DEFM $0C,"*+",$B3,$82,$60,$D8,$B3,$84,$60,$D8,"/"
 $9035 DEFM $06,$99,"@g",$00,$00
 $903B DEFM $08,"*",$B3,"@",$5E,$00,$00,"-"
 $9043 DEFM $0A,$94,"(",$91," ",$8A,"s ",$FE,$03
 $904D DEFM $0A,$94,"*",$B1,$82,",@",$8B," ",$8D
 $9057 DEFM $0A,$94,"*",$B1,$84,",@",$8D," ",$8B
 $9061 DEFM $05,$9C,"@",$5E,$85
 $9066 DEFM $08,"TP",$93,"P",$95,"P",$94
 $906E DEFM $05,"*",$AF,$84,"-"
 $9073 DEFM $0D,$96,"*",$B0,$84,"-,",$8C," ",$FE,$00,$8D,"?" ; Blocking message
 $9080 DEFM $0C,$96,"*",$B0,$84,",",$8D,$FE,$18,$FE,$17,$90 ; Blocking message
 $908C DEFM $09,"*",$B3,$84,$86,$B3,$82,$86,"/"
 $9095 DEFM $13,$96,$91," is cracking up!" ; Blocking message
 $90A8 DEFM $07,"*+",$B3,$82,$60,$D8
 $90AF DEFM $06,$99,"@g",$00,$00
 $90B5 DEFM $06,"TP",$95,$03,$D4
 $90BB DEFM $03,"*+"
 $90BE DEFM $0B,$94,"(",$91," ",$8A,"s ",$FE,$03,$8B
 $90C9 DEFM $04,$9C,$82,$85
 $90CD DEFM $06,"*",$B3,$82,$60,$E2
 $90D3 DEFM $06,$98,"SMSH"
 $90D9 DEFM $05,$9C,$82,"X",$A5
 $90DE DEFM $05,"*",$B9,$00,$1E
 $90E3 DEFM $0D,$94,"*",$B0,$84,",@",$FE,$19,$FE,$1D," ",$8D
 $90F0 DEFM $10,$94,"*",$B0,$84,"-,@",$FE,$19,$FE,$1D," ",$FE,$03,$8D
 $9100 DEFM $05,"*",$B0,$84,"-"
 $9105 DEFM $09,$94,"@Boing!"
 $910E DEFM $05,"*",$B9,$00,"2"
 $9113 DEFM $11,$94,"@",$8D," ducks. It ",$FE,$1D
 $9124 DEFM $03,"*+"
 $9127 DEFM $06,$98,"THUD"
 $912D DEFM $05,$99,"@Y",$84
 $9132 DEFM $09,$94,$8D," ",$FE,$08,"mad"
 $913B DEFM $04,"TP",$93
 $913F DEFM $0D,"*",$B3,$83,$CA,$B3,$82,$C4,$B3,$82,$C5,"//"
 $914C DEFM $11,$95,"No, Silly idea!"
 $915D DEFM $08,"TP",$94,"P",$95,$03,$D2
 $9165 DEFM $03,"*+"
 $9168 DEFM $0B,$94,"(",$91," ",$8A,"s ",$FE,$03,$8B
 $9173 DEFM $0A,"*",$B3,$81,"P",$94,$B9,$00,$1E,"."
 $917D DEFM $05,$92,$84,$00,$00
 $9182 DEFM $08,$95,"No t",$FE,$1A
 $918A DEFM $0F,$94,"@",$8D," refuses it"
 $9199 DEFM $03,"*+"
 $919C DEFM $14,$94,"*",$B3,$81,"P",$94,",",$8D," takes it",$FE,$05
 $91B0 DEFM $16,$94,"*",$B3,$81,"P",$95,",",$8D," catches it",$FE,$05
 $91C6 DEFM $05,"*",$B9,$00,"2"
 $91CB DEFM $05,$92,$84,$00,$00
 $91D0 DEFM $11,$95,"T",$FE,$1A,", but no t",$FE,$1A
 $91E1 DEFM $13,$94,$FE,$05,$FE,$19,"gives it back"
 $91F4 DEFM $02,"*"
 $91F6 DEFM $05,$92,$84,$00,$00
 $91FB DEFM $06,$95,"T",$FE,$1A,"!"
 $9201 DEFM $0C,$94,$8D," keeps it"
 $920D DEFM $04,$9C,$82,$84
 $9211 DEFM $06,"TP",$96,$03,$D5 ; Blocking message
 $9217 DEFM $05,$99,"@Z",$82
 $921C DEFM $05,$9B,"@Z",$87
 $9221 DEFM $06,$94,$91," ",$8A,"s"
 $9227 DEFM $02,$AB
 $9229 DEFM $05,$92,$86,"@Z"
 $922E DEFM $02,$AC
 $9230 DEFM $0C,$94,"Wh",$FE,$17,"now ",$91,"?"
 $923C DEFM $04,"TP",$96
 $9240 DEFM $06,$94,$91," ",$8A,"s"
 $9246 DEFM $02,$AB
 $9248 DEFM $04,"TP",$99
 $924C DEFM $05,"*",$AF,$82,"-"
 $9251 DEFM $08,$96,$8A," ",$FE,$00,$8B,"?" ; Blocking message
 $9259 DEFM $03,"*+"
 $925C DEFM $0D,$94,"(",$91," ",$8A,"s ",$FE,$03,$8B,$FE,$05
 $9269 DEFM $05,"*",$B5,$82,"-"
 $926E DEFM $0C,$94,"@",$FE,$00,$FE,$06,"goon!"
 $927A DEFM $02,"*"
 $927C DEFM $03,$A3,$82
 $927F DEFM $0F,"TP",$98,"P",$9A,$02,$60,$DD,$60,$DE,$60,$DF,$60,$E0
 $928E DEFM $11,"*",$B2,$60,$DD,$B2,$60,$DE,$B2,$60,$DF,$B2,$60,$E0,"///"
 $929F DEFM $1B,$95,"Funny looking credit card"
 $92BA DEFM $06,"TP",$98,"P",$9A
 $92C0 DEFM $1B,"*+",$B3,$82,$00,$00,$B3,$85,"X",$A9,$B3,$85,"X",$B4,$B3,$85,"X",$BB,$B3,$85,"X",$C4,"///."
 $92DB DEFM $0A,$94,$91," sees",$FE,$05
 $92E5 DEFM "3",$95,"Trains to City, Central, Heath, District Stations"
 $9318 DEFM $03,"*+"
 $931B DEFM $06,$99,"@[",$00,$01
 $9321 DEFM $06,"*+",$B3,$80,$C7
 $9327 DEFM $06,$99,"@[",$00,$03
 $932D DEFM $06,"TP",$98,"P",$97
 $9333 DEFM $05,"*",$AF,$82,"-"
 $9338 DEFM $0D,$96,"*",$B0,$82,"-,",$8A," ",$FE,$00,$8B,"?" ; Blocking message
 $9345 DEFM $0C,$96,"*",$B0,$82,",",$8B,$FE,$18,$FE,$17,$90 ; Blocking message
 $9351 DEFM $04,"TP",$97
 $9355 DEFM $06,"*",$B3,$82,"@V"
 $935B DEFM $0E,$95,"I'm nicked!?"
 $9369 DEFM $03,"*+"
 $936C DEFM $0F,$94,$91," arrests ",$8B,$FE,$05
 $937B DEFM $05,$99,"@Y",$82
 $9380 DEFM " ",$95,"*",$B3,"@a",$00,$00,",",$8B,", You're under arrest!"
 $93A0 DEFM $12,$95,"*",$B3,"@a",$00,$01,",Gotch",$FE,$06,$8B,"!"
 $93B2 DEFM $1A,$95,"*",$B3,"@a",$00,$02,",",$8B,"! You're nicked!"
 $93CC DEFM $07,"*",$B3,"@Vh",$E3
 $93D3 DEFM $05,$92,$82,$00,$00
 $93D8 DEFM "$",$95,"Who do you think you are? Redhawk!"
 $93FC DEFM $06,$99,"@Y",$00,$00
 $9402 DEFM $06,"*",$B3,$82,"h",$E7
 $9408 DEFM $07,$95,"Sorry"
 $940F DEFM $05,"*",$B5,$82,"-"
 $9414 DEFM $03,$A8,$86
 $9417 DEFM $05,$92,$82,$00,$00
 $941C DEFM $0B,$94,$91," resists"
 $9427 DEFM $17,$95,"Get off! I'm innocent"
 $943E DEFM $05,$9C,"h",$E7,$85
 $9443 DEFM $06,$92,"h",$E7,$00,$00
 $9449 DEFM $12,$94,"(",$FE,$03,"police arrive"
 $945B DEFM $06,$99,"@Y",$00,$00
 $9461 DEFM $0E,$95,"Come with me"
 $946F DEFM $06,$9C,"h",$E7,"X",$B0
 $9475 DEFM $06,$9B,"@W",$00,$03
 $947B DEFM $02,$AB
 $947D DEFM $06,$92,"h",$E4,$00,$03
 $9483 DEFM $02,$AC
 $9485 DEFM $05,$9C,$86,"X",$B1
 $948A DEFM $0B,$94,$91," boobed!"
 $9495 DEFM $03,$A7,$86
 $9498 DEFM $05,"*",$BB,$82,"-"
 $949D DEFM $06,$99,"@Y",$00,$00
 $94A3 DEFM $06,$99,"@d",$00,$00
 $94A9 DEFM $06,$99,"@e",$00,$00
 $94AF DEFM $03,$A8,$86
 $94B2 DEFM $05,$92,$82,$00,$00
 $94B7 DEFM $0B,$94,$FE,$09,"quietly"
 $94C2 DEFM $18,$95,"*",$B3,"@b",$00,$00,",It's ",$FE,$06,"fair cop"
 $94DA DEFM $19,$95,"*",$B3,"@b",$00,$01,",Oh you're no fun"
 $94F3 DEFM $19,$95,"*",$B3,"@b",$00,$02,",I hate good guys"
 $950C DEFM $06,$9A,"@W",$00,$05
 $9512 DEFM $05,$9C,$82,"X",$A5
 $9517 DEFM $06,$9C,"h",$E4,"X",$B0
 $951D DEFM $02,$AB
 $951F DEFM $06,$92,"@V",$00,$02
 $9525 DEFM $06,$94,"At ",$90
 $952B DEFM $02,$AC
 $952D DEFM $06,$92,"h",$E7,$00,$00
 $9533 DEFM $06,"*+",$BB,$82,"-"
 $9539 DEFM $05,$9C,$86,"X",$B0
 $953E DEFM $1D,$95,"*",$B3,"@a",$00,$00,",Well done Redsparrow"
 $955B DEFM $17,$95,"*",$B3,"@a",$00,$01,",Mega! Redhorse"
 $9572 DEFM $19,$95,"*",$B3,"@a",$00,$02,",Good show Redbus"
 $958B DEFM $04,$A7,"h",$E4
 $958F DEFM $0B,"*",$B3,"@",$60,$00,$01,$BB,$82,"-."
 $959A DEFM $03,$A7,$82
 $959D DEFM $0B,"*",$B3,"@",$60,$00,$00,$BB,$82,"-."
 $95A8 DEFM $03,$A7,$82
 $95AB DEFM $11,$95,"Have this radio"
 $95BC DEFM "\"",$94,"(Recognition as ",$FE,$06,"crime fighter!"
 $95DE DEFM $06,$99,"@",$60,$00,$01
 $95E4 DEFM $06,$9C,$60,$D6,"h",$E4
 $95EA DEFM $04,"TP",$98
 $95EE DEFM $04,"*",$B7,$82
 $95F2 DEFM $0E,$94,$91," searches ",$90
 $9600 DEFM $02,$AB
 $9602 DEFM $05,$92,$86,"@["
 $9607 DEFM $02,$AC
 $9609 DEFM $03,$A3,$85
 $960C DEFM $08,$94,"*",$BA,$85,",",$FE,"\""
 $9614 DEFM $03,$A5,$85
 $9617 DEFM $04,"*",$B1,$82
 $961B DEFM $0A,$94,$91," ",$8A,"s ",$FE,$03,$8B
 $9625 DEFM $03,$A3,$82
 $9628 DEFM $0B,"*",$AF,"h",$E3,$B5,$82,$BB,$82,"./"
 $9633 DEFM $05,$92,$82,$00,$00
 $9638 DEFM $14,$95,"Get off you wally!"
 $964C DEFM $0C,$94,"(",$91," refuses"
 $9658 DEFM $11,$94,"@to be searched"
 $9669 DEFM $06,"*+",$B5,$82,"-"
 $966F DEFM $06,$9B,"@W",$00,$02
 $9675 DEFM $02,"*"
 $9677 DEFM $16,$94,$91," does ",$FE,$06,"body search"
 $968D DEFM $0D,$95,"*",$B3,$82,$86,",Kinky!"
 $969A DEFM $0E,$95,"*",$BA,$82,"-,Nothing"
 $96A8 DEFM $11,$94,"*",$BA,$82,",=(",$91," finds",$FE,$05
 $96B9 DEFM $03,$A5,$82
 $96BC DEFM $04,"TP",$9A
 $96C0 DEFM $03,"*+"
 $96C3 DEFM $06,$99,"@Z",$00,$00
 $96C9 DEFM $10,"*+",$B3,$82,$00,$00,$B3,$83,$00,$00,$B3,$83,$C8,"/."
 $96D9 DEFM $0E,$94,$91," ",$FE,$08,"around",$FE,$05
 $96E7 DEFM $03,$94,$90
 $96EA DEFM $08,$94,"*",$BA,$85,",",$FE,"\""
 $96F2 DEFM $03,$A5,$85
 $96F5 DEFM $06,$99,"@Z",$00,$01
 $96FB DEFM $0C,"*",$B3,"@Z",$00,$01,$B3,$80,$C7,"-."
 $9707 DEFM $02,$AC
 $9709 DEFM $07,"*",$B3,"@Z",$00,$01
 $9710 DEFM $02,$AB
 $9712 DEFM $05,$92,$86,"@["
 $9717 DEFM $02,$AC
 $9719 DEFM $03,$A3,$85
 $971C DEFM $09,"TP",$9A,$03,$D4,$CE,$D1,$C8
 $9725 DEFM $06,"*",$B3,$82,$00,$00
 $972B DEFM $08,$96,$8A," ",$8C," ",$FE,$01 ; Blocking message
 $9733 DEFM $08,"*",$B7,$82,$AF,$82,"-."
 $973B DEFM $08,$96,$91,$FE,$18,$FE,$17,$8B ; Blocking message
 $9743 DEFM $04,"*",$B7,$82
 $9747 DEFM $0A,$94,$91," ",$8A,"s ",$8C," ",$90
 $9751 DEFM $02,$AB
 $9753 DEFM $05,$92,$86,"@["
 $9758 DEFM $02,$AC
 $975A DEFM $03,$A3,$85
 $975D DEFM $08,$94,"*",$BA,$85,",",$FE,"\""
 $9765 DEFM $03,$A5,$85
 $9768 DEFM $05,"*",$AF,$82,"-"
 $976D DEFM $0F,$96,"*",$B0,$82,"-,",$8A," ",$8C," ",$FE,$00,$8B,"?" ; Blocking message
 $977C DEFM $0C,$96,"*",$B0,$82,",",$8B,$FE,$18,$FE,$17,$90 ; Blocking message
 $9788 DEFM $02,"*"
 $978A DEFM $11,$94,"*",$B0,$82,"-,",$91," ",$8A,"s ",$8C," ",$FE,$03,$8B
 $979B DEFM $0D,$94,"*",$B0,$82,",",$91," ",$FE,$08,$FE,$17,$8B
 $97A8 DEFM $03,$A3,$82
 $97AB DEFM $04,"TP",$9B
 $97AF DEFM $05,"*",$BA,$86,"-"
 $97B4 DEFM $12,$94,"(",$91," ",$FE,$08,$FE,$17,"his hands"
 $97C6 DEFM $14,$94,"then on his person"
 $97DA DEFM $17,$95,"*",$B3,"@a",$00,$00,",Not a sausage!"
 $97F1 DEFM "'",$95,"*",$B3,"@a",$00,$01,",Jumping Jelly Beans - nothing!"
 $9818 DEFM "#",$95,"*",$B3,"@a",$00,$02,",Blow my socks off! Nothing"
 $983B DEFM $02,"*"
 $983D DEFM $0B,$94,"=(",$91," has",$FE,$05
 $9848 DEFM $03,$A5,$86
 $984B DEFM $04,"TP",$9D
 $984F DEFM $05,"*",$AF,$82,"-"
 $9854 DEFM $0D,$96,"*",$B0,$82,",",$8B,$FE,$18,$FE,$17,$90,"." ; Blocking message
 $9861 DEFM $0D,$96,"*",$B0,$82,"-,",$8A," ",$FE,$00,$8B,"?" ; Blocking message
 $986E DEFM $06,"*",$B3,$82,"h",$E5
 $9874 DEFM $14,$95,"I don't hit ladies"
 $9888 DEFM $05,"*",$B3,$82,$86
 $988D DEFM $05,$95,"OW!"
 $9892 DEFM $0A,"*+",$B3,$83,$00,$00,$B0,$82,"."
 $989C DEFM $05,$99,"@Y",$82
 $98A1 DEFM $08,$94,$91," ",$8A,"s ",$8B
 $98A9 DEFM $1A,$95,"*",$B3,$86,"h",$E3,",Get this stitched!"
 $98C3 DEFM $18,$95,"*",$B3,$86,"h",$E4,$B3,"@b",$00,$02,"-.,Banzai",$FE,$05,"!"
 $98DB DEFM $17,$95,"*",$B3,$86,"h",$E4,$B3,"@b",$00,$02,".,Bonsai",$FE,$05,"?"
 $98F2 DEFM $0B,$98,"*",$B9,$00,$14,",WOOP"
 $98FD DEFM $0A,$98,"*",$B9,$00,"(,BOP"
 $9907 DEFM $05,$98,"POW"
 $990C DEFM $0A,"*",$B3,$83,$00,$00,$B0,$82,"-."
 $9916 DEFM $0C,$94,$91," ",$8A,"s ",$FE,$03,$8B,$FE,$05
 $9922 DEFM $0D,$95,"Take ",$FE,$04,", ",$8B,"!"
 $992F DEFM $10,$94,")",$FE,$05,"to no avail"
 $993F DEFM $06,"TP",$9D,$03,$D3
 $9945 DEFM $05,"*",$B2,$84,"-"
 $994A DEFM $17,$96,$91," must get ",$FE,$03,$8D," first!" ; Blocking message
 $9961 DEFM $05,"*+",$B0,$82
 $9966 DEFM $05,$99,"@Y",$82
 $996B DEFM $0B,$94,"(",$91," ",$8A,"s ",$8B,$FE,$05
 $9976 DEFM $08,$94,"@",$8C," ",$FE,$03,$8D
 $997E DEFM $0E,$95,"Take this ",$8B,"!"
 $998C DEFM $05,$98,"POW"
 $9991 DEFM $0B,$98,"*",$B9,$00,"<,WACK"
 $999C DEFM $0B,$98,"*",$B9,$00,$1E,",WANG"
 $99A7 DEFM $05,"*",$B0,$82,"-"
 $99AC DEFM $12,$94,"*",$B0,$82,"-,(",$91," ",$8A,"s ",$FE,$03,$8B,$FE,$05
 $99BE DEFM $06,$98,"OUCH"
 $99C4 DEFM $08,$94,"Silly!"
 $99CC DEFM $04,"TP",$9C
 $99D0 DEFM $10,$94,$91," ",$FE,$08,"for help",$FE,$05
 $99E0 DEFM $11,$94,"but finds none."
 $99F1 DEFM $04,"TP",$9E
 $99F5 DEFM $06,"*",$B3,$82,$00,$00
 $99FB DEFM $03,$95,$8E
 $99FE DEFM $03,$A6,$86
 $9A01 DEFM $05,"*",$AF,$82,"-"
 $9A06 DEFM $08,$96,$8B,$FE,$18,$FE,$17,$90 ; Blocking message
 $9A0E DEFM $02,"*"
 $9A10 DEFM $06,$95,$8B,", ",$8E
 $9A16 DEFM $03,$A6,$82
 $9A19 DEFM $04,"TP",$9F
 $9A1D DEFM $0D,$96,"GAME STORED" ; Blocking message
 $9A2A DEFM $02,$9E
 $9A2C DEFM $04,"TP",$A0
 $9A30 DEFM $06,$98,"TIME"
 $9A36 DEFM $06,$98,"WARP"
 $9A3C DEFM $02,$9F
 $9A3E DEFM $0C,$95,"Try again!"
 $9A4A DEFM $04,"TP",$A1
 $9A4E DEFM $06,$98,"POOF"
 $9A54 DEFM $15,$94,"It was all ",$FE,$06,"dream!"
 $9A69 DEFM $14,$95,"Here we go again",$FE,$05
 $9A7D DEFM $05,$98,"NEW"
 $9A82 DEFM $06,$98,"GAME"
 $9A88 DEFM $02,$A0
 $9A8A DEFM $04,"TP",$A2
 $9A8E DEFM $0D,$96,$FE,$15," Save >>>" ; Blocking message - "[<<< Press SPACE to] Save>>>"
 $9A9B DEFM $06,$98,"SAVE"
 $9AA1 DEFM $02,$A1
 $9AA3 DEFM $04,"TP",$A3
 $9AA7 DEFM $0D,$96,$FE,$15," Load >>>" ; Blocking message - "[<<< Press SPACE to] Load>>>"
 $9AB4 DEFM $06,$98,"LOAD"
 $9ABA DEFM $02,$A2
 $9ABC DEFM $04,"TP",$A4
 $9AC0 DEFM $02,$A4
 $9AC2 DEFM $08,"TP",$9D,"P",$97,"P",$95
 $9ACA DEFM $07,"*",$B3,"@Y",$00,$00
 $9AD1 DEFM $06,$99,"@Z",$00,$00
 $9AD7 DEFM $0C,"*+",$B3,"@Yh",$E7,$AF,"h",$E4,"."
 $9AE3 DEFM $06,$99,"@W",$00,$00
 $9AE9 DEFM $07,"*",$B3,"@Yh",$E7
 $9AF0 DEFM $06,$99,"@Y",$00,$00
 $9AF6 DEFM $10,$94,"Off to ",$FE,$03,"cells"
 $9B06 DEFM $04,$A8,"@V"
 $9B0A DEFM $02,$AB
 $9B0C DEFM $06,$92,"@V",$00,$05
 $9B12 DEFM $02,$AC
 $9B14 DEFM $03,$A7,$86
 $9B17 DEFM $05,$9C,$86,"X",$B1
 $9B1C DEFM $09,$94,"Woops",$FE,$05
 $9B25 DEFM $06,"*+",$BB,"@Y"
 $9B2B DEFM $04,$AD,"@Y"
 $9B2F DEFM $15,$94,"*",$B3,"@a",$00,$00,",",$91," gets rough"
 $9B44 DEFM $13,$94,"*",$B3,"@a",$00,$01,",",$91," is angry"
 $9B57 DEFM $11,$94,"*",$B3,"@a",$00,$02,",Trouble!"
 $9B68 DEFM $02,$AE
 $9B6A DEFM $0D,$98,"*",$B3,"@b",$00,$00,",WHAM"
 $9B77 DEFM $0D,$98,"*",$B3,"@b",$00,$01,",WACK"
 $9B84 DEFM $0D,$98,"*",$B3,"@b",$00,$02,",DUFF"
 $9B91 DEFM $06,$A9,"@V@Z"
 $9B97 DEFM $06,$A9,"@Y@\\"
 $9B9D DEFM $08,"*+",$B4,"@Z@\\"
 $9BA5 DEFM $06,$99,"@[@\\"
 $9BAB DEFM $06,$9B,"@[",$00,$05
 $9BB1 DEFM $06,$AA,"@Y@["
 $9BB7 DEFM $08,"*+",$B4,"@\\@Z"
 $9BBF DEFM $06,$99,"@[@Z"
 $9BC5 DEFM $06,$9B,"@[",$00,$04
 $9BCB DEFM $06,$AA,"@V@["
 $9BD1 DEFM $08,"*+",$B3,"@Z@\\"
 $9BD9 DEFM $06,$9B,"@Z",$00,$02
 $9BDF DEFM $06,$AA,"@V@Z"
 $9BE5 DEFM $06,$9B,"@\\",$00,$03
 $9BEB DEFM $06,$AA,"@Y@\\"
 $9BF1 DEFM $08,"*+",$B3,"@Vh",$E4
 $9BF9 DEFM $06,$A9,"h",$E4,"@X"
 $9BFF DEFM $03,"*+"
 $9C02 DEFM $06,$A9,"h",$E3,"@Z"
 $9C08 DEFM $06,$A9,"@Y@["
 $9C0E DEFM $08,"*+",$B3,"@Z",$00,$00
 $9C16 DEFM $06,$92,"h",$E3,$00,$00
 $9C1C DEFM $18,$94,$91,"'s too puny for this."
 $9C34 DEFM $12,$94,"He ",$FE,$08,$FE,$06,"bit dead!"
 $9C46 DEFM $02,$A0
 $9C48 DEFM $08,"*",$B3,"@[",$00,$00,"-"
 $9C50 DEFM $06,$99,"@Y",$00,$00
 $9C56 DEFM $07,"*",$B3,"@[",$00,$00
 $9C5D DEFM $04,$A8,"@V"
 $9C61 DEFM $06,$92,"@Y",$00,$00
 $9C67 DEFM $0A,$95,"No more!"
 $9C71 DEFM $0B,$94,$91," submits"
 $9C7C DEFM $13,$95,"*",$B3,"@a",$00,$00,$AF,"h",$E4,".,",$FE,$14,"duck"
 $9C8F DEFM $16,$95,"*",$B3,"@a",$00,$01,$AF,"h",$E4,".,",$FE,$14,"buzzard"
 $9CA5 DEFM $14,$95,"*",$B3,"@a",$00,$02,$AF,"h",$E4,".,",$FE,$14,"finch"
 $9CB9 DEFM $04,$A8,"@Y"
 $9CBD DEFM $06,$99,"@Y",$00,$00
 $9CC3 DEFM $04,$A7,"@V"
 $9CC7 DEFM $02,"L"
 $9CC9 DEFM $1C,"N",$FE,$03,"hospital grounds,grounds"
 $9CE5 DEFM $04,"X",$FE,"#"
 $9CE9 DEFM $09,"W",$BC,"X",$A7,$00,$01,$BE,$C4
 $9CF2 DEFM $0A,"W",$BC,"X",$A8,$00,$02,$BF,$C0,$C1
 $9CFC DEFM $06,"SP",$90,"P",$8E
 $9D02 DEFM $02,"L"
 $9D04 DEFM $0C,"N",$FE,$03,"hospital"
 $9D10 DEFM $04,"X",$FE," "
 $9D14 DEFM $09,"W",$BC,"X",$A6,$00,$01,$BF,$C5
 $9D1D DEFM $02,"L"
 $9D1F DEFM $08,"N",$FE,$03,"park"
 $9D27 DEFM $04,"X",$FE,"#"
 $9D2B DEFM $08,"W",$BC,"X",$A6,$00,$02,$BE
 $9D33 DEFM $08,"W",$BC,"X",$A9,$00,$02,$BF
 $9D3B DEFM $08,"W",$BC,"X",$AC,$00,$02,$C1
 $9D43 DEFM $08,"W",$BC,"X",$AA,$00,$01,$C0
 $9D4B DEFM $06,"SP",$90,"P",$8E
 $9D51 DEFM $02,"L"
 $9D53 DEFM $13,"Ncity station,city"
 $9D66 DEFM $08,"W",$BC,"X",$A8,$00,$02,$BE
 $9D6E DEFM $08,"W",$BC,"X",$AF,$00,$02,$C1
 $9D76 DEFM $07,"W",$BD,"X",$B4,$00,$04
 $9D7D DEFM $07,"W",$BD,"X",$BB,$00,$07
 $9D84 DEFM $07,"W",$BD,"X",$C4,$00,$06
 $9D8B DEFM $06,"SP",$90,"P",$8E
 $9D91 DEFM $02,"L"
 $9D93 DEFM $0D,"Nfeet street"
 $9DA0 DEFM $09,"W",$BC,"X",$AB,$00,$01,$BE,$C4
 $9DA9 DEFM $08,"W",$BC,"X",$AA,$00,$01,$C0
 $9DB1 DEFM $08,"W",$BC,"X",$AA,$00,$01,$BF
 $9DB9 DEFM $08,"W",$BC,"X",$A8,$00,$01,$C1
 $9DC1 DEFM $06,"SP",$90,"P",$8E
 $9DC7 DEFM $02,"L"
 $9DC9 DEFM $1B,"N",$FE,$03,"trumpet offices,trumpet"
 $9DE4 DEFM $09,"W",$BC,"X",$AA,$00,$01,$BF,$C5
 $9DED DEFM $02,"T"
 $9DEF DEFM $12,"*",$AF,"h",$E4,$B3,"@W",$00,$00,$B6,$82,$B7,$82,"/-.."
 $9E01 DEFM $04,$AD,"h",$E6
 $9E05 DEFM $05,$9C,$86,"X",$AB
 $9E0A DEFM $16,$95,"No you don't! Crook!"  ; Speech
 $9E20 DEFM $13,"*+",$AF,"h",$E4,$B4,"@W",$00,$00,$B6,$82,$B7,$82,"/-.."
 $9E33 DEFM $04,$AD,"h",$E6
 $9E37 DEFM $05,$9C,$86,"X",$AB
 $9E3C DEFM $0C,$95,"Hey Reddy!" ; Speech
 $9E48 DEFM "3",$95,"Someone rang - There's a bomb at ",$FE,$03,"power station!" ; Speech
 $9E7B DEFM $02,$AE
 $9E7D DEFM $07,"TP",$99,$02,$60,$D5
 $9E84 DEFM $07,"*",$B3,"@_",$00,$01
 $9E8B DEFM $06,$92,"@V",$00,$00
 $9E91 DEFM $0E,$95,"NO VACANCIES" ; Speech
 $9E9F DEFM $07,"*",$B3,"@_",$00,$00
 $9EA6 DEFM $1D,$95,"WANTED - CRIME PHOTOGRAPHER" ; Speech
 $9EC3 DEFM $06,$92,"h",$E6,$00,$00
 $9EC9 DEFM $06,$9C,"h",$E6,"X",$AB
 $9ECF DEFM $12,$94,"*",$AF,"h",$E6,"-,",$91," enters",$FE,$05
 $9EE1 DEFM "\"",$95,$FE,$03,"job's yours! Say wh",$FE,$17,"you need?" ; Speech
 $9F03 DEFM $06,$99,"@_",$00,$01
 $9F09 DEFM $02,"L"
 $9F0B DEFM $14,"Ntown square,square"
 $9F1F DEFM $04,"X",$FE,"#"
 $9F23 DEFM $08,"W",$BC,"X",$AD,$00,$01,$BE
 $9F2B DEFM $08,"W",$BC,"X",$A8,$00,$02,$C0
 $9F33 DEFM $08,"W",$BC,"X",$AF,$00,$02,$BF
 $9F3B DEFM $08,"W",$BC,"X",$B2,$00,$01,$C1
 $9F43 DEFM $06,"SP",$90,"P",$8E
 $9F49 DEFM $02,"L"
 $9F4B DEFM $11,"N",$FE,$03,"library steps"
 $9F5C DEFM $04,"X",$FE," "
 $9F60 DEFM $09,"W",$BC,"X",$AE,$00,$01,$BE,$C4
 $9F69 DEFM $08,"W",$BC,"X",$AC,$00,$01,$BF
 $9F71 DEFM $06,"SP",$90,"P",$8E
 $9F77 DEFM $02,"L"
 $9F79 DEFM $0B,"N",$FE,$03,"library"
 $9F84 DEFM $04,"X",$FE," "
 $9F88 DEFM $09,"W",$BC,"X",$AD,$00,$01,$BF,$C5
 $9F91 DEFM $04,"TP",$9E
 $9F95 DEFM $05,"*",$AF,"h",$E3
 $9F9A DEFM $06,$95,"Uh",$FE,$05 ; Speech
 $9FA0 DEFM $06,$92,"h",$F0,$00,$00
 $9FA6 DEFM $07,$95,"Shhh!" ; Speech
 $9FAD DEFM $07,"*",$B3,"@W",$00,$00
 $9FB4 DEFM $06,$92,"h",$F0,$00,$00
 $9FBA DEFM $11,$95,"SHHH",$FE,$05," Villain!" ; Speech
 $9FCB DEFM $07,"*",$B4,"@W",$00,$00
 $9FD2 DEFM $03,$95,$8E ; Speech
 $9FD5 DEFM $03,$A8,$86
 $9FD8 DEFM $06,$92,"h",$F0,$00,$00
 $9FDE DEFM $0F,$95,"Wait ",$FE,$06,"moment" ; Speech
 $9FED DEFM $0D,$94,$91," goes away"
 $9FFA DEFM $05,$9C,$86,"X",$A5
 $9FFF DEFM $02,$AB
 $A001 DEFM $06,$92,"@V",$00,$08
 $A007 DEFM $02,$AC
 $A009 DEFM $03,$A7,$86
 $A00C DEFM $06,$9C,"h",$F0,"X",$AE
 $A012 DEFM $0C,$94,"He returns"
 $A01E DEFM $03,$A6,$86
 $A021 DEFM $07,"TP",$99,$02,$60,$D5
 $A028 DEFM $0E,$95,"NO RIFF RAFF" ; Speech
 $A036 DEFM $0A,"TP",$90,"P",$91,"P",$93,"P",$98
 $A040 DEFM $06,$9C,"h",$F0,"X",$AE
 $A046 DEFM $06,$92,"h",$F0,$00,$00
 $A04C DEFM "-",$95,"Just say who or wh",$FE,$17,"you want to know about!" ; Speech
 $A079 DEFM $02,"L"
 $A07B DEFM $0C,"Nbow street"
 $A087 DEFM $08,"W",$BC,"X",$AC,$00,$02,$BE
 $A08F DEFM $08,"W",$BC,"X",$A9,$00,$02,$C0
 $A097 DEFM $09,"W",$BC,"X",$B0,$00,$01,$BF,$C4
 $A0A0 DEFM $08,"W",$BC,"X",$AF,$00,$01,$C1
 $A0A8 DEFM $06,"SP",$90,"P",$8E
 $A0AE DEFM $02,"L"
 $A0B0 DEFM $12,"N",$FE,$03,"police station"
 $A0C2 DEFM $04,"X",$FE," "
 $A0C6 DEFM $09,"W",$BC,"X",$AF,$00,$01,$BE,$C5
 $A0CF DEFM $02,"L"
 $A0D1 DEFM $0E,"N",$FE,$03,"cells,cell"
 $A0DF DEFM $0E,"XLooks secure"
 $A0ED DEFM $04,"T",$02,$C5
 $A0F1 DEFM $06,"*",$B3,$86,"h",$E3
 $A0F7 DEFM $0C,$94,$91," ",$FE,$07,"escape"
 $A103 DEFM $06,"*",$B3,$86,"h",$E4
 $A109 DEFM $19,$94,")He contemplates escape"
 $A122 DEFM $16,$95,"@No! I'll do my time" ; Speech
 $A138 DEFM $04,"TP",$9E
 $A13C DEFM $03,"*+"
 $A13F DEFM $03,$95,$8E ; Speech
 $A142 DEFM $06,$99,"@Z@V"
 $A148 DEFM $03,$A6,$86
 $A14B DEFM $04,$A8,"h",$E7
 $A14F DEFM $06,$9C,"h",$E7,"X",$B1
 $A155 DEFM $12,$94,"A guard comes in"
 $A167 DEFM $07,"*",$B3,"@Z@V"
 $A16E DEFM $06,$92,"h",$E7,$00,$00
 $A174 DEFM $1A,$95,"Your cell needs padding!" ; Speech
 $A18E DEFM $06,$9C,"h",$E7,"X",$B0
 $A194 DEFM $06,$92,"@V",$00,$00
 $A19A DEFM $0B,$94,"He leaves"
 $A1A5 DEFM $04,$A7,"h",$E7
 $A1A9 DEFM $02,"*"
 $A1AB DEFM $06,$92,"h",$E7,$00,$00
 $A1B1 DEFM $1D,$95,"You're not ",$FE,$03,"one we jailed!" ; Speech
 $A1CE DEFM $06,$9C,"@VX",$B0
 $A1D4 DEFM $06,$9C,"h",$E7,"X",$B0
 $A1DA DEFM $06,$92,"@V",$00,$00
 $A1E0 DEFM $0C,$94,$91," is free!"
 $A1EC DEFM $04,$A7,"h",$E7
 $A1F0 DEFM $02,"L"
 $A1F2 DEFM $14,"N",$FE,$03,"gallery entrance"
 $A206 DEFM $08,"W",$BC,"X",$AC,$00,$01,$C0
 $A20E DEFM $09,"W",$BC,"X",$B3,$00,$01,$C1,$C4
 $A217 DEFM $06,"SP",$90,"P",$8E
 $A21D DEFM $02,"L"
 $A21F DEFM $0B,"N",$FE,$03,"gallery"
 $A22A DEFM $10,"XNaff Security!"
 $A23A DEFM $10,"X*",$B3,$80,$C7,",An alarm!"
 $A24A DEFM $09,"W",$BC,"X",$B2,$00,$01,$C0,$C5
 $A253 DEFM $07,"TP",$90,$02,$60,$D7
 $A25A DEFM $08,"*+",$B3,"@Vh",$E4
 $A262 DEFM $06,$99,"@W",$00,$00
 $A268 DEFM $02,"*"
 $A26A DEFM $16,$94,$91," touches ",$FE,$03,"painting"
 $A280 DEFM $06,$98,"RING"
 $A286 DEFM $03,$A8,$86
 $A289 DEFM $02,$AB
 $A28B DEFM $05,$92,$86,$00,$03
 $A290 DEFM $02,$AC
 $A292 DEFM $03,$A7,$86
 $A295 DEFM $06,$9C,"h",$E7,"X",$B3
 $A29B DEFM $19,$94,"Arrested for art theft!"
 $A2B4 DEFM $06,$9C,"h",$E7,"X",$B0
 $A2BA DEFM $05,$9C,$86,"X",$B1
 $A2BF DEFM $06,$94,"At ",$90
 $A2C5 DEFM $02,"L"
 $A2C7 DEFM $19,"Ncentral station,central"
 $A2E0 DEFM $07,"W",$BD,"X",$A9,$00,$04
 $A2E7 DEFM $07,"W",$BD,"X",$BB,$00,$06
 $A2EE DEFM $07,"W",$BD,"X",$C4,$00,$08
 $A2F5 DEFM $08,"W",$BC,"X",$B8,$00,$01,$C1
 $A2FD DEFM $06,"SP",$90,"P",$8E
 $A303 DEFM $02,"L"
 $A305 DEFM $0D,"N",$FE,$03,"jewellers"
 $A312 DEFM $04,"X",$FE," "
 $A316 DEFM $09,"W",$BC,"X",$B6,$00,$01,$C0,$C5
 $A31F DEFM $02,"L"
 $A321 DEFM $0E,"Nfront street"
 $A32F DEFM $09,"W",$BC,"X",$B5,$00,$01,$C1,$C4
 $A338 DEFM $08,"W",$BC,"X",$B8,$00,$02,$BF
 $A340 DEFM $06,"SP",$90,"P",$8E
 $A346 DEFM $02,"L"
 $A348 DEFM $08,"N",$FE,$03,"bank"
 $A350 DEFM $04,"X",$FE," "
 $A354 DEFM $09,"W",$BC,"X",$B8,$00,$01,$C0,$C5
 $A35D DEFM $02,"L"
 $A35F DEFM $0D,"Nside street"
 $A36C DEFM $08,"W",$BC,"X",$B6,$00,$02,$BE
 $A374 DEFM $08,"W",$BC,"X",$B4,$00,$01,$C0
 $A37C DEFM $08,"W",$BC,"X",$BA,$00,$02,$BF
 $A384 DEFM $09,"W",$BC,"X",$B7,$00,$01,$C1,$C4
 $A38D DEFM $06,"SP",$90,"P",$8E
 $A393 DEFM $02,"L"
 $A395 DEFM $0A,"N",$FE,$03,"museum"
 $A39F DEFM $04,"X",$FE," "
 $A3A3 DEFM $09,"W",$BC,"X",$BA,$00,$01,$C0,$C5
 $A3AC DEFM $0C,"TP",$94,$02,$60,$E2,$03,$D2,$04,"h",$EA
 $A3B8 DEFM $05,"*",$B2,$60,$E2
 $A3BD DEFM $06,$9C,$60,$E2,"X",$A5
 $A3C3 DEFM $0E,$94,"(",$91," gives ",$FE,$03,$8B
 $A3D1 DEFM $08,$94,"@",$8C," ",$FE,$03,$8D
 $A3D9 DEFM $06,$92,"h",$EA,$00,$00
 $A3DF DEFM $10,$95,$FE,$03,"stolen vase!" ; Speech
 $A3EF DEFM $1B,$95,"Have this book as reward!" ; Speech
 $A40A DEFM $06,$9C,$60,$D4,"@V"
 $A410 DEFM $02,"L"
 $A412 DEFM $0D,"Nback street"
 $A41F DEFM $08,"W",$BC,"X",$B8,$00,$02,$BE
 $A427 DEFM $09,"W",$BC,"X",$B9,$00,$01,$C4,$C1
 $A430 DEFM $06,"SP",$90,"P",$8E
 $A436 DEFM $07,"T",$02,$C4,$C1,"X",$B9
 $A43D DEFM $05,"*",$B2,$60,$D0
 $A442 DEFM $05,$9C,"h",$EA,$85
 $A447 DEFM $06,$92,"h",$EA,$00,$00
 $A44D DEFM $12,$95,"Sorry no cameras" ; Speech
 $A45F DEFM $05,$9C,$86,"X",$B9
 $A464 DEFM $06,$92,"@V",$00,$00
 $A46A DEFM $0B,$94,"He leaves"
 $A475 DEFM $02,"L"
 $A477 DEFM $15,"Nheath station,heath"
 $A48C DEFM $07,"W",$BD,"X",$A9,$00,$07
 $A493 DEFM $07,"W",$BD,"X",$B4,$00,$06
 $A49A DEFM $07,"W",$BD,"X",$C4,$00,$05
 $A4A1 DEFM $08,"W",$BC,"X",$BC,$00,$02,$C1
 $A4A9 DEFM $08,"W",$BC,"X",$C1,$00,$02,$C3
 $A4B1 DEFM $06,"SP",$90,"P",$8E
 $A4B7 DEFM $06,"T",$02,$C3,"X",$C0
 $A4BD DEFM $06,"*",$B2,$60,$D4,"-"
 $A4C3 DEFM $15,$94,$91," ",$FE,$07,"find ",$FE,$03,"entrance"
 $A4D8 DEFM $02,"L"
 $A4DA DEFM $11,"Nblackheath lane"
 $A4EB DEFM $04,"X",$FE," "
 $A4EF DEFM $08,"W",$BC,"X",$BB,$00,$02,$C0
 $A4F7 DEFM $08,"W",$BC,"X",$BE,$00,$01,$BF
 $A4FF DEFM $06,"SP",$90,"P",$8E
 $A505 DEFM $02,"L"
 $A507 DEFM $13,"N",$FE,$03,"reactor complex"
 $A51A DEFM $04,"X",$FE," "
 $A51E DEFM $09,"W",$BC,"X",$C0,$00,$02,$C3,$C5
 $A527 DEFM $08,"TP",$9D,"P",$95,"P",$97
 $A52F DEFM $14,"*",$AF,"h",$E5,"-",$B3,$82,"h",$F1,$B3,$84,"h",$F1,"/",$AF,"h",$F1,".."
 $A543 DEFM $12,$94,"(Prof steps back"
 $A555 DEFM $06,$98,"FIZZ"
 $A55B DEFM $06,$9C,"h",$F1,"X",$A5
 $A561 DEFM $16,$94,"into an energy beam!"
 $A577 DEFM $04,$A8,"h",$F1
 $A57B DEFM $02,"T"
 $A57D DEFM $0F,"*",$AF,"h",$E5,$B4,$00,$05,"@h",$AF,"h",$F1,".."
 $A58C DEFM $06,$99,"@h",$00,$05
 $A592 DEFM $06,$92,"h",$F1,$00,$00
 $A598 DEFM $10,$95,"No! I'll shoot" ; Speech
 $A5A8 DEFM $09,"*",$AF,"h",$E5,$AF,"h",$F1,"."
 $A5B1 DEFM $06,$98,"BANG"
 $A5B7 DEFM $15,$94,"Prof shoots Lesley!"
 $A5CC DEFM $0F,$94,$91," hesitates",$FE,$05
 $A5DB DEFM $17,$94,"Prof detonates ",$FE,$03,"bomb"
 $A5F2 DEFM $06,$98,"BOOM"
 $A5F8 DEFM $02,$A0
 $A5FA DEFM $0D,"TP",$93,$02,$60,$DD,$60,$DE,$60,$DF,$60,$E0
 $A607 DEFM $05,"*",$B2,$82,"-"
 $A60C DEFM $08,$96,"Wh",$FE,$17,$8B,"?" ; Blocking message
 $A614 DEFM $05,"*",$AF,"h",$F1
 $A619 DEFM $05,$9C,$82,"h",$F1
 $A61E DEFM $11,$94,"Prof steals ",$FE,$03,$8B
 $A62F DEFM $03,"*+"
 $A632 DEFM $05,$9C,$82,"X",$A5
 $A637 DEFM $0F,$94,$91," inserts ",$FE,$03,$8B
 $A646 DEFM $06,$9A,"@h",$00,$01
 $A64C DEFM $06,$98,"CLIK"
 $A652 DEFM $07,"*",$B4,$00,$04,"@h"
 $A659 DEFM $02,$AC
 $A65B DEFM $02,"*"
 $A65D DEFM $13,$94,$91," defuses ",$FE,$03,"bomb!"
 $A670 DEFM $18,$95,"Shucks! It was nothing" ; Speech
 $A688 DEFM $05,$98,"THE"
 $A68D DEFM $05,$98,"END"
 $A692 DEFM $02,$A0
 $A694 DEFM $09,"TP",$9D,"P",$90,$02,$60,$E1
 $A69D DEFM $06,$98,"BANG"
 $A6A3 DEFM $02,$A0
 $A6A5 DEFM $02,"L"
 $A6A7 DEFM $11,"N",$FE,$03,"power station"
 $A6B8 DEFM $04,"X",$FE," "
 $A6BC DEFM $09,"W",$BC,"X",$BC,$00,$01,$BE,$C5
 $A6C5 DEFM $09,"W",$BC,"X",$BF,$00,$01,$C0,$C4
 $A6CE DEFM $06,"SP",$90,"P",$8E
 $A6D4 DEFM $02,"L"
 $A6D6 DEFM $0D,"N",$FE,$03,"power lab"
 $A6E3 DEFM $04,"X",$FE," "
 $A6E7 DEFM $09,"W",$BC,"X",$BE,$00,$01,$C1,$C5
 $A6F0 DEFM $09,"TP",$94,$03,$D2,$04,"h",$F1
 $A6F9 DEFM $05,"*",$B2,$82,"-"
 $A6FE DEFM $0A,$96,$8A," wh",$FE,$17,$8B,"?" ; Blocking message
 $A708 DEFM $02,"*"
 $A70A DEFM $0E,$94,$91," ",$8A,"s him ",$FE,$03,$8B
 $A718 DEFM $06,$92,"h",$F1,$00,$00
 $A71E DEFM $04,$9C,$82,$85
 $A722 DEFM $04,$95,$FE,"!" ; Speech
 $A726 DEFM $04,$A8,"@V"
 $A72A DEFM $02,$AB
 $A72C DEFM $06,$92,"@V",$00,$0A
 $A732 DEFM $02,$AC
 $A734 DEFM $06,$92,"h",$F1,$00,$00
 $A73A DEFM $03,"*+"
 $A73D DEFM $04,$A7,"@V"
 $A741 DEFM $06,$99,"@Z",$00,$00
 $A747 DEFM $0B,"*",$B3,$82,$60,$DA,"-",$B9,$00,$1E,"."
 $A752 DEFM $0F,$95,"Radio active!" ; Speech
 $A761 DEFM $06,$99,"@Z",$00,$01
 $A767 DEFM $0D,"*",$B3,$82,$60,$DA,"-",$B3,"@Z",$00,$00,"."
 $A774 DEFM $08,$95,"Just ",$8B ; Speech
 $A77C DEFM $06,"*",$B3,$82,$60,$DA
 $A782 DEFM $07,$95,"My ",$8B,"!" ; Speech
 $A789 DEFM $06,$9C,$60,$DA,"h",$F1
 $A78F DEFM $02,"L"
 $A791 DEFM $09,"N",$FE,$03,"sewer"
 $A79A DEFM $08,"W",$BC,"X",$C0,$00,$04,$BE
 $A7A2 DEFM $09,"W",$BC,"X",$C1,$00,$04,$C0,$C3
 $A7AB DEFM $09,"W",$BC,"X",$C2,$00,$04,$BF,$C1
 $A7B4 DEFM $08,"W",$BC,"X",$BD,$00,$02,$C2
 $A7BC DEFM $02,"L"
 $A7BE DEFM $09,"N",$FE,$03,"sewer"
 $A7C7 DEFM $08,"W",$BC,"X",$BB,$00,$02,$C2
 $A7CF DEFM $08,"W",$BC,"X",$C1,$00,$03,$C0
 $A7D7 DEFM $0A,"W",$BC,"X",$C2,$00,$03,$BE,$C3,$C1
 $A7E1 DEFM $08,"W",$BC,"X",$C3,$00,$03,$BF
 $A7E9 DEFM $02,"L"
 $A7EB DEFM $09,"N",$FE,$03,"sewer"
 $A7F4 DEFM $08,"W",$BC,"X",$C0,$00,$01,$C2
 $A7FC DEFM $0C,"W",$BC,"X",$C2,$00,$01,$BE,$C0,$C3,$BF,$C1
 $A808 DEFM $02,"L"
 $A80A DEFM $09,"N",$FE,$03,"sewer"
 $A813 DEFM $08,"W",$BC,"X",$C1,$00,$02,$BF
 $A81B DEFM $0D,"W",$BC,"X",$C3,$00,$02,$BE,$C0,$C3,$BF,$C1,$C2
 $A828 DEFM $02,"L"
 $A82A DEFM $1B,"Ndistrict station,district"
 $A845 DEFM $07,"W",$BD,"X",$A9,$00,$06
 $A84C DEFM $07,"W",$BD,"X",$B4,$00,$08
 $A853 DEFM $07,"W",$BD,"X",$BB,$00,$05
 $A85A DEFM $08,"W",$BC,"X",$C7,$00,$01,$BE
 $A862 DEFM $09,"W",$BC,"X",$C5,$00,$01,$C0,$C4
 $A86B DEFM $06,"SP",$90,"P",$8E
 $A871 DEFM $02,"L"
 $A873 DEFM $0E,"N",$FE,$03,"health lab"
 $A881 DEFM $04,"X",$FE," "
 $A885 DEFM $09,"W",$BC,"X",$C4,$00,$01,$C1,$C5
 $A88E DEFM $09,"TP",$94,$03,$D2,$04,"h",$E9
 $A897 DEFM $05,"*",$B2,$82,"-"
 $A89C DEFM $0A,$96,$8A," wh",$FE,$17,$8B,"?" ; Blocking message
 $A8A6 DEFM $02,"*"
 $A8A8 DEFM $0E,$94,$91," ",$8A,"s him ",$FE,$03,$8B
 $A8B6 DEFM $06,$92,"h",$E9,$00,$00
 $A8BC DEFM $04,$9C,$82,$85
 $A8C0 DEFM $04,$95,$FE,"!" ; Speech
 $A8C4 DEFM $04,$A8,"@V"
 $A8C8 DEFM $02,$AB
 $A8CA DEFM $06,$92,"@V",$00,$0A
 $A8D0 DEFM $02,$AC
 $A8D2 DEFM $06,$92,"h",$E9,$00,$00
 $A8D8 DEFM $03,"*+"
 $A8DB DEFM $04,$A7,"@V"
 $A8DF DEFM $07,"*",$B3,$82,$60,$DA,"-"
 $A8E6 DEFM $04,$95,$FE," " ; Speech
 $A8EA DEFM $06,"*",$B3,$82,$60,$DA
 $A8F0 DEFM $16,$95,"Traces of explosive!" ; Speech
 $A906 DEFM $02,"L"
 $A908 DEFM $0D,"N",$FE,$03,"warehouse"
 $A915 DEFM $09,"W",$BC,"X",$C7,$00,$02,$C1,$C5
 $A91E DEFM $04,"TP",$98
 $A922 DEFM $10,"*",$B3,$82,"X",$C6,$B3,$82,$00,$00,"/",$B2,$60,$E2,"-."
 $A932 DEFM $09,$95,"A vase!" ; Speech
 $A93B DEFM $06,$9C,$60,$E2,"X",$C6
 $A941 DEFM $02,"L"
 $A943 DEFM $0E,"N",$FE,$03,"docks,dock"
 $A951 DEFM $04,"X",$FE," "
 $A955 DEFM $09,"W",$BC,"X",$C6,$00,$02,$C0,$C4
 $A95E DEFM $08,"W",$BC,"X",$C4,$00,$02,$BF
 $A966 DEFM $06,"SP",$90,"P",$8E
 $A96C DEFM $02,"L"
 $A96E DEFM $10,"Noxford gardens"
 $A97E DEFM $09,"W",$BC,"X",$C9,$00,$01,$C4,$C1
 $A987 DEFM $06,"SP",$90,"P",$8E
 $A98D DEFM $02,"L"
 $A98F DEFM $0E,"N",$FE,$03,"director's"
 $A99D DEFM $04,"X",$FE," "
 $A9A1 DEFM $09,"W",$BC,"X",$C8,$00,$01,$C5,$C0
 $A9AA DEFM $02,"L"
 $A9AC DEFM $0D,"Nbrook court"
 $A9B9 DEFM $09,"W",$BC,"X",$CB,$00,$01,$C4,$C1
 $A9C2 DEFM $06,"SP",$90,"P",$8E
 $A9C8 DEFM $02,"L"
 $A9CA DEFM $0C,"N",$FE,$03,"editor's"
 $A9D6 DEFM $04,"X",$FE," "
 $A9DA DEFM $09,"W",$BC,"X",$CA,$00,$01,$C5,$C0
 $A9E3 DEFM $02,"L"
 $A9E5 DEFM $11,"Nsmallman street"
 $A9F6 DEFM $09,"W",$BC,"X",$CD,$00,$01,$C4,$C1
 $A9FF DEFM $06,"SP",$90,"P",$8E
 $AA05 DEFM $02,"L"
 $AA07 DEFM $0F,"N",$FE,$03,"professor's"
 $AA16 DEFM $04,"X",$FE," "
 $AA1A DEFM $09,"W",$BC,"X",$CC,$00,$01,$C5,$C0
 $AA23 DEFM $02,"L"
 $AA25 DEFM $08,"N",$FE,$03,"taxi"
 $AA2D DEFM "\"XGRAPHITTI! SIMON UN MIKE WOZ ERE"
 $AA4F DEFM $02,"L"
 $AA51 DEFM $09,"N",$FE,$03,"train"
 $AA5A DEFM $04,"X",$FE," "

; Data table 0D
b$AA5E DEFM $02,"O"
 $AA60 DEFM $08,"Ncamera"
 $AA68 DEFM $16,"D*",$B2,$60,$D1,",",$FE,$06,"loaded camera"
 $AA7E DEFM $10,"D*",$B2,$60,$D1,"-,",$FE,$06,"camera"
 $AA8E DEFM $0E,"X*",$B2,$60,$D1,",Loaded!"
 $AA9C DEFM $14,"X*",$B2,$60,$D1,"-,Needs ",$FE,$06,"film"
 $AAB0 DEFM $02,"O"
 $AAB2 DEFM $06,"Nfilm"
 $AAB8 DEFM $0E,"D*",$B2,$60,$D0,"-,",$FE,$06,"film"
 $AAC6 DEFM $0B,"XJust film"
 $AAD1 DEFM $02,"O"
 $AAD3 DEFM $12,"Nphoto,photograph"
 $AAE5 DEFM $02,"O"
 $AAE7 DEFM $12,"Nmoney,coins,cash"
 $AAF9 DEFM $0A,"D",$60,$FF,$07," cash"
 $AB03 DEFM $02,"O"
 $AB05 DEFM $0C,"Nbook,books"
 $AB11 DEFM $0D,"Dan old book"
 $AB1E DEFM $04,"SP",$99
 $AB22 DEFM "?X*",$B2,$60,$D4,$B3,$81,"P",$99,".,\"Town History\"...old sewer...beneath Heath station!"
 $AB61 DEFM $16,"X*",$B2,$60,$D4,"-,\"Town History\""
 $AB77 DEFM $02,"O"
 $AB79 DEFM $0D,"Nsign,notice"
 $AB86 DEFM $08,"D",$FE,$06,"sign"
 $AB8E DEFM $06,"SP",$99,"P",$90
 $AB94 DEFM $02,"O"
 $AB96 DEFM $07,"Nradio"
 $AB9D DEFM $10,"D",$FE,$06,"police radio"
 $ABAD DEFM $0E,"XRecieve only"
 $ABBB DEFM $02,"O"
 $ABBD DEFM $14,"Npainting,paintings"
 $ABD1 DEFM $0C,"D",$FE,$06,"painting"
 $ABDD DEFM $10,"X*",$B3,$80,$00,$00,",Van Duff"
 $ABED DEFM $15,"X*",$B3,$80,$C7,",Price - ",$60,"10000"
 $AC02 DEFM $02,"O"
 $AC04 DEFM $0F,"Nwellies,boots"
 $AC13 DEFM $1A,"D*",$B3,"@g",$00,$00,",",$FE,$06,"pair of wellies"
 $AC2D DEFM $16,"D*",$B3,"@g",$86,",wellies (worn)"
 $AC43 DEFM $19,"X*",$B3,$80,$00,$00,",Just rubber boots"
 $AC5C DEFM $0D,"X*",$B3,$80,$C7,",Dirty!"
 $AC69 DEFM $02,"O"
 $AC6B DEFM $05,"Ncat"
 $AC70 DEFM $07,"D",$FE,$06,"cat"
 $AC77 DEFM $11,"XIt's agressive!"
 $AC88 DEFM $02,"O"
 $AC8A DEFM $08,"Ngloves"
 $AC92 DEFM $12,"D",$FE,$06,"pair of gloves"
 $ACA4 DEFM $0F,"X*",$B3,$80,$00,$00,",Leather"
 $ACB3 DEFM $0D,"X*",$B3,$80,$C7,",Dirty!"
 $ACC0 DEFM $02,"O"
 $ACC2 DEFM $08,"Nmagnet"
 $ACCA DEFM $0A,"D",$FE,$06,"magnet"
 $ACD4 DEFM $10,"XIt's magnetic!"
 $ACE4 DEFM $02,"O"
 $ACE6 DEFM $18,"Npink tube,tube,speaker"
 $ACFE DEFM $0D,"D",$FE,$06,"pink tube"
 $AD0B DEFM $16,"X*",$B3,$80,$00,$00,",Small ",$FE,$19,"pretty"
 $AD21 DEFM $11,"X*",$B3,$80,$C7,",A speaker!"
 $AD32 DEFM $02,"O"
 $AD34 DEFM $0A,"Nred card"
 $AD3E DEFM $0C,"D",$FE,$06,"red card"
 $AD4A DEFM $02,"O"
 $AD4C DEFM $0B,"Nblue card"
 $AD57 DEFM $0D,"D",$FE,$06,"blue card"
 $AD64 DEFM $02,"O"
 $AD66 DEFM $0C,"Ngreen card"
 $AD72 DEFM $0E,"D",$FE,$06,"green card"
 $AD80 DEFM $02,"O"
 $AD82 DEFM $0D,"Nyellow card"
 $AD8F DEFM $0F,"D",$FE,$06,"yellow card"
 $AD9E DEFM $02,"O"
 $ADA0 DEFM $11,"Nbomb,slot,slots"
 $ADB1 DEFM $0E,"D",$FE,$06,"time bomb!"
 $ADBF DEFM $13,"XFour narrow slots"
 $ADD2 DEFM $02,"O"
 $ADD4 DEFM $06,"Nvase"
 $ADDA DEFM $08,"D",$FE,$06,"vase"
 $ADE2 DEFM $0F,"Xlooks ancient"

; Data table 0E
b$ADF1 DEFM $02,"C"
 $ADF3 DEFM $07,"Nkevin"
 $ADFA DEFM $07,"DKEVIN"
 $AE01 DEFM $10,"XA weedy person"
 $AE11 DEFB $09,$54,$50,$91,$50,$95,$02,$60,$D0
 $AE1A DEFM $06,"*",$B3,$86,"h",$E3
 $AE20 DEFM $11,$94,$91," eyes up his ",$8B
 $AE31 DEFM $11,$95,"No! It'll break"
 $AE42 DEFB $06,$54,$50,$94,$50,$93
 $AE48 DEFM $10,"*",$B3,$86,"h",$E3,$B3,$82,$60,$D0,$B3,$84,$60,$D0,"/."
 $AE58 DEFM $12,$95,"NO! I'LL LOSE IT"
 $AE6A DEFB $09,$54,$50,$9D,$03,$D3,$04,$60
 $AE72 DEFB $D0
 $AE73 DEFM $06,"*",$B3,$86,"h",$E3
 $AE79 DEFM $10,$94,$91," swings his ",$8D
 $AE89 DEFM $11,$95,"@No, better not"
 $AE9A DEFM $06,"Kkwah"
 $AEA0 DEFM $06,"*",$B3,$86,"h",$E4
 $AEA6 DEFM $03,$A7,$86
 $AEA9 DEFM $06,$98,"KWAH"
 $AEAF DEFM $05,$9C,"h",$E3,$85
 $AEB4 DEFM $05,$9C,$86,"X",$A5
 $AEB9 DEFM $06,$99,"@Vh",$E3
 $AEBF DEFM $10,$94,"Kevin returns!"
 $AECF DEFM $0C,"*",$B3,$86,"h",$E3,$B3,"@X",$00,$00,"."
 $AEDB DEFM $06,$98,"PHUT"
 $AEE1 DEFM $14,$94,"Not enough energy!"
 $AEF5 DEFM $06,"*",$B3,$86,"h",$E3
 $AEFB DEFM $03,$A7,$86
 $AEFE DEFM $06,$98,"KWAH"
 $AF04 DEFM $05,$9C,"h",$E4,$85
 $AF09 DEFM $05,$9C,$86,"X",$A5
 $AF0E DEFM $06,$99,"@Vh",$E4
 $AF14 DEFM $12,$94,"Redhawk is here!"
 $AF26 DEFM $02,"C"
 $AF28 DEFM $09,"Nredhawk"
 $AF31 DEFM $09,"DREDHAWK"
 $AF3A DEFM $0E,"XA meg",$FE,$06,"human"
 $AF48 DEFM $02,"C"
 $AF4A DEFM $08,"Nlesley"
 $AF52 DEFM $08,"DLesley"
 $AF5A DEFB $0E,$54,$50,$94,$50,$95,$02,$60
 $AF62 DEFB $DC,$03,$D2,$04,$68,$E5
 $AF68 DEFM $09,"*",$B2,$60,$DC,$AF,"h",$E5,"."
 $AF71 DEFM $06,$9C,$60,$DC,"h",$E5
 $AF77 DEFM $0B,$94,"(",$91," ",$8A,"s ",$FE,$03,$8B
 $AF82 DEFM $06,$94,"@",$8C," ",$8D
 $AF88 DEFM $06,$92,"h",$E5,$00,$00
 $AF8E DEFM $16,$95,"A handbag siren! Ta!"
 $AFA4 DEFM $02,"C"
 $AFA6 DEFM $0A,"N",$FE,$03,"editor"
 $AFB0 DEFM $0A,"D",$FE,$03,"editor"
 $AFBA DEFM $06,"Kfilm"
 $AFC0 DEFM $06,$92,"h",$E6,$00,$00
 $AFC6 DEFM $10,"*",$B3,"@_",$00,$01,$AF,"h",$E3,$B2,$60,$D1,"-.."
 $AFD6 DEFM $16,$94,$91," gives Kevin ",$FE,$06,"film"
 $AFEC DEFM $19,$95,"Get me some good photos"
 $B005 DEFM $06,$9C,$60,$D1,"h",$E3
 $B00B DEFM $0D,"Kmoney,wages"
 $B018 DEFM $06,$92,"h",$E6,$00,$00
 $B01E DEFM $0B,"*",$B3,"@_",$00,$01,$AF,"h",$E3,"."
 $B029 DEFM $15,$95,"Give me some photos"
 $B03E DEFB $0E,$54,$50,$94,$02,$60,$D1,$60
 $B046 DEFB $D2,$03,$D2,$04,$68,$E6
 $B04C DEFM $13,"*",$AF,"h",$E3,$B2,$60,$D1,$AF,"h",$E6,$B3,"@c",$00,$00,"..."
 $B05F DEFM $06,$92,"h",$E6,$00,$00
 $B065 DEFM $0C,$95,"Worthless!"
 $B071 DEFM $0D,"*",$AF,"h",$E3,$B2,$60,$D1,$AF,"h",$E6,".."
 $B07E DEFM $15,$94,$91," hands over ",$FE,$03,"film"
 $B093 DEFM $06,$92,"h",$E6,$00,$00
 $B099 DEFM $09,$95,"Scoops!"
 $B0A2 DEFM $0D,$94,"(",$91," pays ",$60,$FF,$0D
 $B0AF DEFM $16,$94,"@",$FE,$19,"issues ",$FE,$06,"new film"
 $B0C5 DEFM $06,$9C,$60,$D3,"h",$E3
 $B0CB DEFM $06,$9A,"@]@c"
 $B0D1 DEFM $06,$99,"@c",$00,$00
 $B0D7 DEFM $02,"C"
 $B0D9 DEFM $0D,"N",$FE,$03,"policeman"
 $B0E6 DEFM $0D,"D",$FE,$06,"policeman"
 $B0F3 DEFM $07,"XSmart"
 $B0FA DEFM $02,"C"
 $B0FC DEFM $0C,"N",$FE,$03,"director"
 $B108 DEFM $0C,"D",$FE,$03,"director"
 $B114 DEFM $06,"Kbomb"
 $B11A DEFM $06,$92,"h",$E8,$00,$00
 $B120 DEFM $0A,$95,"Rubbish!"
 $B12A DEFM $06,$92,"h",$F1,$00,$00
 $B130 DEFM $0F,$95,"No bombs here"
 $B13F DEFM $02,"C"
 $B141 DEFM $0D,"N",$FE,$03,"scientist"
 $B14E DEFM $0D,"D",$FE,$03,"scientist"
 $B15B DEFM $02,"C"
 $B15D DEFM $0B,"N",$FE,$03,"curator"
 $B168 DEFM $0B,"D",$FE,$03,"curator"
 $B173 DEFM $02,"C"
 $B175 DEFM $07,"Nfusor"
 $B17C DEFM $1C,"D*",$BB,"h",$EB,",Fusor stealing jewels"
 $B198 DEFM $0D,"D*",$BB,"h",$EB,"-,Fusor"
 $B1A5 DEFM $06,"SP",$97,"P",$98
 $B1AB DEFB $02,$54
 $B1AD DEFM $0E,"*",$AF,"h",$EB,$B3,"@g",$86,$BB,"h",$EB,".."
 $B1BB DEFM $05,$98,"ZAP"
 $B1C0 DEFM $0D,$94,"(",$91," is saved"
 $B1CD DEFM $0D,$94,"@by ",$FE,$03,"boots"
 $B1DA DEFM $06,$92,"h",$EB,$00,$00
 $B1E0 DEFM $08,$95,"Blast!"
 $B1E8 DEFM $03,$A8,$86
 $B1EB DEFM $09,"*",$AF,"h",$EB,$BB,"h",$EB,"."
 $B1F4 DEFM $06,$92,"h",$EB,$00,$00
 $B1FA DEFM $06,$95,"Grrr"
 $B200 DEFM $05,$99,"@Y",$86
 $B205 DEFM $14,$94,"A lightening bolt!"
 $B219 DEFM $05,$98,"ZAP"
 $B21E DEFM $02,$A0
 $B220 DEFM $02,"C"
 $B222 DEFM $08,"Ntechno"
 $B22A DEFM $1C,"D*",$BB,"h",$EC,",Techno robbing ",$FE,$03,"bank"
 $B246 DEFM $0E,"D*",$BB,"h",$EC,"-,Techno"
 $B254 DEFM $06,"SP",$97,"P",$98
 $B25A DEFB $0F,$54,$50,$95,$50,$94,$02,$60
 $B262 DEFB $DB,$03,$D2,$D4,$04,$68,$EC
 $B269 DEFM $0D,"*",$AF,"h",$EC,$B2,$60,$DB,$BB,"h",$EC,".."
 $B276 DEFM $06,$98,"DING"
 $B27C DEFM $0B,$94,"(",$91," ",$8A,"s ",$FE,$03,$8B
 $B287 DEFM $06,$94,"@",$8C," ",$8D
 $B28D DEFM $06,$92,"h",$EC,$00,$00
 $B293 DEFM $0B,$95,"Nooo oo o"
 $B29E DEFM $12,$94,$91," is immobilised"
 $B2B0 DEFM $05,$9C,$60,$DB,$85
 $B2B5 DEFM $03,$A8,$86
 $B2B8 DEFB $02,$54
 $B2BA DEFM $09,"*",$AF,"h",$EC,$BB,"h",$EC,"."
 $B2C3 DEFM $06,$92,"h",$EC,$00,$00
 $B2C9 DEFM $15,$95,"E",$FE,$17,"photons! Sucker!"
 $B2DE DEFM $05,$99,"@Y",$86
 $B2E3 DEFM $0B,$94,$91," fires",$FE,$05
 $B2EE DEFM $06,$98,"FIZZ"
 $B2F4 DEFM $02,$A0
 $B2F6 DEFM $02,"C"
 $B2F8 DEFM $07,"N",$FE,$03,"rat"
 $B2FF DEFM $16,"D*",$BB,"h",$ED,",The R",$FE,$17,"stealing"
 $B315 DEFM $0F,"D*",$BB,"h",$ED,"-,The R",$FE,$17
 $B324 DEFM $06,"SP",$97,"P",$98
 $B32A DEFB $02,$54
 $B32C DEFM $0D,"*",$AF,$60,$D9,$AF,"h",$ED,$BB,"h",$ED,".."
 $B339 DEFM $06,$92,"h",$ED,$00,$00
 $B33F DEFM $15,$95,"Aagh! Nasty catsies"
 $B354 DEFM $0E,$94,$91," surrenders"
 $B362 DEFM $03,$A8,$86
 $B365 DEFM $09,"*",$AF,"h",$ED,$BB,"h",$ED,"."
 $B36E DEFM $06,$92,"h",$ED,$00,$00
 $B374 DEFM $05,$99,"@Y",$86
 $B379 DEFM $19,$94,"Hundreds of rats appear"
 $B392 DEFM $08,$95,"Gnaws!"
 $B39A DEFM $06,$98,"NASH"
 $B3A0 DEFM $06,$98,"GNAW"
 $B3A6 DEFM $02,$A0
 $B3A8 DEFM $02,"C"
 $B3AA DEFM $08,"Nmerlin"
 $B3B2 DEFM $16,"D*",$BB,"h",$EE,",Merlin, robbing"
 $B3C8 DEFM $0E,"D*",$BB,"h",$EE,"-,Merlin"
 $B3D6 DEFM $06,"SP",$97,"P",$98
 $B3DC DEFM $06,"Kkwah"
 $B3E2 DEFM $0A,"*+",$AF,"h",$EE,$BB,"h",$EE,"."
 $B3EC DEFM $06,$94,"(",$91,$FE,$1B
 $B3F2 DEFM $1C,$94,"@",$FE,$03,"spell's target has gone"
 $B40E DEFM $06,$92,"h",$EE,$00,$00
 $B414 DEFM $15,$94,"it affects ",$FE,$03,"caster"
 $B429 DEFM $08,$95,"Oh n",$FE,$05
 $B431 DEFM $03,$A8,$86
 $B434 DEFB $04,$54,$50,$9E
 $B438 DEFM $09,"*",$AF,"h",$EE,$BB,"h",$EE,"."
 $B441 DEFM $08,$95,"Uhh! ",$8E
 $B449 DEFM $03,$A6,$86
 $B44C DEFB $02,$54
 $B44E DEFM $09,"*",$AF,"h",$EE,$BB,"h",$EE,"."
 $B457 DEFM $06,$92,"h",$EE,$00,$00
 $B45D DEFM $11,$94,$91," casts ",$FE,$06,"spell"
 $B46E DEFM $17,$95,"I comm",$FE,$19,"you",$FE,$05,"be still"
 $B485 DEFM $06,$92,"h",$EE,$00,$01
 $B48B DEFM $05,$99,"@Y",$86
 $B490 DEFM $06,$95,"Die!"
 $B496 DEFM $06,$98,"ARGH"
 $B49C DEFM $02,$A0
 $B49E DEFM $02,"C"
 $B4A0 DEFM $0A,"N",$FE,$03,"mugger"
 $B4AA DEFM $0B,"D",$FE,$06,"mugger!"
 $B4B5 DEFM $08,"X",$FE,$08,"mean"
 $B4BD DEFM $06,"SP",$97,"P",$98
 $B4C3 DEFM $02,"C"
 $B4C5 DEFM $0D,"N",$FE,$03,"librarian"
 $B4D2 DEFM $0D,"D",$FE,$03,"librarian"
 $B4DF DEFM "FKlesley,curator,scientist,station,street,vase,rat,techno,fusor,m"
 $B520 DEFM "erlin"
 $B525 DEFM $06,$92,"h",$F0,$00,$00
 $B52B DEFM $1D,$95,"Sorry! Can't help you there"
 $B548 DEFM $10,"Keditor,trumpet"
 $B558 DEFM $06,$92,"h",$F0,$00,$00
 $B55E DEFM $17,$95,$FE,$03,"editor",$FE,$05,"brook Court"
 $B575 DEFM $10,"Kprofessor,prof"
 $B585 DEFM $06,$92,"h",$F0,$00,$00
 $B58B DEFM $17,$95,"Prof",$FE,$05,"smallman Street"
 $B5A2 DEFM $10,"Kpower,director"
 $B5B2 DEFM $06,$92,"h",$F0,$00,$00
 $B5B8 DEFM $1C,$95,$FE,$03,"director",$FE,$05,"oxford Gardens"
 $B5D4 DEFM $02,"C"
 $B5D6 DEFM $12,"N",$FE,$03,"prof,professor"
 $B5E8 DEFM $0D,"D",$FE,$03,"professor"
 $B5F5 DEFM $02,"C"
 $B5F7 DEFM $02,"C"
 $B5F9 DEFM $02,"C"
 $B5FB DEFM $02,"C"
 $B5FD DEFM $02,"C"

; Data table 0F
b$B5FF DEFB $06,$45,$02,$73,$68,$F5
 $B605 DEFB $06,$99,$40,$56,$68,$E3
 $B60B DEFB $06,$A9,$68,$E4,$40,$58
 $B611 DEFM $0E,$96,$FE,$15," Start >>>"            ; Blocking message - "[<<< Press SPACE to] Start >>>"
 $B61F DEFB $06,$45,$02,$73,$68,$E3
 $B625 DEFM $16,$94,"(",$91," awoke in Hospital"
 $B63B DEFM $16,$95,"How did I get here? "
 $B651 DEFM $13,$94,")He doesn't know!"
 $B664 DEFB $06,$45,$02,$75,$68,$F5
 $B66A DEFB $04,$AD,$40,$56
 $B66E DEFM $1A,$94,"(Suddenly, ",$91," remembers",$FE,$05
 $B688 DEFM $0E,$94,"@     \"KWAH\""
 $B696 DEFB $02,$AE
 $B698 DEFB $05,$93,$86,$00,$02
 $B69D DEFB $03,$2A,$2B
 $B6A0 DEFB $06,$9A,$40,$61,$00,$01
 $B6A6 DEFB $07,$2A,$B3,$40,$61,$00,$03
 $B6AD DEFB $06,$99,$40,$61,$00,$00
 $B6B3 DEFB $06,$45,$02,$76,$68,$F6
 $B6B9 DEFB $05,$93,$86,$00,$01
 $B6BE DEFM $1A,"*+",$B3,$81,"P",$8D,$B3,$81,"P",$8E,$B6,$82,$B3,$81,"P",$97,$B3,$81,"P",$9D,"////-"
 $B6D8 DEFM $04,$AD,"@V"
 $B6DC DEFM $21,$94,"*",$B3,$81,"P",$96,"-",$B3,$81,"P",$96,$B3,"@b",$00,$02,"./,Time passes",$FE,$05
 $B6FD DEFM $02,$AE
 $B6FF DEFM $03,"*+"
 $B702 DEFM $06,$9A,"@b",$00,$01
 $B708 DEFM $08,"*+",$B3,"@b",$00,$03
 $B710 DEFM $06,$99,"@b",$00,$00
 $B716 DEFM $08,"*+",$B4,"@W",$00,$1C
 $B71E DEFM $06,$99,"@W",$00,$1C
 $B724 DEFM $08,"*+",$B3,"@Vh",$E4
 $B72C DEFM $06,$9B,"@X",$00,$02
 $B732 DEFM $06,$AA,"h",$E4,"@X"
 $B738 DEFM $08,"*+",$B3,"@Vh",$E3
 $B740 DEFM $06,$9A,"@X",$00,$01
 $B746 DEFM $06,$AA,"h",$E4,"@X"
 $B74C DEFM $08,"*+",$B4,"@X",$00,"\""
 $B754 DEFM $06,$99,"@X",$00,"\""
 $B75A DEFM $15,"*+",$B3,"@Vh",$E4,$B3,"@W",$00,$00,$B3,"@",$60,$00,$00,"-.."
 $B76F DEFM $06,$99,"@",$60,$00,$00
 $B775 DEFM $06,$9C,$60,$D6,"X",$A5
 $B77B DEFM $04,$AD,"h",$E4
 $B77F DEFM $05,$9C,"h",$E7,$85
 $B784 DEFM $02,$AE
 $B786 DEFM $04,$AD,"h",$E7
 $B78A DEFM $1A,$95,"Hey! Captain Popularity!"
 $B7A4 DEFM $11,$94,$91," takes ",$FE,$03,"radio"
 $B7B5 DEFM $05,$9C,$86,"X",$B0
 $B7BA DEFM $02,$AE
 $B7BC DEFM $04,$AD,"h",$E4
 $B7C0 DEFM $0A,$94,$FE,$19,"leaves"
 $B7CA DEFM $02,$AE
 $B7CC DEFM $12,"*",$B3,"@X",$00,$00,$B3,"@Vh",$E4,$BB,"h",$E4,"..-"
 $B7DE DEFM $06,$99,"@Z",$00,$00
 $B7E4 DEFM $02,"*"
 $B7E6 DEFM $06,$92,"h",$E4,$00,$00
 $B7EC DEFM $03,"*+"
 $B7EF DEFM $02,$AC
 $B7F1 DEFM $12,$94,$91," has no energy!"
 $B803 DEFM $06,$98,"KWAH"
 $B809 DEFM $05,$9C,"h",$E3,$85
 $B80E DEFM $06,$9C,"h",$E4,"X",$A5
 $B814 DEFM $06,$99,"@Vh",$E3
 $B81A DEFM $0F,$94,"Kevin returns"
 $B829 DEFM $04,$A7,"h",$E3
 $B82D DEFM $06,"*",$B3,$85,"X",$B1
 $B833 DEFM $04,$A8,"h",$E7
 $B837 DEFM $06,$9C,"h",$E7,"X",$B1
 $B83D DEFM $10,$94,"A guard enters"
 $B84D DEFM $06,$92,"h",$E7,$00,$00
 $B853 DEFM $1C,$95,"You're not ",$FE,$03,"one we jailed"
 $B86F DEFM $06,$9C,"@VX",$B0
 $B875 DEFM $06,$9C,"h",$E7,"X",$B0
 $B87B DEFM $06,$92,"@V",$00,$00
 $B881 DEFM $0B,$95,"I'm free!"
 $B88C DEFM $04,$A7,"h",$E7
 $B890 DEFM $06,"E",$02,"xh",$F2
 $B896 DEFM $06,$93,"h",$F2,$00,$1B
 $B89C DEFM $03,"*+"
 $B89F DEFM $06,$9C,"h",$EF,"X",$A5
 $B8A5 DEFM $06,$99,"@d",$00,$01
 $B8AB DEFM $06,$99,"@eX",$A8
 $B8B1 DEFM $06,"*+",$B9,$00,$0F
 $B8B7 DEFM $06,$99,"@eX",$A6
 $B8BD DEFM $06,"*+",$B9,$00,$19
 $B8C3 DEFM $06,$99,"@eX",$AC
 $B8C9 DEFM $03,"*+"
 $B8CC DEFM $05,$9C,$86,"@e"
 $B8D1 DEFM $0C,"*+",$B3,"@",$60,$00,$01,$AF,"@V/"
 $B8DD DEFM $02,$AC
 $B8DF DEFM $06,$92,"@V",$00,$00
 $B8E5 DEFM $02,$AC
 $B8E7 DEFM $03,"*+"
 $B8EA DEFM $10,$94,"A mugging ",$FE,$17,$90,"!"
 $B8FA DEFM $05,$99,"@Y",$86
 $B8FF DEFM $13,$95,"*",$B3,"@b",$00,$00,",Gimme dat!"
 $B912 DEFM $19,$95,"*",$B3,"@b",$00,$01,",Hands up sucker!"
 $B92B DEFM $16,$95,"*",$B3,"@b",$00,$02,",I'll take ",$FE,$04,"!"
 $B941 DEFM $06,$99,"@Y",$00,$00
 $B947 DEFM $18,$97,"*",$B3,"@",$60,$00,$01,$AF,"@V-.,Mugging",$FE,$05,$90
 $B95F DEFM $02,"*"
 $B961 DEFM $05,$9C,$86,"X",$A5
 $B966 DEFM $06,$9C,"h",$EF,"@e"
 $B96C DEFM $06,$AA,"h",$EF,$00,$04
 $B972 DEFM $06,"E",$02,"}h",$F4
 $B978 DEFM $06,$93,"h",$F4,$00,$1B
 $B97E DEFM $05,"*",$B9,$00,$14
 $B983 DEFM $05,$9C,$86,"@e"
 $B988 DEFM $11,$94,$FE,$03,"police arrive"
 $B999 DEFM $0F,$94,"They book him"
 $B9A8 DEFM $05,$9C,$86,"X",$A5
 $B9AD DEFM $06,$9C,"h",$EF,"X",$A5
 $B9B3 DEFM $06,$9B,"@W",$00,$01
 $B9B9 DEFM $06,$99,"@e",$00,$00
 $B9BF DEFM $06,$99,"@d",$00,$00
 $B9C5 DEFM $06,"E",$02,$81,"h",$F3
 $B9CB DEFM $06,$93,"h",$F3,$00,$1B
 $B9D1 DEFM $09,"*+",$B3,"@e",$00,$00,"-"
 $B9DA DEFM $06,$9C,"h",$EF,"X",$A5
 $B9E0 DEFM $06,$9C,"h",$F3,"@e"
 $B9E6 DEFM $14,$94,"The mugger escapes"
 $B9FA DEFM $06,$9C,"h",$F3,"X",$A5
 $BA00 DEFM $06,$9B,"@W",$00,$03
 $BA06 DEFM $06,"*+",$BB,"h",$E5
 $BA0C DEFM $06,$9C,"h",$E5,"@e"
 $BA12 DEFM $06,$92,"h",$E5,$00,$0C
 $BA18 DEFM $05,$9C,$86,"X",$AB
 $BA1D DEFM $02,"*"
 $BA1F DEFM $04,$A7,"h",$EF
 $BA23 DEFM $06,$9C,"h",$EF,"X",$A5
 $BA29 DEFM $06,$99,"@e",$00,$00
 $BA2F DEFM $06,$99,"@d",$00,$00
 $BA35 DEFM $06,"E",$02,$D0,"h",$EB
 $BA3B DEFM $03,"*+"
 $BA3E DEFM $06,$99,"@eX",$B5
 $BA44 DEFM $06,$99,"@d",$00,$01
 $BA4A DEFM $05,$9C,$86,"@e"
 $BA4F DEFM $0C,"*+",$B3,"@",$60,$00,$01,$AF,"@V/"
 $BA5B DEFM $02,$AC
 $BA5D DEFM $06,$92,"@V",$00,$00
 $BA63 DEFM $02,$AC
 $BA65 DEFM $02,"*"
 $BA67 DEFM $05,$94,$91,$FE,$1B
 $BA6C DEFM $0D,$95,"No one move"
 $BA79 DEFM $1B,$97,"*",$AF,"@V-",$B3,"@",$60,$00,$01,".,",$91,$FE,$05,"robbery",$FE,$05,$90
 $BA94 DEFM $06,$92,"h",$EE,$00,$0D
 $BA9A DEFM $06,$92,"h",$EB,$00,$00
 $BAA0 DEFM $06,"*",$B3,$85,"@e"
 $BAA6 DEFM $06,$95,"Bye!"
 $BAAC DEFM $05,$9C,"h",$E5,$85
 $BAB1 DEFM $05,$9C,$86,"X",$A5
 $BAB6 DEFM $06,$99,"@e",$00,$00
 $BABC DEFM $06,$99,"@d",$00,$00
 $BAC2 DEFM $06,$9B,"@W",$00,$08
 $BAC8 DEFM $06,"E",$03,$17,"h",$EC
 $BACE DEFM $03,"*+"
 $BAD1 DEFM $06,$99,"@eX",$B7
 $BAD7 DEFM $06,$99,"@d",$00,$01
 $BADD DEFM $05,$9C,$86,"@e"
 $BAE2 DEFM $0C,"*+",$B3,"@",$60,$00,$01,$AF,"@V/"
 $BAEE DEFM $02,$AC
 $BAF0 DEFM $06,$92,"@V",$00,$00
 $BAF6 DEFM $02,$AC
 $BAF8 DEFM $02,"*"
 $BAFA DEFM $0B,$94,$91," runs in"
 $BB05 DEFM $0C,$95,"Raise 'em!"
 $BB11 DEFM $18,$97,"*",$AF,"@V-",$B3,"@",$60,$00,$01,".,",$91,$FE,$05,"raid",$FE,$05,$90
 $BB29 DEFM $06,$92,"h",$EE,$00,$0D
 $BB2F DEFM $06,$92,"h",$EC,$00,$00
 $BB35 DEFM $06,"*",$B3,$85,"@e"
 $BB3B DEFM $08,$95,"Cheers"
 $BB43 DEFM $05,$9C,"h",$E5,$85
 $BB48 DEFM $05,$9C,$86,"X",$A5
 $BB4D DEFM $06,$99,"@e",$00,$00
 $BB53 DEFM $06,$99,"@d",$00,$00
 $BB59 DEFM $06,$9B,"@W",$00,$08
 $BB5F DEFM $06,"E",$03,"Ch",$ED
 $BB65 DEFM $03,"*+"
 $BB68 DEFM $06,$99,"@eX",$C6
 $BB6E DEFM $06,$99,"@d",$00,$01
 $BB74 DEFM $05,$9C,$86,"@e"
 $BB79 DEFM $0C,"*+",$B3,"@",$60,$00,$01,$AF,"@V/"
 $BB85 DEFM $02,$AC
 $BB87 DEFM $06,$92,"@V",$00,$00
 $BB8D DEFM $02,$AC
 $BB8F DEFM $02,"*"
 $BB91 DEFM $05,$94,$91,$FE,$1B
 $BB96 DEFM $09,$95,"Eeee..!"
 $BB9F DEFM $1C,$97,"*",$AF,"@V-",$B3,"@",$60,$00,$01,".,",$91,$FE,$05,"break in",$FE,$05,$90
 $BBBB DEFM $06,$92,"h",$EE,$00,$0D
 $BBC1 DEFM $06,$92,"h",$ED,$00,$00
 $BBC7 DEFM $06,"*",$B3,$85,"@e"
 $BBCD DEFM $0B,$95,"Gnaw",$FE,$05,"bye"
 $BBD8 DEFM $05,$9C,"h",$E5,$85
 $BBDD DEFM $05,$9C,$86,"X",$A5
 $BBE2 DEFM $06,$99,"@e",$00,$00
 $BBE8 DEFM $06,$99,"@d",$00,$00
 $BBEE DEFM $06,$9B,"@W",$00,$08
 $BBF4 DEFM $06,"E",$03,$8C,"h",$E5
 $BBFA DEFM $05,$92,$86,$00,$00
 $BBFF DEFM $03,"*+"
 $BC02 DEFM $06,$9C,"h",$E5,"X",$BC
 $BC08 DEFM $06,$9C,"h",$F1,"X",$BC
 $BC0E DEFM $11,$94,$91," is confronted"
 $BC1F DEFM $10,"*+",$AF,"@V",$B3,"@",$60,$00,$01,$B2,$60,$DC,"./"
 $BC2F DEFM $02,$AC
 $BC31 DEFM $06,$92,"@V",$00,$00
 $BC37 DEFM $02,$AC
 $BC39 DEFM $05,"*",$B2,$60,$DC
 $BC3E DEFM $06,$9C,$60,$DC,"X",$BC
 $BC44 DEFM $12,$94,"She drops ",$FE,$03,"tube"
 $BC56 DEFM $06,$98,"WAIL"
 $BC5C DEFM $1F,$97,"*",$B3,"@",$60,$00,$01,",Siren",$FE,$05,"blackheath lane"
 $BC7B DEFM $06,$9C,"h",$F1,"X",$BD
 $BC81 DEFM $10,$94,$FE,$03,"man runs off"
 $BC91 DEFM $06,"*",$B2,$60,$DC,"-"
 $BC97 DEFM $06,$95,"HELP"
 $BC9D DEFM $0F,$94,$91," is abducted"
 $BCAC DEFM $06,$9C,"h",$F1,"X",$BD
 $BCB2 DEFM $05,$9C,$86,"X",$BD
 $BCB7 DEFM $03,$A8,$86
 $BCBA DEFM $06,"E",$03,$D1,"h",$EE
 $BCC0 DEFM $03,"*+"
 $BCC3 DEFM $06,$99,"@eX",$B3
 $BCC9 DEFM $06,$99,"@d",$00,$01
 $BCCF DEFM $05,$9C,$86,"@e"
 $BCD4 DEFM $0C,"*+",$B3,"@",$60,$00,$01,$AF,"@V/"
 $BCE0 DEFM $02,$AC
 $BCE2 DEFM $06,$92,"@V",$00,$00
 $BCE8 DEFM $02,$AC
 $BCEA DEFM $02,"*"
 $BCEC DEFM $05,$94,$91,$FE,$1B
 $BCF1 DEFM $17,$95,"I comm",$FE,$19,"you",$FE,$05,"be still"
 $BD08 DEFM $19,$97,"*",$AF,"@V-",$B3,"@",$60,$00,$01,".,",$91,$FE,$05,"theft",$FE,$05,$90
 $BD21 DEFM $06,$92,"h",$EB,$00,$0D
 $BD27 DEFM $06,$92,"h",$EE,$00,$00
 $BD2D DEFM $06,"*",$B3,$85,"@e"
 $BD33 DEFM $0B,$95,"Au revoir"
 $BD3E DEFM $05,$9C,$86,"X",$A5
 $BD43 DEFM $06,$9C,$60,$D7,"X",$A5
 $BD49 DEFM $06,$99,"@e",$00,$00
 $BD4F DEFM $06,$99,"@d",$00,$00
 $BD55 DEFM $06,$9B,"@W",$00,$08
 $BD5B DEFM $06,"E",$03,$FC,"h",$F5
 $BD61 DEFM $04,$AD,"@V"
 $BD65 DEFM $06,$98,"TICK"
 $BD6B DEFM $06,$98,"TOCK"
 $BD71 DEFM $06,$98,"TICK"
 $BD77 DEFM $06,$98,"BOOM"
 $BD7D DEFM $02,$A0
 $BD7F DEFM $02,"F"

; Data table 10
g$BD81 DEFW $0000
 $BD83 DEFW $E368
 $BD85 DEFW $0000
 $BD87 DEFW $A558
 $BD89 DEFW $0000
 $BD8B DEFW $A558
 $BD8D DEFW $0000
 $BD8F DEFW $E368
 $BD91 DEFW $0000
 $BD93 DEFW $A558
 $BD95 DEFW $0000
 $BD97 DEFW $AB58
 $BD99 DEFW $0000
 $BD9B DEFW $A558
 $BD9D DEFW $0000
 $BD9F DEFW $B358
 $BDA1 DEFW $0000
 $BDA3 DEFW $C958
 $BDA5 DEFW $0000
 $BDA7 DEFW $CB58
 $BDA9 DEFW $0000
 $BDAB DEFW $CD58
 $BDAD DEFW $0000
 $BDAF DEFW $BF58
 $BDB1 DEFW $0000
 $BDB3 DEFW $CF58
 $BDB5 DEFW $0000
 $BDB7 DEFW $EB68
 $BDB9 DEFW $0000
 $BDBB DEFW $EC68
 $BDBD DEFW $0000
 $BDBF DEFW $ED68
 $BDC1 DEFW $0000
 $BDC3 DEFW $EE68
 $BDC5 DEFW $0000
 $BDC7 DEFW $BD58
 $BDC9 DEFW $0000
 $BDCB DEFW $A558

; Data table 11
g$BDCD DEFW $0000
 $BDCF DEFW $A758
 $BDD1 DEFW $0000
 $BDD3 DEFW $A558
 $BDD5 DEFW $0000
 $BDD7 DEFW $AB58
 $BDD9 DEFW $0000
 $BDDB DEFW $A558
 $BDDD DEFW $0000
 $BDDF DEFW $B058
 $BDE1 DEFW $0000
 $BDE3 DEFW $BF58
 $BDE5 DEFW $0000
 $BDE7 DEFW $C558
 $BDE9 DEFW $0000
 $BDEB DEFW $B958
 $BDED DEFW $0000
 $BDEF DEFW $A558
 $BDF1 DEFW $0000
 $BDF3 DEFW $A558
 $BDF5 DEFW $0000
 $BDF7 DEFW $A558
 $BDF9 DEFW $0000
 $BDFB DEFW $A558
 $BDFD DEFW $0000
 $BDFF DEFW $A558
 $BE01 DEFW $0000
 $BE03 DEFW $AE58
 $BE05 DEFW $0000
 $BE07 DEFW $BF58
 $BE09 DEFW $0000
 $BE0B DEFW $A558
 $BE0D DEFW $0000
 $BE0F DEFW $A558
 $BE11 DEFW $0000
 $BE13 DEFW $A558
 $BE15 DEFW $0000
 $BE17 DEFW $A558
 $BE19 DEFW $0000
 $BE1B DEFW $A558

; Data table 12
g$BE1D DEFW $0000
 $BE1F DEFW $0100
 $BE21 DEFW $0000
 $BE23 DEFW $2100
 $BE25 DEFW $0000
 $BE27 DEFW $0400
 $BE29 DEFW $0000
 $BE2B DEFW $0400
 $BE2D DEFW $0000
 $BE2F DEFW $0A00
 $BE31 DEFW $0000
 $BE33 DEFW $0800
 $BE35 DEFW $0000
 $BE37 DEFW $0800
 $BE39 DEFW $0000
 $BE3B DEFW $0500
 $BE3D DEFW $0000
 $BE3F DEFW $0A00
 $BE41 DEFW $0000
 $BE43 DEFW $0C00
 $BE45 DEFW $0000
 $BE47 DEFW $1400
 $BE49 DEFW $0000
 $BE4B DEFW $1900
 $BE4D DEFW $0000
 $BE4F DEFW $0500
 $BE51 DEFW $0000
 $BE53 DEFW $0300
 $BE55 DEFW $0000
 $BE57 DEFW $0A00
 $BE59 DEFW $0000
 $BE5B DEFW $0000
 $BE5D DEFW $0000
 $BE5F DEFW $0000
 $BE61 DEFW $0000
 $BE63 DEFW $0000
 $BE65 DEFW $0000
 $BE67 DEFW $0000
 $BE69 DEFW $0000
 $BE6B DEFW $0000

; Data table 13
g$BE6D DEFW $0000
 $BE6F DEFW $0000
 $BE71 DEFW $0000
 $BE73 DEFW $0000
 $BE75 DEFW $0000
 $BE77 DEFW $0000
 $BE79 DEFW $0000
 $BE7B DEFW $0000
 $BE7D DEFW $0000
 $BE7F DEFW $0000
 $BE81 DEFW $0000
 $BE83 DEFW $0000
 $BE85 DEFW $0000
 $BE87 DEFW $0000
 $BE89 DEFW $0000
 $BE8B DEFW $0000
 $BE8D DEFW $0000
 $BE8F DEFW $0000
 $BE91 DEFW $0000
 $BE93 DEFW $0000
 $BE95 DEFW $0000
 $BE97 DEFW $0000
 $BE99 DEFW $0000
 $BE9B DEFW $0000
 $BE9D DEFW $0000
 $BE9F DEFW $0000
 $BEA1 DEFW $0000
 $BEA3 DEFW $0000
 $BEA5 DEFW $0000
 $BEA7 DEFW $0000
 $BEA9 DEFW $0000
 $BEAB DEFW $0000
 $BEAD DEFW $0000
 $BEAF DEFW $0000
 $BEB1 DEFW $0000
 $BEB3 DEFW $0000
 $BEB5 DEFW $0000
 $BEB7 DEFW $0000
 $BEB9 DEFW $0000
 $BEBB DEFW $0000
 $BEBD DEFW $0000
 $BEBF DEFW $0000
 $BEC1 DEFW $0000
 $BEC3 DEFW $0000
 $BEC5 DEFW $0000
 $BEC7 DEFW $0000
 $BEC9 DEFW $0000
 $BECB DEFW $0000
 $BECD DEFW $0000
 $BECF DEFW $0000
 $BED1 DEFW $0000
 $BED3 DEFW $0000
 $BED5 DEFW $0000
 $BED7 DEFW $0000
 $BED9 DEFW $0000
 $BEDB DEFW $0000
 $BEDD DEFW $0000
 $BEDF DEFW $0000
 $BEE1 DEFW $0000
 $BEE3 DEFW $0000
 $BEE5 DEFW $0000
 $BEE7 DEFW $0000
 $BEE9 DEFW $0000
 $BEEB DEFW $0000
 $BEED DEFW $0000
 $BEEF DEFW $0000
 $BEF1 DEFW $0000
 $BEF3 DEFW $0000
 $BEF5 DEFW $0000
 $BEF7 DEFW $0000
 $BEF9 DEFW $0000
 $BEFB DEFW $0000
 $BEFD DEFW $0000
 $BEFF DEFW $0000
 $BF01 DEFW $0000
 $BF03 DEFW $0000
 $BF05 DEFW $0000

; Data block at BF07
b$BF07 DEFB $00

; Status bar graphics
;
; #CALL:print_udg(#PC,status_bar,3,4,56)
b$BF08 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00
 $BF10 DEFB $00,$FF,$FF,$FF,$00,$00,$00,$FF
 $BF18 DEFB $FF,$FF,$00,$00,$00,$39,$CF,$FF
 $BF20 DEFB $6F,$60,$20,$7F,$A7,$E0,$7F,$60
 $BF28 DEFB $20,$BF,$CF,$E0,$1F,$80,$20,$CF
 $BF30 DEFB $3F,$E0,$06,$00,$20,$F0,$FF,$FF
 $BF38 DEFB $00,$00,$20,$7F,$EF,$E0,$7F,$E0
 $BF40 DEFB $20,$7F,$6F,$E0,$76,$A0,$20,$6A
 $BF48 DEFB $AF,$E0,$59,$C0,$20,$5F,$EF,$FF
 $BF50 DEFB $3F,$E0,$0F,$7F,$EF,$FF,$00,$00
 $BF58 DEFB $00,$FF,$FF,$FF,$00,$00,$00,$FF
 $BF60 DEFB $FF,$FF,$00,$00,$00,$FF,$FF,$FF

; Standard character set
b$BF68 DEFW $7CBF

; Next screen address to print at
g$BF6A DEFW $4000

; IM2 main routine
c$BF6C PUSH IY       ; { Store the main registers
 $BF6E PUSH IX       ;
 $BF70 PUSH AF       ;
 $BF71 PUSH HL       ; }
 $BF72 LD HL,($BF6A) ; { Push the next screen address
 $BF75 PUSH HL       ; }
 $BF76 LD HL,$BFB0   ; Point #REGhl at the interrupt routine buffer (#R$BFB0)
 $BF79 LD A,(HL)     ; { Are interrupts enabled?
 $BF7A CP $00        ; }
 $BF7C JR Z,$BFA3    ; If so, nothing to do so skip to the end
; An intterupt routine needs to run
 $BF7E DI            ; Disable interrupts to avoid re-entry
 $BF7F PUSH BC       ; { Store #REGbc and #REGde as they'll be used now
 $BF80 PUSH DE       ;} 
 $BF81 INC HL        ; Move to the next entry in the buffer
 $BF82 LD B,$04      ; Four entries to look at
*$BF84 LD E,(HL)     ; { Put the address in #REGde
 $BF85 INC HL        ;
 $BF86 LD D,(HL)     ; }
 $BF87 INC HL        ; { Put the enabled flag #REGc
 $BF88 LD C,(HL)     ; }
 $BF89 INC HL        ; Move #REGhl to the tick count
 $BF8A SRA C         ; Is this routine enabled?
 $BF8C JR NC,$BF9D   ; Jump forward if not
 $BF8E DEC (HL)      ; Otherwise, decrement the tick count
 $BF8F JR NZ,$BF9D   ; Skip the next bit if it is not zero
; An interrupt routine is enabled and scheduled to run
 $BF91 INC HL        ; { Set the tick count to the frequency
 $BF92 LD A,(HL)     ;
 $BF93 DEC HL        ;
 $BF94 LD (HL),A     ; }
 $BF95 PUSH BC       ; { Store #REGbc and #REGhl
 $BF96 PUSH HL       ; }
 $BF97 EX DE,HL      ; Put the routine address in #REGhl
 $BF98 CALL $BFAF    ; Run the routine
 $BF9B POP HL        ; { Restore #REGbbc and #REGhl
 $BF9C POP BC        ; }
; All done with this routine
*$BF9D INC HL        ; { Point #REGhl to the next routine
 $BF9E INC HL        ; }
 $BF9F DJNZ $BF84    ; Loop back round if there are more entries
 $BFA1 POP DE        ; { Restore #REGde and #REGbc
 $BFA2 POP BC        ; }
*$BFA3 POP HL        ; { Restore the next screen address
 $BFA4 LD ($BF6A),HL ; }
 $BFA7 POP HL        ; { Restore the main registers
 $BFA8 POP AF        ;
 $BFA9 POP IX        ;
 $BFAB POP IY        ; }
 $BFAD EI            ; { Re-enable interrupts and return
 $BFAE RET           ; }

; Jump to a routine in IM2
;
; Used by the routine at #R$BF6C.
;
; HL Destination address
c$BFAF JP (HL)       ;

; IM2 Routine buffer
b$BFB0 DEFB $01         ; Set to 1 to enable interrupts or 0 to disable
; Routine 0
 $BFB1 DEFW $C2D1       ; Routine
 $BFB3 DEFB $01         ; Enabled
 $BF84 DEFB $01         ; Tick count
 $BF85 DEFB $01         ; Frequency
; Routine 1
 $BFB6 DEFW $BFDC       ; Routine
 $BFB8 DEFB $01         ; Enabled
 $BFB9 DEFB $08         ; Tick count
 $BFBA DEFB $08         ; Frequency
; Routine 2
 $BFBB DEFW $C7AC       ; Routine
 $BFBD DEFB $01         ; Enabled
 $BFBE DEFB $01         ; Tick count
 $BFBE DEFB $FA         ; Frequency
; Routine 3
 $BFC0 DEFW $C875       ; Routine
 $BFC2 DEFB $01         ; Enabled
 $BFC3 DEFB $01         ; Tick count
 $BFC4 DEFB $FA         ; Frequency

; Time update bitfield
;
; Bits 0-5 are set for each digit that needs updating
g$BFC5 DEFB $00

; Current time (in minutes)
g$BFC6 DEFW $0000

; Current time (in digits)
g$BFC8 DEFB $00,$00,$00,$00,$00,$00

; Time digit positions
g$BFCE DEFW $49EA
 $BFD0 DEFW $49E9
 $BFD2 DEFW $49E7
 $BFD4 DEFW $49E6
 $BFD6 DEFW $49E4

; Current time frame
g$BFD8 DEFW $49E3

; Tick counter
;
; When the counter reaches 0, the time updates
g$BFDA DEFB $00

; Time mode
;
; 0 = normal, 1 = fast
g$BFDB DEFB $00

; Interrupt routine 1 - Update time
c$BFDC LD A,($BFDA)  ; Is the timer tick counter (#R$BFDA) zero?
 $BFDF CP $00        ; { Skip the update if it isn't
 $BFE1 JP NZ,$C092   ; }
; The timer needs to tick
 $BFE4 LD HL,$BFC5   ; { Initialize the update flags (#R$BFC5) to zero 
 $BFE7 LD (HL),$00   ; }
 $BFE9 LD A,($BFDB)  ; Get the "fast timer" flag
 $BFEC CP $00        ; Is it normal time?
 $BFEE JR NZ,$C018   ; Jump forward if it isn't
; Normal time, so update seconds
 $BFF0 LD (HL),$01   ; Set bit 0 (second units)
 $BFF2 LD A,($BFCD)  ;
 $BFF5 ADD A,$01     ;
 $BFF7 LD ($BFCD),A  ;
 $BFFA CP $0A        ;
 $BFFC JP NZ,$C08D   ;
 $BFFF LD A,$00      ;
 $C001 LD ($BFCD),A  ;
 $C004 SET 1,(HL)    ; Set bit 1 (second tens)
 $C006 LD A,($BFCC)  ;
 $C009 ADD A,$01     ;
 $C00B LD ($BFCC),A  ;
 $C00E CP $06        ;
 $C010 JP NZ,$C08D   ;
 $C013 LD A,$00      ;
 $C015 LD ($BFCC),A  ;
; Update the minutes
*$C018 SET 2,(HL)    ; Set bit 2 (minutes units)
 $C01A LD A,($BFC7)  ;
 $C01D ADD A,$01     ;
 $C01F LD ($BFC7),A  ;
 $C022 LD A,($BFC6)  ;
 $C025 ADC A,$00     ;
 $C027 LD ($BFC6),A  ;
 $C02A LD A,($BFCB)  ;
 $C02D ADD A,$01     ;
 $C02F LD ($BFCB),A  ;
 $C032 CP $0A        ;
 $C034 JP NZ,$C08D   ;
 $C037 LD A,$00      ;
 $C039 LD ($BFCB),A  ;
 $C03C SET 3,(HL)    ; Set bit 3 (minutes tens)
 $C03E LD A,($BFCA)  ;
 $C041 ADD A,$01     ;
 $C043 LD ($BFCA),A  ;
 $C046 CP $06        ;
 $C048 JP NZ,$C08D   ;
; Update the hours
 $C04B LD A,$00      ;
 $C04D LD ($BFCA),A  ;
 $C050 SET 4,(HL)    ; Set bit 4 (hours units)
 $C052 LD A,($BFC9)  ;
 $C055 ADD A,$01     ;
 $C057 LD ($BFC9),A  ;
 $C05A CP $0A        ;
 $C05C JP Z,$C06F    ;
 $C05F CP $03        ;
 $C061 JP NZ,$C08D   ;
 $C064 LD A,($BFC8)  ;
 $C067 CP $02        ;
 $C069 JP NZ,$C08D   ;
 $C06C JP $C083      ;
*$C06F LD A,$00      ;
 $C071 LD ($BFC9),A  ;
 $C074 SET 5,(HL)    ; Set bit 5 (hours units)
 $C076 LD A,($BFC8)  ;
 $C079 ADD A,$01     ;
 $C07B LD ($BFC8),A  ;
 $C07E CP $02        ;
 $C080 JP NZ,$C08D   ;
*$C083 LD A,$00      ;
 $C085 LD ($BFC9),A  ;
 $C088 LD ($BFC8),A  ;
 $C08B SET 5,(HL)    ; Set bit 5 (hours units)
*$C08D LD A,$08      ; { Reset the tick count to 8
 $C08F LD ($BFDA),A  ; }
; Now draw the time
*$C092 LD A,($BFDA)  ; { Put the tick count in #REGb
 $C095 LD B,A        ; }
 $C096 LD HL,$BFC5   ;
 $C099 BIT 0,(HL)    ;
 $C09B JR Z,$C0AE    ;
 $C09D LD HL,($BFCE) ;
 $C0A0 CALL $C12C    ;
 $C0A3 LD A,($BFCD)  ;
 $C0A6 CALL $C142    ;
 $C0A9 LD A,(HL)     ;
 $C0AA LD HL,($BFCE) ;
 $C0AD LD (HL),A     ;
*$C0AE LD HL,$BFC5   ;
 $C0B1 BIT 1,(HL)    ;
 $C0B3 JR Z,$C0C6    ;
 $C0B5 LD HL,($BFD0) ;
 $C0B8 CALL $C12C    ;
 $C0BB LD A,($BFCC)  ;
 $C0BE CALL $C142    ;
 $C0C1 LD A,(HL)     ;
 $C0C2 LD HL,($BFD0) ;
 $C0C5 LD (HL),A     ;
*$C0C6 LD HL,$BFC5   ;
 $C0C9 BIT 2,(HL)    ;
 $C0CB JR Z,$C0DE    ;
 $C0CD LD HL,($BFD2) ;
 $C0D0 CALL $C12C    ;
 $C0D3 LD A,($BFCB)  ;
 $C0D6 CALL $C142    ;
 $C0D9 LD A,(HL)     ;
 $C0DA LD HL,($BFD2) ;
 $C0DD LD (HL),A     ;
*$C0DE LD HL,$BFC5   ;
 $C0E1 BIT 3,(HL)    ;
 $C0E3 JR Z,$C0F6    ;
 $C0E5 LD HL,($BFD4) ;
 $C0E8 CALL $C12C    ;
 $C0EB LD A,($BFCA)  ;
 $C0EE CALL $C142    ;
 $C0F1 LD A,(HL)     ;
 $C0F2 LD HL,($BFD4) ;
 $C0F5 LD (HL),A     ;
*$C0F6 LD HL,$BFC5   ;
 $C0F9 BIT 4,(HL)    ;
 $C0FB JR Z,$C10E    ;
 $C0FD LD HL,($BFD6) ;
 $C100 CALL $C12C    ;
 $C103 LD A,($BFC9)  ;
 $C106 CALL $C142    ;
 $C109 LD A,(HL)     ;
 $C10A LD HL,($BFD6) ;
 $C10D LD (HL),A     ;
*$C10E LD HL,$BFC5   ;
 $C111 BIT 5,(HL)    ;
 $C113 JR Z,$C126    ;
 $C115 LD HL,($BFD8) ;
 $C118 CALL $C12C    ;
 $C11B LD A,($BFC8)  ;
 $C11E CALL $C142    ;
 $C121 LD A,(HL)     ;
 $C122 LD HL,($BFD8) ;
 $C125 LD (HL),A     ;
*$C126 DEC B         ; { Decrement the tick count and store it
 $C127 LD A,B        ;
 $C128 LD ($BFDA),A  ; }
 $C12B RET           ; All done

; Scroll a timer digit
;
; Used by the routine at #R$BFDC.
;
; HL A pointer to a screen address
c$C12C PUSH BC       ; Store #REGbc
 $C12D DEC H         ; { Move up a row and store it
 $C12E PUSH HL       ; }
 $C12F LD B,$06      ; Six rows to check
*$C131 POP HL        ; Retrieve the base screen address
 $C132 PUSH HL       ; Store it
 $C133 LD A,H        ; { Skip forward 'n' rows based on the row count
 $C134 ADD A,B       ;
 $C135 LD H,A        ; }
 $C136 LD A,(HL)     ; { Copy this row to the one below it
 $C137 INC H         ;
 $C138 LD (HL),A     ; }
 $C139 DEC B         ; Decrement the row count
 $C13A LD A,B        ; { Loop back if there is more to do
 $C13B CP $FF        ;
 $C13D JR NZ,$C131   ; }
 $C13F POP HL        ; Restore the active row
 $C140 POP BC        ; { Restore #REGbc and return
 $C141 RET           ; }

; Get the address for a timer digit graphic
;
; Used by the routine at #R$BFDC.
;
; A Next timer digit
; B Current frame count (8 - 0)
c$C142 ADD A,$7B     ; Convert the digit to a character
 $C144 LD L,A        ; { Put this in #REGhl
 $C145 LD H,$00      ; }
 $C147 ADD HL,HL     ; { Multiply by 8 to get an appropriate offset
 $C148 ADD HL,HL     ;
 $C149 ADD HL,HL     ; }
 $C14A LD DE,($BF68) ; Point #REGde at the standard character set
 $C14E ADD HL,DE     ; Add this base address
 $C14F LD A,B        ; { Put the frame count in #REGde
 $C150 LD E,A        ;
 $C151 LD D,$00      ; }
 $C153 ADD HL,DE     ; Add this to get the correct line in the character set
 $C154 RET           ; All done

; Command history
;
; Each command has a buffer of #N$1D bytes, starting with #N$3E
g$C155 DEFB $01,$11,$08,$21,$2A,$AA,$A1,$08,$AA,$21,$57,$55,$21,$45,$57,$21,$75,$22,$21,$57,$24,$21,$11,$14,$21,$10,$94,$21,$15
 $C172 DEFB $14,$20,$FF,$15,$88,$3F,$2B,$2B,$3F,$04,$AA,$3F,$67,$57,$3F,$62,$55,$3F,$75,$22,$3F,$57,$24,$3F,$19,$14,$3F,$08,$94
 $C18F DEFB $3F,$19,$90,$3F,$01,$15,$08,$21,$2A,$AA,$21,$02,$E4,$21,$57,$75,$21,$45,$75,$21,$77,$22,$21,$57,$24,$21,$11,$08,$21
 $C1AC DEFB $04,$94,$21,$15,$14,$20,$FF,$09,$C8,$3F,$32,$92,$3F,$0C,$A4,$3F,$52,$55,$3F,$75,$55,$3F,$25,$72,$3F,$75,$27,$3F,$11
 $C1C9 DEFB $C8,$3F,$18,$88,$3F,$15,$C8,$3F,$01,$00,$00,$21,$00,$00,$21,$00,$00,$21,$00,$00,$21,$00,$00,$21,$00,$00,$21,$00,$00
 $C1E6 DEFB $21,$00,$00,$21,$00,$00,$21,$00,$00,$20,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $C203 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $C220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $C23D DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $C25A DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Input buffer
g$C277 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C27F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C287 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C28F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C297 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C29F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C2A7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C2AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C2B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C2BF DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Set to 0 to signal the input buffer is ready
g$C2C7 DEFB $00

; Nth index for current command
g$C2C8 DEFB $01

; Game status buffer entry at C2C9
g$C2C9 DEFB $00

; Cursor position in command window
g$C2CA DEFB $03,$12

; Last key pressed
g$C2CC DEFB $00

; Number of frames before the next panel should be drawn
g$C2CD DEFB $05

; Time before keystroke is registered
g$C2CE DEFB $FF

; Set to 1 if there is an active command
g$C2CF DEFB $00

; Last character printed in the command window
g$C2D0 DEFB $00

; Interrupt routine 0 - Update clock and check keyboard input
c$C2D1 LD A,($C2CF)  ; { Is a command running?
 $C2D4 CP $00        ; }
 $C2D6 JP NZ,$C5E0   ; If so, jump forward and handle it
; The keyboard can be read
 $C2D9 CALL $C70F    ; Read a keypress
 $C2DC LD A,($C70D)  ; Get the keypress just read (#R$C70D)
 $C2DF LD DE,($C2CC) ; { Is the key pressed the same as before?
 $C2E3 CP E          ; }
 $C2E4 JR NZ,$C2F3   ; If so, jump forward
 $C2E6 LD A,($C2CE)  ; { Reduce the time to recognise keystroke
 $C2E9 SUB $01       ;
 $C2EB LD ($C2CE),A  ; }
 $C2EE CP $00        ; Is this now zero?
 $C2F0 JP NZ,$C46B   ; If so, jump forward
*$C2F3 LD A,$FF      ; { Reset time to recognise keystroke as #N$FF
 $C2F5 LD ($C2CE),A  ; }
 $C2F8 LD A,($C70D)  ; { Set the last key pressed as this one
 $C2FB LD ($C2CC),A  ; }
 $C2FE CP $00        ; { Jump forward if this is a non-alphanumeric key
 $C300 JP Z,$C46B    ;
 $C303 CP $E3        ;
 $C305 JP Z,$C46B    ;
 $C308 CP $0E        ;
 $C30A JP Z,$C46B    ; }
 $C30D CP $0D        ; { Jump forward if RETURN pressed
 $C30F JP Z,$C5E0    ; }
 $C312 LD A,($C70E)  ; { Was CAPS pressed?
 $C315 CP $27        ; }
 $C317 JP Z,$C520    ; Jump forward if so
 $C31A CP $18        ; Was SYMBOL SHIFT pressed?
 $C31C JP Z,$C6B3    ; Jump forward if so
 $C31F LD A,($C70D)  ; { Print the character of the key pressed and return
 $C322 CALL $C326    ; 
 $C325 RET           ; }

; Draw a character in the command window
;
; Used by the routines at #R$C2D1, #R$C5E0 and #R$C6B3.
;
; A ASCII code of the key pressed
c$C326 LD ($C2D0),A  ; Set the last printed character to this one
 $C329 LD HL,($C2C8) ; Get the most recent command
 $C32C CALL $C475    ; Return with the command data in #REGhl
 $C32F LD A,(HL)     ;
 $C330 CP $3E        ;
 $C332 JP Z,$C34A    ;
 $C335 LD A,($C2D0)  ;
 $C338 LD (HL),A     ;
 $C339 LD BC,($C2CA) ; Get the cursor position
 $C33D PUSH AF       ;
 $C33E CALL $C78C    ; Convert co-ordinates to a screen address
 $C341 POP AF        ;
 $C342 CALL $C75B    ; Draw the character
 $C345 CALL $C34A    ;
 $C348 RET           ;

; Data block at C349
 $C349 DEFB $20

; Routine at C34A
;
; Used by the routine at #R$C326
 $C34A CALL $C42B    ;
 $C34D RET Z         ;
 $C34E LD HL,$C222   ;
 $C351 INC HL        ;
 $C352 RET Z         ;
 $C353 JP NZ,$4BED   ;
 $C356 JP Z,$0CC2    ;
 $C359 LD ($C2CA),BC ; Set the cursor position
 $C35D LD A,C        ;
 $C35E CP $1F        ;
 $C360 JP NZ,$C448   ;
 $C363 LD HL,($C2C8) ;
 $C366 LD L,$00      ;
 $C368 LD ($C2C8),HL ;
 $C36B LD BC,($C2CA) ; { Increase the cursor by 2 characters
 $C36F LD C,$02      ;
 $C371 LD ($C2CA),BC ; }
 $C375 CALL $C3AB    ;
 $C378 RET           ;

; Handle a keypress when CAPS is held
;
; Used by the routine at #R$C520.
c$C379 CALL $C42B    ;
 $C37C LD HL,($C2C8) ;
 $C37F DEC L         ;
 $C380 LD ($C2C8),HL ;
 $C383 LD BC,($C2CA) ;
 $C387 DEC C         ;
 $C388 LD ($C2CA),BC ;
 $C38C LD A,C        ;
 $C38D CP $01        ;
 $C38F JP NZ,$C448   ;
 $C392 LD HL,($C2C8) ;
 $C395 LD L,$1C      ;
 $C397 LD ($C2C8),HL ;
 $C39A LD BC,($C2CA) ;
 $C39E LD C,$1E      ;
 $C3A0 LD ($C2CA),BC ;
 $C3A4 CALL $C402    ;
 $C3A7 RET           ;

; Store the current command in the history
;
; Used by the routine at #R$C520.
c$C3A8 CALL $C42B    ;
; This entry point is used by the routines at #R$C326 and #R$C5E0.
*$C3AB LD HL,($C2C8) ;
 $C3AE LD A,H        ;
 $C3AF CP $09        ;
 $C3B1 JR Z,$C3D5    ;
*$C3B3 INC H         ;
 $C3B4 LD ($C2C8),HL ;
 $C3B7 LD BC,($C2CA) ;
 $C3BB INC B         ;
 $C3BC LD ($C2CA),BC ;
 $C3C0 LD A,B        ;
 $C3C1 CP $16        ;
 $C3C3 JP NZ,$C448   ;
 $C3C6 LD BC,($C2CA) ;
 $C3CA LD B,$15      ;
 $C3CC LD ($C2CA),BC ;
 $C3D0 CALL $C48D    ;
 $C3D3 JR $C448      ;
*$C3D5 LD A,($C70E)  ;
 $C3D8 CP $27        ;
 $C3DA JP Z,$C448    ;
 $C3DD LD HL,$C172   ;
 $C3E0 LD DE,$C155   ;
 $C3E3 LD BC,$0105   ;
 $C3E6 LDIR          ;
 $C3E8 LD HL,$C25A   ;
 $C3EB LD DE,$C25B   ;
 $C3EE LD BC,$001C   ;
 $C3F1 LD (HL),$20   ;
 $C3F3 LDIR          ;
 $C3F5 LD HL,($C2C8) ;
 $C3F8 LD H,$08      ;
 $C3FA LD ($C2C8),HL ;
 $C3FD JR $C3B3      ;

; Routine at C3FF
;
; Used by the routine at #R$C520.
c$C3FF CALL $C42B    ;
; This entry point is used by the routine at #R$C379.
*$C402 LD HL,($C2C8) ;
 $C405 LD A,H        ;
 $C406 CP $00        ;
 $C408 JR Z,$C448    ;
 $C40A DEC H         ;
 $C40B LD ($C2C8),HL ;
 $C40E LD BC,($C2CA) ;
 $C412 DEC B         ;
 $C413 LD ($C2CA),BC ;
 $C417 LD A,B        ;
 $C418 CP $11        ;
 $C41A JR NZ,$C448   ;
 $C41C LD BC,($C2CA) ;
 $C420 LD B,$12      ;
 $C422 LD ($C2CA),BC ;
 $C426 CALL $C4D7    ; 
 $C429 JR $C448      ;

; Routine at C42B
;
; Used by the routines at #R$C379, #R$C3A8, #R$C3FF, #R$C520 and #R$C5E0.
c$C42B LD A,($C349)  ;
 $C42E CP $2B        ;
 $C430 RET Z         ;
 $C431 LD BC,($C2CA) ; Get the cursor position
 $C435 CALL $C78C    ; Convert co-ordinates to a screen address
 $C438 LD HL,($C2C8) ;
 $C43B CALL $C475    ;
 $C43E LD A,(HL)     ;
 $C43F CALL $C75B    ;  Draw the character
 $C442 LD A,$2B      ;
 $C444 LD ($C349),A  ;
 $C447 RET           ;

; Routine at C448
;
; Used by the routines at #R$C326, #R$C379, #R$C3A8, #R$C3FF, #R$C520 and
; #R$C5E0.
c$C448 LD BC,($C2CA) ; Get the cursor position
 $C44C CALL $C78C    ; Convert co-ordinates to a screen address
 $C44F LD HL,$C349   ;
 $C452 LD A,(HL)     ;
 $C453 CALL $C75B    ;  Draw the character
 $C456 LD A,($C349)  ;
 $C459 CP $2B        ;
 $C45B JR NZ,$C466   ;
 $C45D LD HL,($C2C8) ;
 $C460 CALL $C475    ;
 $C463 LD A,(HL)     ;
 $C464 JR $C468      ;
*$C466 LD A,$2B      ;
*$C468 LD ($C349),A  ;
; This entry point is used by the routines at #R$C2D1, #R$C520 and #R$C6B3.
; At this point, no action should be taken on the keyboard
*$C46B LD HL,$C70D   ; { Clear the keypress and shift flags
 $C46E LD A,$00      ;
 $C470 LD ($C70E),A  ;
 $C473 LD (HL),A     ; }
 $C474 RET           ; All done

; Get a pointer to the 'nth' command in history
;
; Used by the routines at #R$C326, #R$C42B, #R$C448, #R$C48D, #R$C4D7, #R$C520
; and #R$C5E0.
;
; H Index of command in history
; HL On exit, points to the command data
c$C475 PUSH HL       ;
 $C476 PUSH HL       ;
 $C477 POP BC        ;
 $C478 LD HL,$C155   ;
 $C47B LD A,B        ;
 $C47C CP $00        ;
 $C47E JR Z,$C486    ;
 $C480 LD DE,$001D   ;
*$C483 ADD HL,DE     ;
 $C484 DJNZ $C483    ;
*$C486 POP DE        ;
 $C487 LD D,$00      ;
 $C489 ADD HL,DE     ;
 $C48A RET           ;

; Data block at C48B
b$C48B DEFB $00,$00

; Routine at C48D
;
; Used by the routine at #R$C3A8.
c$C48D LD BC,$1302   ;
*$C490 PUSH BC       ;
 $C491 CALL $C78C    ; Convert co-ordinates to a screen address
 $C494 LD HL,($BF6A) ;
 $C497 LD DE,$0020   ;
 $C49A SBC HL,DE     ;
 $C49C EX DE,HL      ;
 $C49D LD HL,($BF6A) ;
 $C4A0 LD A,$08      ;
*$C4A2 LD ($C48B),A  ;
 $C4A5 LD BC,$001D   ;
 $C4A8 PUSH HL       ;
 $C4A9 PUSH DE       ;
 $C4AA LDIR          ;
 $C4AC POP DE        ;
 $C4AD POP HL        ;
 $C4AE INC H         ;
 $C4AF INC D         ;
 $C4B0 LD A,($C48B)  ;
 $C4B3 SUB $01       ;
 $C4B5 CP $00        ;
 $C4B7 JR NZ,$C4A2   ;
 $C4B9 POP BC        ;
 $C4BA INC B         ;
 $C4BB LD A,B        ;
 $C4BC CP $16        ;
 $C4BE JR Z,$C4C2    ;
 $C4C0 JR $C490      ;
*$C4C2 LD HL,($C2C8) ;
 $C4C5 LD L,$00      ;
 $C4C7 CALL $C475    ;
 $C4CA PUSH HL       ;
 $C4CB POP IY        ;
 $C4CD LD BC,$1502   ;
 $C4D0 CALL $C78C    ; Convert co-ordinates to a screen address
 $C4D3 CALL $C77D    ;
 $C4D6 RET           ;

; Routine at C4D7
;
; Used by the routine at #R$C3FF.
c$C4D7 LD BC,$1402   ;
*$C4DA PUSH BC       ;
 $C4DB CALL $C78C    ; Convert co-ordinates to a screen address
 $C4DE LD HL,($BF6A) ;
 $C4E1 LD DE,$0020   ;
 $C4E4 ADD HL,DE     ;
 $C4E5 EX DE,HL      ;
 $C4E6 LD HL,($BF6A) ;
 $C4E9 LD A,$08      ;
*$C4EB LD ($C48B),A  ;
 $C4EE LD BC,$001D   ;
 $C4F1 PUSH HL       ;
 $C4F2 PUSH DE       ;
 $C4F3 LDIR          ;
 $C4F5 POP DE        ;
 $C4F6 POP HL        ;
 $C4F7 INC H         ;
 $C4F8 INC D         ;
 $C4F9 LD A,($C48B)  ;
 $C4FC SUB $01       ;
 $C4FE CP $00        ;
 $C500 JR NZ,$C4EB   ;
 $C502 POP BC        ;
 $C503 DEC B         ;
 $C504 LD A,B        ;
 $C505 CP $11        ;
 $C507 JR Z,$C50B    ;
 $C509 JR $C4DA      ;
*$C50B LD HL,($C2C8) ;
 $C50E LD L,$00      ;
 $C510 CALL $C475    ;
 $C513 PUSH HL       ;
 $C514 POP IY        ;
 $C516 LD BC,$1202   ;
 $C519 CALL $C78C    ; Convert co-ordinates to a screen address
 $C51C CALL $C77D    ;
 $C51F RET           ;

; Handle a keypress when CAPS SHIFT is held
;
; Used by the routine at #R$C2D1.
;
; HL Points to the last key pressed
c$C520 LD A,$08      ;
 $C522 LD ($C2CE),A  ;
 $C525 LD A,(HL)     ;
 $C526 CP $30        ;
 $C528 JP Z,$C54C    ;
 $C52B CP $35        ;
 $C52D JP Z,$C379    ;
 $C530 CP $36        ;
 $C532 JP Z,$C3A8    ;
 $C535 CP $37        ;
 $C537 JP Z,$C3FF    ;
 $C53A CP $38        ;
 $C53C JP Z,$C34A    ;
 $C53F CP $49        ;
 $C541 JP Z,$C576    ;
 $C544 LD A,$FF      ;
 $C546 LD ($C2CE),A  ;
 $C549 JP $C46B      ;
*$C54C CALL $C379    ;
 $C54F LD HL,($C2C8) ;
 $C552 CALL $C475    ;
 $C555 LD A,(HL)     ;
 $C556 CP $3E        ;
 $C558 JR NZ,$C55F   ;
 $C55A CALL $C34A    ;
 $C55D JR $C56D      ;
*$C55F LD (HL),$20   ;
 $C561 LD BC,($C2CA) ; Get the cursor position
 $C565 CALL $C78C    ; Convert co-ordinates to a screen address
 $C568 LD A,$20      ; { Draw a space
 $C56A CALL $C75B    ; }
*$C56D LD HL,$C349   ;
 $C570 LD (HL),$2B   ;
 $C572 CALL $C448    ;
 $C575 RET           ;
*$C576 CALL $C42B    ;
 $C579 LD HL,($C2C8) ;
 $C57C CALL $C475    ;
 $C57F PUSH HL       ;
 $C580 LD HL,($C2C8) ;
 $C583 LD L,$1C      ;
 $C585 CALL $C475    ;
 $C588 POP BC        ;
 $C589 SBC HL,BC     ;
 $C58B LD A,L        ;
 $C58C LD C,A        ;
 $C58D LD B,$00      ;
 $C58F PUSH BC       ;
 $C590 LD HL,($C2C8) ;
 $C593 LD L,$1C      ;
 $C595 CALL $C475    ;
 $C598 PUSH HL       ;
 $C599 POP DE        ;
 $C59A DEC HL        ;
 $C59B POP BC        ;
 $C59C PUSH BC       ;
 $C59D LDDR          ;
 $C59F LD HL,($C2C8) ;
 $C5A2 CALL $C475    ;
 $C5A5 LD (HL),$20   ;
 $C5A7 LD BC,($C2CA) ; Get the cursor position
 $C5AB LD C,$1D      ;
 $C5AD CALL $C78C    ; Convert co-ordinates to a screen address
 $C5B0 LD HL,($BF6A) ;
 $C5B3 PUSH HL       ;
 $C5B4 POP DE        ;
 $C5B5 INC DE        ;
 $C5B6 POP BC        ;
 $C5B7 INC BC        ;
 $C5B8 LD A,$08      ;
*$C5BA LD ($C48B),A  ;
 $C5BD PUSH BC       ;
 $C5BE PUSH HL       ;
 $C5BF PUSH DE       ;
 $C5C0 LDDR          ;
 $C5C2 POP DE        ;
 $C5C3 POP HL        ;
 $C5C4 POP BC        ;
 $C5C5 INC H         ;
 $C5C6 INC D         ;
 $C5C7 LD A,($C48B)  ;
 $C5CA SUB $01       ;
 $C5CC CP $00        ;
 $C5CE JR NZ,$C5BA   ;
 $C5D0 LD BC,($C2CA) ; Get the cursor position
 $C5D4 CALL $C78C    ; Convert co-ordinates to a screen address
 $C5D7 LD A,$20      ; { Draw a space
 $C5D9 CALL $C75B    ; }
 $C5DC CALL $C448    ;
 $C5DF RET           ;

; Process a command after ENTER has been pressed
;
; This routine selects the appropriate command in history (at #R$C155)
; .
; and copies it to the working buffer at #R$C277
c$C5E0 LD A,($C2C7)  ;
 $C5E3 CP $00        ;
 $C5E5 JR Z,$C5ED    ;
 $C5E7 LD A,$01      ;
 $C5E9 LD ($C2CF),A  ;
 $C5EC RET           ;
*$C5ED LD A,$00      ;
 $C5EF LD ($C2CF),A  ;
 $C5F2 LD HL,($C2C8) ;
 $C5F5 CALL $C475    ;
*$C5F8 DEC HL        ;
 $C5F9 LD A,(HL)     ;
 $C5FA CP $3E        ;
 $C5FC JR NZ,$C5F8   ;
 $C5FE INC HL        ;
 $C5FF PUSH HL       ;
 $C600 LD HL,($C2C8) ;
 $C603 CALL $C475    ;
 $C606 POP DE        ;
 $C607 SBC HL,DE     ;
 $C609 PUSH HL       ;
 $C60A POP BC        ;
 $C60B LD A,C        ;
 $C60C CP $64        ;
 $C60E JP NC,$C448   ;
 $C611 CP $00        ;
 $C613 JP Z,$C448    ;
 $C616 PUSH DE       ;
 $C617 POP HL        ;
 $C618 LD DE,$C277   ; Set the destination to the input buffer #R$C277
 $C61B LDIR          ;
 $C61D LD A,$0D      ;
 $C61F LD (DE),A     ;
 $C620 CALL $C42B    ;
 $C623 LD HL,($C2C8) ;
 $C626 CALL $C475    ;
 $C629 LD A,$2E      ;
 $C62B LD (HL),A     ;
 $C62C LD BC,($C2CA) ; Get the cursor position
 $C630 CALL $C78C    ; Convert co-ordinates to a screen address
 $C633 LD A,$2E      ; { Draw a full stop
 $C635 CALL $C75B    ; }
 $C638 LD HL,($C2C8) ;
 $C63B LD L,$00      ;
 $C63D LD ($C2C8),HL ;
 $C640 LD BC,($C2CA) ; { Move the cursor forward two spaces
 $C644 LD C,$02      ;
 $C646 LD ($C2CA),BC ; }
 $C64A CALL $C3AB    ;
 $C64D LD A,$3E      ;
 $C64F CALL $C326    ;
 $C652 LD A,$FF      ;
 $C654 LD ($C2C7),A  ;
 $C657 LD A,$00      ;
 $C659 LD ($C2CD),A  ;
 $C65C RET           ;

; Shortcut command names
t$C65D DEFM "GET ",$00
 $C662 DEFM "DROP ",$00
 $C668 DEFM "SAY \"",$00
 $C66E DEFM "KWAH\"",$00
 $C674 DEFM "EXAMINE ",$00
 $C67D DEFM "WAIT ",$00
 $C683 DEFM "UNTIL ",$00
 $C68A DEFM "FLY TO ",$00
 $C692 DEFM "STORE",$00
 $C698 DEFM "RECALL",$00

; Shortcut command jump table
b$C69F DEFW $C698
 $C6A1 DEFW $C65D
 $C6A3 DEFW $C662
 $C6A5 DEFW $C668
 $C6A7 DEFW $C66E
 $C6A9 DEFW $C674
 $C6AB DEFW $C67D
 $C6AD DEFW $C683
 $C6AF DEFW $C68A
 $C6B1 DEFW $C692

; Handle a keypress when SYMBOL SHIFT is held
;
; Used by the routine at #R$C2D1.
c$C6B3 LD A,($C70D)  ; Get the most recent keypress (#R$C70D)
 $C6B6 CP $2F        ; { Skip forward if it isn't a number
 $C6B8 JR C,$C6DF    ;
 $C6BA CP $3A        ;
 $C6BC JR NC,$C6DF   ; }
; SYMBOL SHIFT + a number selects a shortcut
 $C6BE SUB $30       ; Convert into a numeric index
 $C6C0 RLA           ; Double to get a word offset
 $C6C1 LD HL,$C69F   ; Point #REGhl at the shortcut buffer (#R$C69F)
 $C6C4 LD C,A        ; { Add the appropriate offset
 $C6C5 LD B,$00      ;
 $C6C7 ADD HL,BC     ; }
 $C6C8 LD E,(HL)     ; { Put the address of the shortcut text in #REGiy
 $C6C9 INC HL        ;
 $C6CA LD D,(HL)     ;
 $C6CB PUSH DE       ;
 $C6CC POP IY        ; }
; Copy the shortcut text into the buffer
*$C6CE LD A,(IY+$00) ; Get the next character
 $C6D1 CP $00        ; { Return if it is zero
 $C6D3 RET Z         ; }
 $C6D4 PUSH IY       ; { Process the character
 $C6D6 CALL $C326    ;
 $C6D9 POP IY        ; }
 $C6DB INC IY        ; { Move to handle the next one
 $C6DD JR $C6CE      ; }
; Handle SYMBOL SHIFT + non-numeric key
*$C6DF LD A,($C70D)  ; Get the most recent keypress (#R$C70D)
 $C6E2 CP $50        ; { Handle P
 $C6E4 JR Z,$C6F5    ; }
 $C6E6 CP $4E        ; { Handle N
 $C6E8 JR Z,$C6FB    ; }
 $C6EA CP $4D        ; { Handle M
 $C6EC JR Z,$C701    ; }
 $C6EE CP $5A        ; { Handle Z
 $C6F0 JR Z,$C707    ; }
 $C6F2 JP $C46B      ; Any other key is "no action"
; SYMBOL_SHIFT + P
*$C6F5 LD A,$22      ; { Process a quote
 $C6F7 CALL $C326    ;
 $C6FA RET           ; }
; SYMBOL_SHIFT + N
*$C6FB LD A,$2C      ; { Process a comma
 $C6FD CALL $C326    ;
 $C700 RET           ; }
; SYMBOL_SHIFT + M
*$C701 LD A,$2E      ; { Process a dot
 $C703 CALL $C326    ;
 $C706 RET           ; }
; SYMBOL_SHIFT + Z
*$C707 LD A,$3A      ; { Process a colon
 $C709 CALL $C326    ;
 $C70C RET           ; }

; Most recent key pressed
g$C70D DEFB $00

; Most recent shift key held
g$C70E DEFB $00

; Read a keypress and convert to a character
;
; Used by the routines at #R$C2D1, #R$DB34 and #R$F241.
; On return, ASCII code for the key pressed is in #R$C70D and shift? in #R$C70E
c$C70F CALL $C72A    ; Scan the keyboard
 $C712 LD A,E        ; { Was a key pressed?
 $C713 CP $FF        ; }
 $C715 RET Z         ; Return if not
 $C716 LD HL,$0205   ; Point #REGhl at the ROM key tables
 $C719 ADD A,L       ; { Add the key offset
 $C71A LD L,A        ; }
 $C71B LD A,($C70D)  ; Get the shift state
 $C71E CP $00        ; 
 $C720 RET NZ        ;
 $C721 LD A,(HL)     ; { Store the character
 $C722 LD ($C70D),A  ; }
 $C725 LD A,D        ; { Store the shift state
 $C726 LD ($C70E),A  ; }
 $C729 RET           ;

; Read a keypress directly
;
; Used by the routine at #R$C70F.
;
; D On return, has the shift state ???
; E On return, has the key that was pressed, or #N$FF for none
c$C72A LD L,$2F      ; Set the initial result to #N$2F
 $C72C LD DE,$FFFF   ; Initialise #REGde to no keys pressed
 $C72F LD BC,$FEFE   ; Start with bottom left of the keyboard
*$C732 IN A,(C)      ; Read the keys
 $C734 CPL           ; Flip the bits so keys pressed are bits set
 $C735 AND $1F       ; Ignore irrelevant bits
 $C737 JR Z,$C747    ; Jump forward if no keys pressed
 $C739 LD H,A        ; Put the keys pressed in #REGh
 $C73A LD A,L        ; Put the current result in #REGa
*$C73B INC D         ; { Return if keys pressed
 $C73C RET NZ        ; }
*$C73D SUB $08       ; 
 $C73F SRL H         ; { Loop until a set bit is found
 $C741 JR NC,$C73D   ; }
 $C743 LD D,E        ; Set the shift state (?)
 $C744 LD E,A        ; Set the new 
 $C745 JR NZ,$C73B   ; Jump back if more bits to read
; Read the next row
*$C747 DEC L         ;
 $C748 RLC B         ; Shift to the next section of keyboard, clockwise
 $C74A JR C,$C732    ; Loop back if there are more rows to read.
                     ; Carry will not be set on the last row (#N$7FFE)
 $C74C LD A,D        ; Get the shift state
 $C74D INC A         ; { Return if it is #N$FF
 $C74E RET Z         ; }
 $C74F CP $28        ; Was CAPS pressed?
 $C751 RET Z         ; Return if so
 $C752 CP $19        ; Was SYMBOL SHIFT pressed?
 $C754 RET Z         ; Return if so
 $C755 LD A,E        ;
 $C756 LD E,D        ;
 $C757 LD D,A        ;
 $C758 CP $18        ;
 $C75A RET           ;

; Draw a character
;
; Used by the routines at #R$C326, #R$C42B, #R$C448, #R$C520,
; #R$C5E0, #R$C77D, #R$C875, #R$CA65, #R$CAA8, #R$E07B and #R$E08B.
; . 
; On entry, #R$BF68 holds the base address of the character set,
; .
; and #R$BF6A holds the screen address to draw to
;
; A ASCII code of the character to draw
c$C75B LD L,A        ; { Put the character in #REGhl
 $C75C LD H,$00      ; }
 $C75E ADD HL,HL     ; { Multiply by 8 to get the correct offset size
 $C75F ADD HL,HL     ;
 $C760 ADD HL,HL     ; }
 $C761 LD DE,($BF68) ; { Add the base address of the character set
 $C765 ADD HL,DE     ; }
 $C766 LD DE,($BF6A) ; Put the screen address to draw to in #REGde
 $C76A LD B,$08      ; 8 lines to draw
*$C76C LD A,(HL)     ; { Copy the next line
 $C76D LD (DE),A     ; }
 $C76E INC HL        ; Move to the next part of the character
 $C76F INC D         ; Move down a line
 $C770 DJNZ $C76C    ; Loop until all lines are drawn
 $C772 LD HL,$BF6A   ; { Set #R$BF6A to point to the next place
 $C775 INC (HL)      ; on screen to draw
 $C776 RET NZ        ;
 $C777 INC HL        ;
 $C778 LD A,(HL)     ;
 $C779 ADD A,$08     ;
 $C77B LD (HL),A     ; 
 $C77C RET           ; }

; Print a string
;
; Used by the routines at #R$C48D and #R$C4D7.
;
; IY Pointer to string
c$C77D LD B,$1D      ; #N$1D characters to draw
*$C77F LD A,(IY+$00) ; Get the next character
 $C782 PUSH BC       ; Store #REGbc
 $C783 CALL $C75B    ; Draw the character
 $C786 POP BC        ; Restore #REGbc
 $C787 INC IY        ; Move to the next character
 $C789 DJNZ $C77F    ; { Loop until all characters done
 $C78B RET           ; }

; Get the screen and attribute addresses for a co-ordinate
;
; Used by the routines at #R$C326, #R$C42B, #R$C448, #R$C48D, #R$C4D7, #R$C520,
; #R$C5E0, #R$C875, #R$CA65, #R$CAA8, #R$E08B, #R$ED00, #R$ED4C, #R$F3C5 and
; #R$FD93.
;
; B Y co-ordinate to look up
; C X co-ordinate to look up
; HL On exit, holds the screen address to draw
; DE On exit, holds the attribute address to draw
; A On exit, holds the contents of the attribute found
c$C78C LD A,B        ; Put the Y co-ordinate in #REGa
 $C78D AND $18       ; { Extract bits 3 and 4 and put them in #REGh
 $C78F LD H,A        ; }
 $C790 SET 6,H       ; Ensure #REGh is in range of the screen area
 $C792 RRCA          ; { Divide by 8 to get the attribute offset
 $C793 RRCA          ;
 $C794 RRCA          ; }
 $C795 OR $58        ; Ensure the address is in range of the attribute area
 $C797 LD D,A        ; Set this in #REGd
 $C798 LD A,B        ; Restore the Y co-ordinate in #REGa
 $C799 AND $07       ; Extract the bottom 3 bits
 $C79B RRCA          ; { Rotate these round to be the top three, representing
 $C79C RRCA          ; the address of the start of a row 
 $C79D RRCA          ; }
 $C79E ADD A,C       ; Add the X co-ordinate
 $C79F LD L,A        ; Store this in #REGl (for the screen)
 $C7A0 LD E,A        ; Store this in #REGe (for the attribute)
 $C7A1 LD A,(DE)     ; Put the attribute found in #REGa
 $C7A2 LD ($BF6A),HL ; Put the screen address found in #R$BF6A
 $C7A5 RET           ; All done

; Co-ordinates to draw the next status bar
g$C7A6 DEFW $7C82

; Last updated energy
g$C7A8 DEFW $0000

; Last updated popularity
g$C7AA DEFW $0000

; Interrupt routine 2 - Update energy and popularity
;
; First update the energy
c$C7AC LD IX,($80EE) ; Point #REGix at the flags table (#R$81FC)
 $C7B0 LD A,(IX+$09) ; Put the energy (#R$8205) in #REGa
 $C7B3 LD BC,($C7A9) ; Get the last updated energy
 $C7B7 CP C          ; Is it the same?
 $C7B8 JR Z,$C7C8    ; If so, no work to do, so jump forward
 $C7BA LD ($C7A9),A  ; { Otherwise set the new value
 $C7BD LD ($C7A8),A  ; }
 $C7C0 LD A,$79      ; { Set the Y co-ordinate to #N$79 
 $C7C2 LD ($C7A6),A  ; }
 $C7C5 CALL $C7E4    ; Redraw the bar
; Now update the popularity
*$C7C8 LD IX,($80EE) ; Point #REGix at the flags table (#R$81FC)
 $C7CC LD A,(IX+$05) ; Put the popularity (#R$8201) in #REGa
 $C7CF LD BC,($C7AA) ; Get the last updated popularity
 $C7D3 CP C          ; Is it the same?
 $C7D4 RET Z         ; If so, no work to do, so jump forward
 $C7D5 LD ($C7AA),A  ; { Otherwise set the new value
 $C7D8 LD ($C7A8),A  ; }
 $C7DB LD A,$81      ; { Set the Y co-ordinate to #N$81 
 $C7DD LD ($C7A6),A  ; }
 $C7E0 CALL $C7E4    ; Redraw the bar
; All done
 $C7E3 RET           ; All done

; Draw the energy or popularity bar
;
; Used by the routine at #R$C7AC.
; The Y co-ordinate at #R$C7A6 is set before calling this
c$C7E4 LD A,$84      ; { Set the X co-ordinate to #N$84
 $C7E6 LD ($C7A7),A  ; }
 $C7E9 CALL $C804    ; Draw the status bar
 $C7EC LD A,$08      ;
 $C7EE LD ($C7AB),A  ;
 $C7F1 LD HL,($C7A6) ;
 $C7F4 LD A,$C8      ;
 $C7F6 SUB H         ;
 $C7F7 RRA           ;
 $C7F8 LD ($C7A8),A  ;
 $C7FB CALL $C804    ; Draw the status bar
 $C7FE LD A,$00      ;
 $C800 LD ($C7AB),A  ;
 $C803 RET           ;

; Draw a status bar
;
; Used by the routine at #R$C7E4.
; On entry, #R$C7A6 contains the location to draw, and #R$C7A8 contains the
; length
c$C804 LD DE,($C7A8) ; Put the length in #REGde
 $C808 LD A,E        ; { Is it zero?
 $C809 CP $00        ; }
 $C80B RET Z         ; If so, return as there's nothing to do
*$C80C LD HL,($C7A6) ;
 $C80F LD BC,($C7A6) ;
 $C813 LD A,C        ;
 $C814 ADD A,$05     ;
 $C816 LD C,A        ;
 $C817 PUSH DE       ; Store #REGde
 $C818 CALL $C82D    ; Draw a line
 $C81B POP DE        ; Restore #REGde
 $C81C DEC E         ;
 $C81D LD A,E        ;
 $C81E CP $00        ;
 $C820 RET Z         ;
 $C821 LD HL,($C7A6) ;
 $C824 LD A,H        ;
 $C825 ADD A,$02     ;
 $C827 LD H,A        ;
 $C828 LD ($C7A6),HL ;
 $C82B JR $C80C      ;

; Draw a line of a status bar
;
; Used by the routines at #R$C804 and #R$FD93.
;
; C Length
; H Y co-ordinate
; L X co-ordinate
c$C82D PUSH BC       ; Remember #REGbc
 $C82E CALL $C838    ; Draw the bar element
 $C831 POP BC        ; Restore #REGbc
 $C832 INC L         ; Move along one column
 $C833 LD A,C        ; { Is this the last column?
 $C834 CP L          ; }
 $C835 JR NZ,$C82D   ; If not, loop back to draw more
 $C837 RET           ; Otherwise return

; Draw an element of a bar on screen
;
; Used by the routine at #R$C82D.
;
; H Y co-ordinate
; L X co-ordinate
c$C838 LD A,L        ;
 $C839 AND $C0       ;
 $C83B RRA           ;
 $C83C SCF           ;
 $C83D RRA           ;
 $C83E RRCA          ;
 $C83F XOR L         ;
 $C840 AND $F8       ;
 $C842 XOR L         ;
 $C843 LD D,A        ;
 $C844 LD A,H        ;
 $C845 RLCA          ;
 $C846 RLCA          ;
 $C847 RLCA          ;
 $C848 XOR L         ;
 $C849 AND $C7       ;
 $C84B XOR L         ;
 $C84C RLCA          ;
 $C84D RLCA          ;
 $C84E LD E,A        ;
 $C84F LD A,H        ;
 $C850 AND $07       ;
 $C852 LD B,A        ;
 $C853 INC B         ;
 $C854 LD A,$FE      ;
*$C856 RRCA          ;
 $C857 DJNZ $C856    ;
 $C859 LD B,A        ;
 $C85A LD A,($C7AB)  ;
 $C85D LD C,A        ;
 $C85E LD A,(DE)     ;
 $C85F BIT 1,C       ;
 $C861 JR NZ,$C864   ;
 $C863 AND B         ;
*$C864 BIT 3,C       ;
 $C866 JR NZ,$C86A   ;
 $C868 XOR B         ;
 $C869 CPL           ;
*$C86A LD (DE),A     ;
 $C86B RET           ;

; Current character graphic
b$C86C DEFB $01

; Character graphic - Kevin
b$C86D DEFB $23,$24,$25,$26

; Character graphic - Redhawk
b$C871 DEFB $5B,$5C,$5D,$5E

; Interrupt routine 3 - Update current character
c$C875 LD IX,($80EE) ; Point #REGix at the flags (#R$80EE) = #R$81FC
 $C879 LD A,(IX+$01) ; Get the current character (#R$81FD)
 $C87C LD HL,$C86C   ; { Does it match the last updated character? (#R$C86C)
 $C87F CP (HL)       ; }
 $C880 RET Z         ; Return if it does, doesn't need updating
; A character needs updating
 $C881 LD ($C86C),A  ; Set the last updated character?
 $C884 LD IY,$C86D   ; Point #REGiy at Kevin's graphic (#R$C86D)
 $C888 LD HL,$8113   ; Point #REGhl at the offset table
 $C88B CP (HL)       ; If this matches 
 $C88C JR Z,$C892    ;
 $C88E LD IY,$C871   ; Point #REGiy at Redhawk's graphic (#R$C871)
*$C892 LD BC,$0F1C   ; Set the co-ordinate to #N$0F, #N$1C
 $C895 CALL $C78C    ; Convert this to a screen address
 $C898 LD A,(IY+$00) ; { Draw the first character
 $C89B CALL $C75B    ; }
 $C89E LD A,(IY+$01) ; { Draw the second character
 $C8A1 CALL $C75B    ; }
 $C8A4 LD BC,$101C   ; Set the co-ordinate to #N$10, #N$1C
 $C8A7 CALL $C78C    ; Convert this to a screen address
 $C8AA LD A,(IY+$02) ; { Draw the third character
 $C8AD CALL $C75B    ; }
 $C8B0 LD A,(IY+$03) ; { Draw the fourth character
 $C8B3 CALL $C75B    ; }
 $C8B6 RET           ; All done

; Data block at C8B7
b$C8B7 DEFB $00,$00,$00

; Data block at C8BA
b$C8BA DEFB $00

; ID of last text table entry found
b$C8BB DEFB $00

; Data block at C8BC
b$C8BC DEFB $00,$00

; Data extracted from a table
;
; Used by the routine at #R$D6C0
g$C8BE DEFB $00,00,$00,$00

; Graphics updating tab;e
g$C8C2 DEFW $0000

; Graphics updating pointer
g$C8C4 DEFW $0000

; Game status buffer entry at C8C6
g$C8C6 DEFB $00,$00

; Game status buffer entry at C8C8
g$C8C8 DEFB $00,$00,$00

; Temporary storage for expanding macros
g$C8CB DEFB $00

; Current offset of the input buffer being processed
g$C8CC DEFW $0000

; Set to 1 to mark end of string (?)
g$C8CE DEFB $00

; Number of characters left to process in the current text entry
g$C8CF DEFB $0D

; Pointer to next command text to check
g$C8D0 DEFW $0000

; Pointer to current text being macro substited
g$C8D2 DEFW $0000

; Pointer to previous text being macro substituted
b$C8D4 DEFW $0000

; Current parsed command
g$C8D6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C8DE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C8E6 DEFB $00,$00,$00

; First letter of last command in each text table
;
; This allows fast lookup
b$C8E9 DEFB $00,$00,$00,$00,$00,$00,$00

; Last buffer entry searched for
g$C8F0 DEFB $00

; Last data table type searched for
g$C8F1 DEFB $00

; Last index in the data table searched for
g$C8F2 DEFB $00

; Data block at C8F3
b$C8F3 DEFW $5640
 $C8F5 DEFW $4F4C
 $C8F7 DEFW $4543
 $C8F9 DEFW $4C56
 $C8FB DEFW $434F
 $C8FD DEFW $4645

; Pointer to the save game buffer
;
; Used by the routines at #R$CA08, #R$CA11 and #R$CA1A
w$C8FF DEFW $0000

; Pointer to callback routine after handling the save game buffer
; 
; Used by the routines at #R$C96A and #R$C99B
g$C901 DEFW $0000

; Copy of BC for callback routine
;
; Used by the routine at #R$C9CD
g$C903 DEFW $0000

; Number of times per frame to run a callback routine
g$C905 DEFB $00

; Initialize game flags
;
; Used by the routine at #R$E186.
c$C906 LD A,($8114)  ;
 $C909 LD HL,$8113   ;
 $C90C SUB (HL)      ;
 $C90D LD ($C8C8),A  ;
 $C910 LD A,($8113)  ;
 $C913 LD HL,$8112   ;
 $C916 SUB (HL)      ;
 $C917 LD ($C8C9),A  ;
 $C91A LD HL,$C9D5   ; Set the callback routine to #R$C9D5
 $C91D JP $C96A      ; Do the callback on data

; Dump out game flags to the save buffer
;
; Used by the routines at #R$DD56, #R$DD65 and #R$E15A.
c$C920 CALL $CA1A    ; Initialize the game data pointer
 $C923 LD A,($E146)  ; { Dump out #R$E146 ???
 $C926 CALL $CA08    ; 
 $C929 LD A,($E147)  ;
 $C92C CALL $CA08    ; }
 $C92F LD B,$08      ; Set 8 bytes to dump
 $C931 LD IX,$BFCD   ; Point #REGix to the end of the time buffer (#R$BFC8)
*$C935 LD A,(IX+$00) ; { Set the next byte
 $C938 CALL $CA08    ; }
 $C93B DEC IX        ; Move backwards to the next byte
 $C93D DJNZ $C935    ; Loop until all bytes dumped
 $C93F LD HL,$C9EE   ; Set the callback routine to #R$C9EE
 $C942 JP $C96A      ; Do the callback on data

; Read game flags from the save buffer
;
; Used by the routine at #R$E1B6.
c$C945 CALL $CA1A    ; Initialize the game data pointer
 $C948 CALL $CA11    ; { Read in #R$E146 ???
 $C94B LD ($E146),A  ;
 $C94E CALL $CA11    ;
 $C951 LD ($E147),A  ; }
 $C954 LD B,$08      ; Set 8 bytes to read
 $C956 LD IX,$BFCD   ; Point #REGix to the end of the time buffer (#R$BFC8))
*$C95A CALL $CA11    ; { Read the byte
 $C95D LD (IX+$00),A ; }
 $C960 DEC IX        ; Move backwards to the next byte
 $C962 DJNZ $C95A    ; Loop until all bytes read
 $C964 LD HL,$C9FB   ; Set the callback routine to #R$C9FB
 $C967 JP $C96A      ; Do the callback on data

; Routine after handling game flags
;
; Used by the routines at #R$C906, #R$C920 and #R$C945.
;
; HL Pointer to callback routine
c$C96A LD ($C901),HL ; Put the callback routine in #R$C901
 $C96D LD A,$01      ; { Set the callback to happen once (#R$C905)
 $C96F LD ($C905),A  ; }
 $C972 LD C,$08      ; Select data table 08 (user flags)
 $C974 LD B,$08      ; Select value 8
 $C976 CALL $C99B    ; Run the callback on this data
 $C979 LD B,$0D      ; Select value #N$0D
 $C97B LD C,$10      ; Select data table #N$10
 $C97D CALL $C99B    ; Run the callback on this data
 $C980 LD B,$0E      ; Select value #N$0E
 $C982 LD C,$11      ; Select data table #N$11
 $C984 CALL $C99B    ; Run the callback on this data
 $C987 LD B,$0E      ; Select value #N$0E
 $C989 LD C,$12      ; Select data table #N$12
 $C98B CALL $C99B    ; Run the callback on this data
 $C98E LD A,$03      ; { Set the callback to happen three times (#R$C905)
 $C990 LD ($C905),A  ; }
 $C993 LD B,$0E      ; Select value #N$0E
 $C995 LD C,$13      ; Select data table #N$13
 $C997 CALL $C99B    ; Run the callback on this data
 $C99A RET           ;

; Run a callback routine on table data
;
; Used by the routine at #R$C96A.
;
; B Data table ID
; C Data table type
c$C99B PUSH BC       ; { Transfer #REGbc to #REGaf 
 $C99C POP AF        ; }
 $C99D LD E,A        ; { Put the index in #REGde
 $C99E LD D,$00      ; }
 $C9A0 LD HL,$8106   ; { Add the base address of the offset difference table (#R$8106)
 $C9A3 ADD HL,DE     ; }
 $C9A4 LD A,(HL)     ; Get the value here
 $C9A5 DEC HL        ; { Subtract the value from the previous entry
 $C9A6 SUB (HL)      ; }
 $C9A7 LD ($C8C6),A  ; Store this as the table index
 $C9AA LD A,C        ; { Store the table type ID
 $C9AB LD ($C8C7),A  ; }
*$C9AE LD HL,$C8C6   ;
 $C9B1 DEC (HL)      ;
 $C9B2 RET M         ; Return if less than zero
 $C9B3 LD A,($C8C6)  ; { Put the current character graphic in #REGb 
 $C9B6 LD B,A        ; }
 $C9B7 LD A,($C8C7)  ; { Put the data table ID in #REGc
 $C9BA LD C,A        ; }
 $C9BB CALL $D6C0    ; Get the data
 $C9BE LD A,($C905)  ; { Put the number of times to call back in #REGc.
 $C9C1 LD C,A        ; }
 $C9C2 LD B,$00      ; 
*$C9C4 CALL $C9CD    ; Do the callback
 $C9C7 DEC C         ; Decrement the count
 $C9C8 JP P,$C9C4    ; Loop while it is 0 or greater
 $C9CB JR $C9AE      ; Otherwise jump back to run the next frame

; Routine at C9CD
;
; Used by the routine at #R$C99B
;
c$C9CD LD ($C903),BC ; Copy #REGbc to #R$C903
 $C9D1 LD HL,($C901) ; { Jump to the callback routine stored at #R$C901
 $C9D4 JP (HL)       ; }

; Callback routine (???)
;
; Used by the routine at #R$C906
c$C9D5 LD A,($C905)  ;
 $C9D8 CP $03        ;
 $C9DA JR Z,$C9E7    ;
 $C9DC LD HL,$C8C0   ;
 $C9DF ADD HL,BC     ;
 $C9E0 LD A,(HL)     ;
 $C9E1 LD HL,($C8C2) ;
 $C9E4 ADD HL,BC     ;
 $C9E5 LD (HL),A     ;
 $C9E6 RET           ;
*$C9E7 LD A,$80      ;
 $C9E9 LD HL,($C8C2) ;
 $C9EC LD (HL),A     ;
 $C9ED RET           ;

; Callback routine after dumping game flags
;
; Used by the routine at #R$C920
c$C9EE LD HL,($C8C2) ;
 $C9F1 ADD HL,BC     ;
 $C9F2 LD A,(HL)     ;
 $C9F3 CALL $CA08    ;
 $C9F6 LD BC,($C903) ; Restore #REGbc
 $C9FA RET           ;

; Callback routine after reading game flags
;
; Used by the routine at #R$C945
c$C9FB CALL $CA11    ;
 $C9FE LD BC,($C903) ; Restore #REGbc
 $CA02 LD HL,($C8C2) ;
 $CA05 ADD HL,BC     ;
 $CA06 LD (HL),A     ;
 $CA07 RET           ;

; Set the next byte of user data
;
; Used by the routines at #R$C920 and #R$C99B.
;
; A The next byte to store
c$CA08 LD HL,($C8FF) ; Point #REGhl to the current pointer (#R$C8FF)
 $CA0B LD (HL),A     ; Set the byte
 $CA0C INC HL        ; Move #REGhl to the next place in the buffer
 $CA0D LD ($C8FF),HL ; { Set the pointer (#R$C8FF) to this and return
 $CA10 RET           ; }

; Read the next byte of user data
;
; Used by the routines at #R$C945 and #R$C99B.
;
; A On return, holds the next byte read
c$CA11 LD HL,($C8FF) ; Point #REGhl to the current pointer (#R$C8FF)
 $CA14 LD A,(HL)     ; Read the byte
 $CA15 INC HL        ; Move #REGhl to the next place in the buffer
 $CA16 LD ($C8FF),HL ; { Set the pointer (#R$C8FF) to this and return
 $CA19 RET           ; }

; Initialize the game data pointer
;
; Used by the routines at #R$C920 and #R$C945.
c$CA1A LD HL,$5B00   ; Point #REGhl to the start of game data (#R$5B00)
 $CA1D LD ($C8FF),HL ; { Set the pointer (#R$C8FF) to this and return
 $CA20 RET           ; }

; Save the game to tape
;
; Used by the routine at #R$DD65.
c$CA21 LD DE,$00FF   ; Length is #N$FF
 $CA24 LD IX,$5B00   ; Start is #R$5B00
 $CA28 LD A,$FF      ; Set header flag
 $CA2A CALL $04C2    ; { Call the ROM save routine and return
 $CA2D RET           ; }

; Load the game from tape
;
; Used by the routine at #R$E1B6.
c$CA2E LD DE,$00FF   ; Length is #N$FF
 $CA31 LD IX,$5B00   ; Start is #R$5B00
 $CA35 LD A,$FF      ; Set header flag
 $CA37 SCF           ; Set carry flag to denote a load
 $CA38 CALL $0556    ; { Call the ROM load routine and return
 $CA3B RET           ; }

; Set up data for a data ID and room
;
; Used by the routines at #R$CF5D, #R$DC24, #R$DC85, #R$DCE0, #R$DD31, #R$DD6B,
; #R$E2E2 and #R$E30D.
;
; A Data ID to set
c$CA3C LD ($D757),A  ; Put the current player in #R$D757
 $CA3F LD B,A        ; Store this as a data index
 $CA40 LD HL,$8113   ; { Add an offset (#N$E3)
 $CA43 ADD A,(HL)    ; }
 $CA44 LD ($CD61),A  ;
 $CA47 LD A,$68      ;
 $CA49 LD ($CD60),A  ;
 $CA4C LD C,$11      ; Select data table 11
 $CA4E CALL $D6C0    ; Get the data
 $CA51 LD HL,($C8BE) ; { Copy the first two bytes to #N$CD5E
 $CA54 LD ($CD5E),HL ; }
 $CA57 LD A,($C8BF)  ; Get the next room graphic ID
 $CA5A LD HL,$8111   ; Point #REGhl at the bit key table
 $CA5D SUB (HL)      ; Subtract the relevant bits to get the real ID
 $CA5E LD ($D758),A  ; Store it (#R$D758)
 $CA61 CALL $E252    ; Make a snapshot of time
 $CA64 RET           ; All done

; Initialize command buffers
;
; Used by the routine at #R$E15A.
c$CA65 LD HL,$C155   ; { Clear the command history (#R$C155)
 $CA68 LD DE,$C156   ;
 $CA6B LD (HL),$20   ;
 $CA6D LD BC,$0121   ;
 $CA70 LDIR          ; }
 $CA72 LD A,$3E      ; { Set the first byte as #N$3E
 $CA74 LD ($C155),A  ; }
 $CA77 LD HL,$0001   ;
 $CA7A LD ($C2C8),HL ;
 $CA7D LD BC,$1203   ; { Set initial position
 $CA80 LD ($C2CA),BC ; }
 $CA84 CALL $C78C    ; Convert co-ordinates to a screen address
 $CA87 LD A,$2B      ;
 $CA89 CALL $C75B    ;  Draw the character
 $CA8C LD BC,$1202   ;
 $CA8F CALL $C78C    ;
 $CA92 LD A,$3E      ;
 $CA94 CALL $C75B    ;  Draw the character
 $CA97 LD A,$03      ;
 $CA99 LD ($F689),A  ;
 $CA9C LD A,$FF      ;
 $CA9E LD ($C7A9),A  ;
 $CAA1 LD ($C7AA),A  ;
 $CAA4 LD ($C86C),A  ;
 $CAA7 RET           ;

; Draw the timer
;
; Used by the routines at #R$E15A and #R$E1B6.
c$CAA8 LD BC,$0F03   ; Set initial position for the timer to #N$0F, #N$03
 $CAAB CALL $C78C    ; Convert this to a screen address
 $CAAE LD IY,$BFC8   ; Point #REGiy at the timer text
 $CAB2 LD A,(IY+$00) ; Get the first hour digit
 $CAB5 ADD A,$7B     ; { Convert it to a character and draw it
 $CAB7 CALL $C75B    ; }
 $CABA LD A,(IY+$01) ; Get the second hour digit
 $CABD ADD A,$7B     ; { Convert it to a character and draw it
 $CABF CALL $C75B    ; }
 $CAC2 LD A,$3A      ; { Draw a colon 
 $CAC4 CALL $C75B    ; }
 $CAC7 LD A,(IY+$02) ; Get the first minute digit
 $CACA ADD A,$7B     ; { Convert it to a character and draw it
 $CACC CALL $C75B    ; }
 $CACF LD A,(IY+$03) ; Get the second minute digit
 $CAD2 ADD A,$7B     ; { Convert it to a character and draw it
 $CAD4 CALL $C75B    ; }
 $CAD7 LD BC,$0F09   ; Set  position for the timer to #N$0F, #N$09
 $CADA CALL $C78C    ; Convert this to a screen address
 $CADD LD A,(IY+$04) ; Get the first second digit
 $CAE0 ADD A,$7B     ; { Convert it to a character and draw it
 $CAE2 CALL $C75B    ; }
 $CAE5 LD A,(IY+$05) ; Get the second second digit
 $CAE8 ADD A,$7B     ; { Convert it to a character and draw it
 $CAEA CALL $C75B    ; }
 $CAED LD A,$00      ; { Reset the timer tick counter (#R$BFDA) and return
 $CAEF LD ($BFDA),A  ;
 $CAF2 RET           ; }

; Set up the IM2 routine
;
; Used by the routine at #R$E15A
;
; C On entry, holds #N$FD - the value to fill the jump buffer at #N$FE00
c$CAF3 LD HL,$FE00   ; Start at #N$FE00
 $CAF6 LD BC,$00FD   ; #N$FD bytes to fill
*$CAF9 LD (HL),C     ; Set this byte
 $CAFA INC HL        ; { Loop round to the next address until all bytes set
 $CAFB DJNZ $CAF9    ; }
 $CAFD LD (HL),C     ; Set the last byte
 $CAFE LD HL,$FDFD   ; Start writing at #N$FDFD
 $CB01 LD (HL),$C3   ; { Write machine code for "JP #R$BF6C"
 $CB03 INC HL        ; 
 $CB04 LD (HL),$6C   ;
 $CB06 INC HL        ;
 $CB07 LD (HL),$BF   ; }
 $CB09 LD A,$FE      ; { Set #REGi to the newly created table from #N$FE00
 $CB0B LD I,A        ; }
 $CB0D IM 2          ; { Switch to IM2 and return
 $CB0F RET           ; }

; Get the next text buffer character
;
; Used by the routines at #R$CBBF, #R$CCD2, #R$D0D9, #R$D103, #R$D2E5, #R$D3AC,
; #R$D57C, #R$D5E6, #R$D9A9, #R$DA73, #R$DAB0, #R$DEE2, #R$DF5E, #R$DF9C and
; #R$E30D.
;
; A On exit, holds the character to process
; F On exit, has the carry flag set if the end of the string is reached
c$CB10 LD IX,($C8D2) ; Point #REGix at the start of the data item being looked at
 $CB14 INC IX        ; { Shift forward one character, to mark this as being processed
 $CB16 LD ($C8D2),IX ; }
 $CB1A LD HL,$C8CF   ; { Decrement the amount of characters left to process
 $CB1D DEC (HL)      ; }
 $CB1E LD A,(HL)     ; { Is this now zero?
 $CB1F CP $00        ; }
 $CB21 JR Z,$CB27    ; Jump forward if so
 $CB23 LD A,(IX+$00) ; { Otherwise return the next character
 $CB26 RET           ; }
*$CB27 JR NZ,$CB33   ; ???
 $CB29 LD A,$FF      ; { Mark the end of the string
 $CB2B LD ($C8CE),A  ; }
 $CB2E LD A,(IX+$00) ; { Return the last character with the carry flag set
 $CB31 SCF           ;
 $CB32 RET           ; }
*$CB33 LD HL,$CB33   ;
 $CB36 RET           ;

; Look up data in a text table
;
; Used by the routines at #R$CCA6 and #R$CCD2.
;
; B Data index
; C Text table ID
; IX On exit, points to the data
c$CB37 LD HL,$C8E9   ; Point #REGhl at the command table entries starting from #R$C8E9
 $CB3A LD A,B        ; { Store the data table index in #R$EBFA
 $CB3B LD ($EBFA),A  ; }
 $CB3E LD B,$00      ; { Add the text table type
 $CB40 ADD HL,BC     ; }
 $CB41 LD A,(HL)     ; { Set the index found there
 $CB42 LD ($C8F1),A  ; }
; This entry point is used by the routine at #R$D2E5.
*$CB45 LD A,C        ; { Double the table ID to get a word offset
 $CB46 SLA A         ;
 $CB48 LD C,A        ; }
 $CB49 LD HL,$80DE   ; { Add the base address of the jump table (#R$80E8)
 $CB4C ADD HL,BC     ; }
 $CB4D LD E,(HL)     ; { Put the address found in #REGix
 $CB4E INC HL        ;
 $CB4F LD D,(HL)     ;
 $CB50 PUSH DE       ;
 $CB51 POP IX        ; }
 $CB53 LD A,$00      ;
 $CB55 LD ($C8CE),A  ;
 $CB58 LD A,($EBFA)  ; { Restore the data table index into #REGb
 $CB5B LD B,A        ; }
 $CB5C CP $00        ; Is it zero?
 $CB5E JR Z,$CB76    ; Jump forward if so, already found it
; Look up the relevant command in the table
*$CB60 LD HL,$C8F1   ; Point #REGhl to the previously stored index in #R$C8F1
 $CB63 LD E,(IX+$00) ; { Put the length in #REGde and add it
 $CB66 LD D,$00      ; 
 $CB68 ADD IX,DE     ; }
 $CB6A LD A,(IX+$01) ; Get the first letter
 $CB6D CP (HL)       ; Does it equal this one?
 $CB6E JR NZ,$CB60   ; Jump back if it doesn't
 $CB70 DEC B         ; Decrease the count
 $CB71 LD A,B        ; { Is it now zero?
 $CB72 CP $00        ; }
 $CB74 JR NZ,$CB60   ; Jump back if it isn't
; Having found the data for this command, extract it
*$CB76 LD A,(IX+$00) ; { Put the command length in #REGa and decrement one
 $CB79 SUB $01       ; }
 $CB7B LD ($C8CF),A  ; Store this in #R$C8CF
 $CB7E LD ($C8D2),IX ; Store the last parsed command as this
 $CB82 LD E,(IX+$00) ; { Put the length in #REGde and add it to the current command pointer
 $CB85 LD D,$00      ;
 $CB87 ADD IX,DE     ; }
 $CB89 LD ($C8D0),IX ; Store this as the active command
 $CB8D LD IX,($C8D2) ; { Move the previous command back in the history
 $CB91 LD ($C8D4),IX ; }
 $CB95 RET           ; All done

; Get the next text entry to display
;
; Used by the routines at #R$CCA6, #R$CCD2, #R$D2E5, #R$DA73 and #R$DAB0.
;
; IX On return, points to the text
c$CB96 LD A,$00      ;
 $CB98 LD ($C8CE),A  ;
 $CB9B LD IX,($C8D0) ;
 $CB9F LD ($C8D2),IX ;
 $CBA3 LD A,(IX+$00) ;
 $CBA6 SUB $01       ;
 $CBA8 LD ($C8CF),A  ;
 $CBAB LD D,$00      ; { Put the length in #REGde
 $CBAD LD E,(IX+$00) ; }
 $CBB0 ADD IX,DE     ; Use this to move forward to the next entry
 $CBB2 LD ($C8D0),IX ;
 $CBB6 LD IX,($C8D2) ;
 $CBBA LD ($C8D4),IX ;
 $CBBE RET           ;

; Routine at CBBF
;
; Used by the routines at #R$CCA6, #R$CD15 and #R$CFCA.
c$CBBF LD A,($C8CC)  ;
 $CBC2 PUSH AF       ;
 $CBC3 LD A,($C8EA)  ;
 $CBC6 PUSH AF       ;
 $CBC7 LD IX,($CD7C) ;
 $CBCB PUSH IX       ;
 $CBCD LD A,($CD7B)  ;
 $CBD0 PUSH AF       ;
 $CBD1 LD A,$00      ;
 $CBD3 LD ($C8EC),A  ;
 $CBD6 LD ($C8ED),A  ;
*$CBD9 LD IY,($C8D2) ;
 $CBDD INC IY        ;
 $CBDF LD A,(IY+$00) ;
 $CBE2 CP $00        ;
 $CBE4 JP P,$CBF4    ;
 $CBE7 CALL $CB10    ;
 $CBEA JR C,$CBF4    ;
 $CBEC CALL $CB10    ;
 $CBEF JR C,$CBF4    ;
 $CBF1 JP $CBD9      ;
*$CBF4 LD A,($C8EC)  ;
 $CBF7 LD HL,$C8EA   ;
 $CBFA ADC A,(HL)    ;
 $CBFB LD ($C8EC),A  ;
 $CBFE LD IY,$C8D6   ;
 $CC02 LD HL,$C8EA   ;
 $CC05 LD B,(HL)     ;
*$CC06 LD A,($C8CE)  ;
 $CC09 CP $00        ;
 $CC0B JR NZ,$CC72   ;
 $CC0D CALL $CB10    ;
 $CC10 CP (IY+$00)   ;
 $CC13 JR NZ,$CC35   ;
 $CC15 INC IY        ;
 $CC17 DJNZ $CC06    ;
 $CC19 LD A,($C8CE)  ;
 $CC1C CP $00        ;
 $CC1E JR NZ,$CC63   ;
 $CC20 CALL $CB10    ;
 $CC23 CP $2C        ;
 $CC25 JR Z,$CC63    ;
 $CC27 CP $20        ;
 $CC29 JR NZ,$CC35   ;
 $CC2B LD ($C8ED),A  ;
 $CC2E CALL $CDB6    ;
 $CC31 CP $01        ;
 $CC33 JR Z,$CBF4    ;
*$CC35 CP $2C        ;
 $CC37 JR Z,$CC47    ;
*$CC39 LD A,($C8CE)  ;
 $CC3C CP $00        ;
 $CC3E JR NZ,$CC72   ;
 $CC40 CALL $CB10    ;
 $CC43 CP $2C        ;
 $CC45 JR NZ,$CC39   ;
*$CC47 POP AF        ;
 $CC48 POP AF        ;
 $CC49 POP AF        ;
 $CC4A POP AF        ;
 $CC4B LD E,A        ; { Put this in #REGde
 $CC4C LD D,$00      ; }
 $CC4E LD IX,$C277   ; Point #REGix at the input buffer (#R$C277)
 $CC52 ADD IX,DE     ; Add the offset
 $CC54 LD ($CD7C),IX ;
 $CC58 LD A,$00      ;
 $CC5A LD ($CD7B),A  ;
 $CC5D CALL $CDB6    ;
 $CC60 JP $CBBF      ;
*$CC63 LD A,($C8EC)  ;
 $CC66 LD ($C8EA),A  ;
 $CC69 POP AF        ;
 $CC6A POP AF        ;
 $CC6B POP AF        ;
 $CC6C POP AF        ;
 $CC6D LD ($C8CC),A  ;
 $CC70 SCF           ;
 $CC71 RET           ;
*$CC72 POP AF        ;
 $CC73 LD ($CD7B),A  ;
 $CC76 POP IX        ;
 $CC78 LD ($CD7C),IX ;
 $CC7C POP AF        ;
 $CC7D LD ($C8EA),A  ;
 $CC80 POP AF        ;
 $CC81 LD ($C8CC),A  ;
 $CC84 LD A,($C8ED)  ;
 $CC87 CP $00        ;
 $CC89 JR Z,$CCA3    ;
 $CC8B LD DE,($C8CC) ;
 $CC8F LD D,$00      ;
 $CC91 LD IX,$C277   ;
 $CC95 ADD IX,DE     ;
 $CC97 LD ($CD7C),IX ;
 $CC9B LD A,$00      ;
 $CC9D LD ($CD7B),A  ;
 $CCA0 CALL $CDB6    ;
*$CCA3 SCF           ;
 $CCA4 CCF           ;
 $CCA5 RET           ;

; Find a match on the entered word in a text table
;
; Used by the routine at #R$CFCA.
;
; C Text table type to search
; A On exit, holds the ID of the text if there was a match
; F On exit, the carry flag is set if there is a match
c$CCA6 LD HL,$8106   ; Point #REGhl at the offset buffer
 $CCA9 ADD HL,BC     ; Add the text table type
 $CCAA LD A,(HL)     ; { Store the word here in #N$C8EE
 $CCAB LD ($C8EE),A  ;
 $CCAE DEC HL        ;
 $CCAF LD A,(HL)     ;
 $CCB0 LD ($C8EF),A  ; }
 $CCB3 LD B,$00      ; Set index 0
 $CCB5 CALL $CB37    ; Look up the table data and point to it in #REGix.
*$CCB8 CALL $CBBF    ; Was a match found?
 $CCBB JR C,$CCCE    ; Jump forward if so
 $CCBD CALL $CB96    ;
 $CCC0 LD HL,$C8EF   ;
 $CCC3 INC (HL)      ;
 $CCC4 LD HL,$C8EE   ;
 $CCC7 LD A,($C8EF)  ;
 $CCCA CP (HL)       ;
 $CCCB JR C,$CCB8    ;
 $CCCD RET           ;
*$CCCE LD A,($C8EF)  ;
 $CCD1 RET           ;

; Look up a table entry by the first value
;
; Used by the routines at #R$CD15, #R$D0D9, #R$D3AC, #R$D4CC, #R$D520, #R$D84C,
; #R$D889, #R$DD9B, #R$DE83 and #R$DFBE.
;
; A Value to search for
; C Data table ID
c$CCD2 LD ($C8F0),A  ; Put the value to search to #R$C8F0
 $CCD5 LD HL,$C8E9   ; Point #REGhl at the command table entries starting from #R$C8E9
 $CCD8 PUSH BC       ; Store #REGbc
 $CCD9 LD B,$00      ; { Add the data table ID
 $CCDB ADD HL,BC     ; }
 $CCDC LD A,(HL)     ; { Store the found data entry
 $CCDD LD ($C8F1),A  ; }
 $CCE0 LD HL,$C8EF   ; Point #REGhl at the back of the data table entries (#R$C8E9)
 $CCE3 ADD HL,BC     ; Add the data table ID
 $CCE4 LD A,(HL)     ; Get the value found
 $CCE5 LD ($C8F2),A  ; Store it
 $CCE8 POP BC        ;
 $CCE9 CALL $CB37    ; Look up the table data and point to it in #REGix
 $CCEC LD A,(IX+$01) ; { Compare the first value with the one we're looking for.
 $CCEF LD HL,$C8F0   ;
 $CCF2 CP (HL)       ; }
 $CCF3 JR Z,$CD10    ; Jump forward if there's a match
; This entry point is used by the routines at #R$CD15, #R$D0D9, #R$D520,
; #R$D84C, #R$D889, #R$DD9B, #R$DE83, #R$DFBE and #R$E38A.
; Here, #REGix points directly to the buffer entries containing text.
*$CCF5 CALL $CB96    ; Get the next buffer entry
 $CCF8 LD A,(IX+$01) ; { Is there a match?
 $CCFB LD HL,$C8F0   ;
 $CCFE CP (HL)       ; }
 $CCFF JR Z,$CD10    ; If so, process this
 $CD01 LD HL,$C8F1   ;
 $CD04 CP (HL)       ;
 $CD05 JR Z,$CD0D    ;
 $CD07 LD HL,$C8F2   ; { Does this match the value stored earlier?
 $CD0A CP (HL)       ; }
 $CD0B JR NZ,$CCF5   ;
*$CD0D RET NC        ;
 $CD0E CCF           ; { Invert the carry flag and return
 $CD0F RET           ; }
*$CD10 CALL $CB10    ; Process the buffer entry
 $CD13 SCF           ; { Set the carry flag and return
 $CD14 RET           ; }

; Routine at CD15
;
; Used by the routine at #R$CFCA.
c$CD15 LD B,$00      ;
 $CD17 LD HL,$C8EF   ;
 $CD1A LD (HL),B     ;
 $CD1B CALL $CCD2    ;
 $CD1E JR NC,$CD3C   ;
 $CD20 CALL $CBBF    ;
 $CD23 JR C,$CD50    ;
*$CD25 LD A,($C8F0)  ;
 $CD28 CP $56        ; Is this a verb directive? (#N$56)
 $CD2A JR NZ,$CD30   ;
 $CD2C LD HL,$C8EF   ;
 $CD2F INC (HL)      ;
*$CD30 CALL $CCF5    ;
 $CD33 JR NC,$CD3C   ;
 $CD35 CALL $CBBF    ;
 $CD38 JR C,$CD50    ;
 $CD3A JR $CD25      ;
*$CD3C LD HL,$C8EF   ;
 $CD3F INC (HL)      ;
 $CD40 LD IX,($C8D4) ;
 $CD44 LD A,(IX+$01) ;
 $CD47 LD HL,$C8F2   ;
 $CD4A CP (HL)       ;
 $CD4B JR NZ,$CD30   ;
 $CD4D RET NC        ;
 $CD4E CCF           ;
 $CD4F RET           ;
*$CD50 LD A,($C8EF)  ;
 $CD53 RET           ;

; Buffer for processing commands
b$CD54 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CD5C DEFB $00,$00,$00,$00
 
; Game status buffer entry at CD60
g$CD60 DEFW $0000
 
; Time snapshot 
b$CD62 DEFW $0000
 
; Data block at CD64
b$CD64 DEFB $00,$00

; Data block at CD66
b$CD66 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CD6E DEFB $00,$00,$00,$00,$00,$00

; Data block at CD74
b$CD74 DEFB $44,$41,$50,$56,$4C,$4F,$43

; Block input
;
; Set to 0 to allow commands to be executed, or #N$FF to block them
g$CD7B DEFB $00

; Current position in the input buffer
w$CD7C DEFW $0000

; Data block at CD7E
b$CD7E DEFB $12,$74,$68,$65,$2C,$74,$68,$65
 $CD86 DEFB $6E,$2C,$61,$2C,$61,$6E,$2C,$73
 $CD8E DEFB $6F,$6D,$65,$07,$61,$6E,$64,$2C
 $CD96 DEFB $26,$2C,$2E,$80,$80,$80,$50,$58
 $CD9E DEFB $60,$68

; Data block at CDA0
b$CDA0 DEFB $02,$00,$03,$01,$02,$02,$02

; Pointer to queue (?)
;
; This points to a location in the buffer at #R$CDA9
w$CDA7 DEFW $0000

; Data block at CDA9
b$CDA9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CDB1 DEFB $00,$00,$00,$00,$00
 
; Current text table and ID
g$CDB3 DEFB $00,$00

; Game status buffer entry at CDB5
g$CDB5 DEFB $00

; Copy a word into the command buffer
;
; Used by the routines at #R$CBBF and #R$CF5D.
;
; A On return, set to 1 if data was read
c$CDB6 LD A,($CD7B)  ; { Is input blocked?
 $CDB9 CP $00        ; }
 $CDBB JP NZ,$CE3F   ; Jump forward if it is
 $CDBE LD IX,($CD7C) ; Point #REGix at the current place in the input buffer
 $CDC2 LD A,(IX+$00) ; Get the next character in the buffer
 $CDC5 CALL $CF46    ; Skip over whitespace
 $CDC8 CP $0D        ; Is the next character a newline?
 $CDCA JP Z,$CE3F    ; If so, jump forward to parse the buffer
 $CDCD LD DE,$C277   ; Point #REGde at the start of the input buffer
 $CDD0 PUSH IX       ; { Copy the current location to #REGhl
 $CDD2 POP HL        ; }
 $CDD3 SCF           ; { Subtract the two to get the length
 $CDD4 CCF           ;
 $CDD5 SBC HL,DE     ; }
 $CDD7 LD ($C8CC),HL ; Store this
; Do a syntax check on the next character
 $CDDA CP $2C        ; Is this a comma?
 $CDDC JR Z,$CE47    ; Jump forward if so
 $CDDE CP $2E        ; Is this a full stop?
 $CDE0 JR Z,$CE49    ; Jump forward if so
 $CDE2 CP $22        ; Is this a quote character?
 $CDE4 JR Z,$CE56    ; Jump forward if so
 $CDE6 CP $30        ; Is this below #N$30?
 $CDE8 JR C,$CDEF    ; Jump forward if so
 $CDEA CP $39        ; Is this below #N$39?
 $CDEC JP C,$CEAA    ; Jump forward if so
; Handle letters and other general characters
*$CDEF CP $0D        ; Is this a newline?
 $CDF1 JR Z,$CE2C    ; Jump forward if so
 $CDF3 LD IY,$C8D6   ; Point #regY at the parsed command (#R$C8D6)
*$CDF7 CP $5B        ; { Convert upper case characters to lower case
 $CDF9 JR NC,$CE01   ;
 $CDFB CP $41        ;
 $CDFD JR C,$CE01    ;
 $CDFF ADD A,$20     ; }
*$CE01 LD (IY+$00),A ; { Set the character in the parsed command and the input buffer
 $CE04 LD (IX+$00),A ; }
 $CE07 INC IY        ; { Move forward one character in both buffers
 $CE09 INC IX        ; }
 $CE0B PUSH IY       ; Store the position in the parsed buffer
 $CE0D LD DE,$C8EA   ; { Break out of the loop if the end of the buffer is reached
 $CE10 PUSH IY       ;
 $CE12 POP HL        ;
 $CE13 SBC HL,DE     ;
 $CE15 POP IY        ; 
 $CE17 JR NC,$CE2C   ; }
 $CE19 LD A,(IX+$00) ; Get the next character
 $CE1C CP $20        ; { Break out of the loop if space, comma, full stop
 $CE1E JR Z,$CE2C    ; or newline found, which denotes the end of a word
 $CE20 CP $2C        ;
 $CE22 JR Z,$CE2C    ;
 $CE24 CP $2E        ;
 $CE26 JR Z,$CE2C    ; 
 $CE28 CP $0D        ; 
 $CE2A JR NZ,$CDF7   ; }
; Processed this character, now more forward in the input buffer
*$CE2C LD ($CD7C),IX ; Set the new position in the input buffer
 $CE30 LD DE,$C8D6   ; { Store the new length in #N$C8EA
 $CE33 PUSH IY       ;
 $CE35 POP HL        ;
 $CE36 SBC HL,DE     ;
 $CE38 LD A,L        ;
 $CE39 LD ($C8EA),A  ; }
 $CE3C LD A,$01      ; { Signal character read and return
 $CE3E RET           ; }
; The input buffer has been read
*$CE3F LD A,$FF      ; { Block input (#R$CD7B)
 $CE41 LD ($CD7B),A  ; }
 $CE44 LD A,$00      ;
 $CE46 RET           ;
; Handle comma
*$CE47 LD A,$26      ;
; Handle full stop
*$CE49 LD IY,$C8D6   ;
 $CE4D LD (IY+$00),A ;
 $CE50 INC IY        ;
 $CE52 INC IX        ;
 $CE54 JR $CE2C      ;
; Handle quote
*$CE56 LD A,$51      ;
 $CE58 CALL $CF54    ;
 $CE5B INC IX        ;
 $CE5D PUSH IX       ;
 $CE5F POP HL        ;
 $CE60 LD DE,$C277   ;
 $CE63 SCF           ;
 $CE64 CCF           ;
 $CE65 SBC HL,DE     ;
 $CE67 LD A,L        ;
 $CE68 LD ($CD70),A  ;
 $CE6B LD BC,$00FF   ;
*$CE6E LD A,(IX+$00) ;
 $CE71 INC IX        ;
 $CE73 INC C         ;
 $CE74 CP $22        ;
 $CE76 JR Z,$CE91    ;
 $CE78 CP $0D        ;
 $CE7A JR Z,$CE8F    ;
 $CE7C CP $5B        ;
 $CE7E JR NC,$CE6E   ;
 $CE80 CP $41        ;
 $CE82 JR C,$CE6E    ;
 $CE84 DEC IX        ;
 $CE86 ADD A,$20     ;
 $CE88 LD (IX+$00),A ;
 $CE8B INC IX        ;
 $CE8D JR $CE6E      ;
*$CE8F DEC IX        ;
*$CE91 LD ($CD7C),IX ; 
 $CE95 LD A,($CD71)  ;
 $CE98 CP $00        ;
 $CE9A JR NZ,$CEA3   ;
 $CE9C LD A,C        ;
 $CE9D LD ($CD71),A  ;
 $CEA0 LD A,$FF      ;
 $CEA2 RET           ;
*$CEA3 LD A,$FE      ;
 $CEA5 RET           ;

; Data block at CEA6
b$CEA6 DEFB $00,$00,$00,$00

; Handle numbers in the input buffer
;
; Used by the routine at #R$CDB6.
;
; A current character
; IX current position in the input buffer
c$CEAA LD A,($CD59)  ;
 $CEAD CP $00        ;
 $CEAF JR NZ,$CF06   ;
 $CEB1 CALL $CF17    ;
 $CEB4 CP $3A        ;
 $CEB6 JR NZ,$CF0A   ;
 $CEB8 INC IX        ;
 $CEBA LD A,($CEA7)  ;
 $CEBD CP $00        ;
 $CEBF JR NZ,$CF0A   ;
 $CEC1 LD A,($CEA6)  ;
 $CEC4 CP $18        ;
 $CEC6 JR NC,$CF0A   ;
 $CEC8 LD ($E63F),A  ;
 $CECB LD A,$3C      ;
 $CECD LD ($E63E),A  ;
 $CED0 CALL $E642    ;
 $CED3 LD HL,($E640) ;
 $CED6 LD ($CEA8),HL ;
 $CED9 CALL $CF17    ;
 $CEDC LD A,($CEA7)  ;
 $CEDF CP $00        ;
 $CEE1 JR NZ,$CF0A   ;
 $CEE3 LD A,($CEA6)  ;
 $CEE6 CP $3C        ;
 $CEE8 JR NC,$CF0A   ;
 $CEEA LD E,A        ;
 $CEEB LD D,$00      ;
 $CEED LD HL,($CEA8) ;
 $CEF0 ADD HL,DE     ;
 $CEF1 EX DE,HL      ;
 $CEF2 LD HL,$CD58   ;
 $CEF5 LD (HL),D     ;
 $CEF6 INC HL        ;
 $CEF7 LD (HL),E     ;
 $CEF8 LD ($CD7C),IX ;
 $CEFC LD A,$FF      ;
*$CEFE PUSH AF       ;
 $CEFF LD A,$54      ;
 $CF01 CALL $CF54    ;
 $CF04 POP AF        ;
 $CF05 RET           ;
*$CF06 LD A,$FE      ;
 $CF08 JR $CEFE      ;
*$CF0A LD A,$58      ;
 $CF0C CALL $CF54    ;
 $CF0F LD A,$FF      ; { Block input (#R$CD7B)
 $CF11 LD ($CD7B),A  ; }
 $CF14 LD A,$FE      ;
 $CF16 RET           ;
*$CF17 LD HL,$0000   ;
 $CF1A LD ($CEA6),HL ;
*$CF1D LD A,(IX+$00) ;
 $CF20 CP $30        ;
 $CF22 RET C         ;
 $CF23 CP $3A        ;
 $CF25 RET NC        ;
 $CF26 SUB $30       ;
 $CF28 PUSH AF       ;
 $CF29 LD A,($CEA6)  ;
 $CF2C LD ($E63F),A  ;
 $CF2F LD A,$0A      ;
 $CF31 LD ($E63E),A  ;
 $CF34 CALL $E642    ;
 $CF37 LD HL,($E640) ;
 $CF3A POP AF        ;
 $CF3B LD D,$00      ;
 $CF3D LD E,A        ;
 $CF3E ADD HL,DE     ;
 $CF3F LD ($CEA6),HL ;
 $CF42 INC IX        ;
 $CF44 JR $CF1D      ;

; Skip over whitespace
;
; Used by the routine at #R$CDB6.
;
; A Current character in the input buffer
; IX Current position in the input buffer
c$CF46 LD HL,$C8EC   ; { Increment running count of characters
 $CF49 INC (HL)      ; }
 $CF4A CP $20        ; Is the current character a space?
 $CF4C RET NZ        ; Return if is isn't
 $CF4D INC IX        ; { Otherwise, get the next character and repeat
 $CF4F LD A,(IX+$00) ;
 $CF52 JR $CF46      ; }

; Routine at CF54
;
; Used by the routines at #R$CDB6, #R$CEAA and #R$CFCA.
c$CF54 LD HL,($CDA7) ;
 $CF57 LD (HL),A     ;
 $CF58 LD HL,$CDA7   ;
 $CF5B INC (HL)      ;
 $CF5C RET           ;

; Set up a command for processing
;
; Used by the routine at #R$D4CC.
c$CF5D LD A,($CD7B)  ; { Check the blocking flag (#R$CD7B)
 $CF60 CP $00        ; }
 $CF62 RET NZ        ; Return if input is blocked
 $CF63 LD HL,$CDA9   ; { Set the buffer pointer (#R$CDA7) to point to the start (#R$CDA9)
 $CF66 LD ($CDA7),HL ; }
 $CF69 LD A,$00      ;
 $CF6B LD ($CDB5),A  ;
 $CF6E LD HL,$CD54   ; { Clear the buffer's contents
 $CF71 LD DE,$CD55   ;
 $CF74 LD (HL),$00   ;
 $CF76 LD BC,$001F   ;
 $CF79 LDIR          ; }
 $CF7B CALL $E265    ; Get the current character
 $CF7E CALL $CA3C    ; Populate flags for the current player and room
*$CF81 CALL $CDB6    ; Put the next word in the command buffer
 $CF84 CP $00        ; Was data read?
 $CF86 JR Z,$CFC9    ; If not, jump forward and leave the routine
 $CF88 JP P,$CF91    ; Was the whole command read successfully?
 $CF8B CP $FF        ; { If not, is there more input?
 $CF8D JR Z,$CF81    ; }
 $CF8F JR NZ,$CF9B   ; If not, jump forward to exit the routine
; A word was read from the buffer
*$CF91 CALL $CFCA    ;
 $CF94 CP $00        ;
 $CF96 JR Z,$CF81    ;
 $CF98 JP P,$CFC9    ;
*$CF9B RET           ; All done

; Data block at CF9C
b$CF9C DEFB $4C,$45,$58,$20,$42,$45,$49,$4E
 $CFA4 DEFB $47,$20,$52,$45,$55,$20,$20,$20
 $CFAC DEFB $20,$20,$20,$53,$45,$44,$0D,$57
 $CFB4 DEFB $4F,$52,$44,$20,$20,$20,$20,$20
 $CFBC DEFB $20,$20,$4E,$4F,$54,$20,$46,$4F
 $CFC4 DEFB $55,$4E,$44,$21,$0D

; Finished processing command
;
; Used by the routine at #R$CF5D.
c$CFC9 RET           ; All done

; Process a word in the command
;
; Used by the routine at #R$CF5D.
c$CFCA LD A,$00      ;
 $CFCC LD ($C8CE),A  ;
 $CFCF LD A,($CD7E)  ;
 $CFD2 LD ($C8CF),A  ;
 $CFD5 LD HL,$CD7E   ;
 $CFD8 LD ($C8D2),HL ;
 $CFDB CALL $CBBF    ;
 $CFDE JR NC,$CFE3   ;
 $CFE0 LD A,$00      ;
 $CFE2 RET           ;
*$CFE3 LD HL,$CD91   ;
 $CFE6 LD ($C8D2),HL ;
 $CFE9 LD A,$00      ;
 $CFEB LD ($C8CE),A  ;
 $CFEE LD A,($CD91)  ;
 $CFF1 LD ($C8CF),A  ;
 $CFF4 CALL $CBBF    ;
 $CFF7 JR NC,$CFFC   ;
 $CFF9 LD A,$01      ;
 $CFFB RET           ;
; Check for a command match in the text tables
*$CFFC LD BC,$0005   ; Set #REGbc to text table 5 (directions)
 $CFFF LD ($CDB3),BC ; Store this (#R$CDB3)
; Look through text tables looking for a match
*$D003 LD BC,($CDB3) ; Put the next table type in #REGbc
 $D007 CALL $CCA6    ; Was a match found?
 $D00A JR C,$D04F    ; Jump forward if so
 $D00C LD A,($CDB3)  ; { Otherwise move to the next table type
 $D00F ADD A,$01     ;
 $D011 LD ($CDB3),A  ; }
 $D014 CP $08        ; { Loop until table type 8
 $D016 JR NZ,$D003   ; }
 $D018 LD A,$56      ; Set #REGa to a verb type (#N$56)
 $D01A LD BC,$000B   ; { Set the table type text table B
 $D01D LD ($CDB3),BC ; }
*$D021 LD BC,($CDB3) ; Get the next table type
 $D025 CALL $CD15    ; Check for a match
 $D028 JR C,$D05F    ; Jump forward if there is one
 $D02A LD A,($CDB3)  ; { Increment the text table type
 $D02D ADD A,$01     ;
 $D02F LD ($CDB3),A  ; }
 $D032 CP $0F        ; Has it reached F?
 $D034 LD A,$4E      ;
 $D036 JR NZ,$D021   ; Jump back if not
; No entry found
 $D038 LD A,($C8CC)  ;
 $D03B LD ($CD72),A  ;
 $D03E LD A,($C8EA)  ;
 $D041 LD ($CD73),A  ;
 $D044 LD A,$58      ;
 $D046 CALL $CF54    ;
 $D049 LD A,$FF      ; { Block input (#R$CD7B)
 $D04B LD ($CD7B),A  ; }
 $D04E RET           ;
; An entry has been found in tables 5 - 7
*$D04F LD ($C8BA),A  ; Store this
 $D052 LD A,$FF      ;
 $D054 LD ($C8BB),A  ;
 $D057 LD A,($CDB3)  ;
 $D05A SUB $05       ;
 $D05C LD E,A        ;
 $D05D JR $D07B      ;
; An entry has been found in tables B - F
*$D05F LD BC,($CDB3) ;
 $D063 LD HL,$8105   ;
 $D066 ADD HL,BC     ;
 $D067 ADD A,(HL)    ;
 $D068 LD ($C8BB),A  ;
 $D06B PUSH AF       ;
 $D06C LD HL,$8114   ;
 $D06F ADD HL,BC     ;
 $D070 POP AF        ;
 $D071 LD A,(HL)     ;
 $D072 ADC A,$00     ;
 $D074 LD ($C8BA),A  ;
 $D077 LD A,C        ;
 $D078 SUB $08       ;
 $D07A LD E,A        ;
; Set command data
*$D07B LD D,$00      ;
 $D07D LD B,$00      ;
 $D07F LD HL,$CDA0   ;
 $D082 ADD HL,DE     ;
 $D083 LD A,(HL)     ;
 $D084 CP $02        ;
 $D086 JR NZ,$D099   ;
 $D088 PUSH AF       ;
 $D089 LD A,($CDB5)  ;
 $D08C CP $00        ;
 $D08E JR Z,$D095    ;
 $D090 POP AF        ;
 $D091 LD A,$04      ;
 $D093 JR $D099      ;
*$D095 POP AF        ;
 $D096 LD ($CDB5),A  ;
*$D099 SLA A         ;
 $D09B LD B,$00      ;
 $D09D LD C,A        ;
 $D09E LD HL,$CD54   ; Point #REGhl to the start of the command buffer
 $D0A1 ADD HL,BC     ;
 $D0A2 LD A,(HL)     ;
 $D0A3 PUSH AF       ;
 $D0A4 LD A,($C8BA)  ;
 $D0A7 LD HL,$CD99   ;
 $D0AA ADD HL,DE     ;
 $D0AB OR (HL)       ;
 $D0AC LD HL,$CD54   ; Point #REGhl to the start of the command buffer
 $D0AF ADD HL,BC     ;
 $D0B0 LD (HL),A     ;
 $D0B1 LD A,($C8BB)  ;
 $D0B4 INC HL        ;
 $D0B5 LD (HL),A     ;
 $D0B6 LD HL,$CD66   ;
 $D0B9 ADD HL,BC     ;
 $D0BA LD A,($C8CC)  ;
 $D0BD LD (HL),A     ;
 $D0BE INC HL        ;
 $D0BF LD A,($C8EA)  ;
 $D0C2 LD (HL),A     ;
 $D0C3 LD HL,$CD74   ;
 $D0C6 ADD HL,DE     ;
 $D0C7 LD A,(HL)     ;
 $D0C8 CALL $CF54    ;
 $D0CB POP AF        ;
 $D0CC CP $00        ;
 $D0CE JR NZ,$D0D1   ;
 $D0D0 RET           ;
*$D0D1 LD A,$FF      ; { Block input (#R$CD7B)
 $D0D3 LD ($CD7B),A  ; }
 $D0D6 LD A,$FE      ;
 $D0D8 RET           ;

; Process a blocking message, if one exists
;
; Used by the routine at #R$D4CC.
;
; C Data table to use
c$D0D9 LD A,$0D      ; { Put an empty string in the text buffer (#R$D1E3)
 $D0DB LD ($D1E3),A  ; }
 $D0DE LD A,$4D      ; { Check for a buffer entry starting with #N$4D (denoting blocking message)
 $D0E0 CALL $CCD2    ; }
 $D0E3 JR NC,$D102   ; If none found, then no blocking message needed
 $D0E5 CALL $D103    ;
 $D0E8 JR C,$D0F4    ;
*$D0EA CALL $CCF5    ;
 $D0ED JR NC,$D102   ;
 $D0EF CALL $D103    ;
 $D0F2 JR NC,$D0EA   ;
*$D0F4 CALL $CB10    ;
 $D0F7 CP $2D        ;
 $D0F9 JR NZ,$D0F4   ;
 $D0FB CALL $D2E5    ; Expand any macros
 $D0FE CALL $DB34    ; Print a blocking message
 $D101 SCF           ;
*$D102 RET           ;

; Check the syntax on a command
;
; Used by the routines at #R$D0D9 and #R$D4CC.
;.
; On return, the carry flag is set if the syntax is okay
c$D103 CALL $D120    ;
 $D106 JR C,$D11F    ;
 $D108 LD A,($C8CE)  ;
 $D10B CP $00        ;
 $D10D JR NZ,$D11C   ;
 $D10F LD IY,($C8D2) ;
 $D113 INC IY        ;
 $D115 LD A,(IY+$00) ;
 $D118 CP $2D        ;
 $D11A JR NZ,$D103   ;
*$D11C RET NC        ;
 $D11D CCF           ;
 $D11E RET           ;
*$D11F RET           ;

; Check to see if parameters match those of a verb entered
;
; Used by the routine at #R$D103
;.
; Returns with the carry flag set if the parameters are okay
c$D120 LD HL,($CDA7) ;
 $D123 LD DE,$CDA9   ;
 $D126 JR NC,$D129   ;
 $D128 CCF           ;
*$D129 SBC HL,DE     ;
 $D12B JR Z,$D177    ;
 $D12D LD A,$00      ;
 $D12F LD ($D1E2),A  ;
 $D132 LD IY,$CDA9   ;
*$D136 LD A,($C8CE)  ;
 $D139 CP $00        ;
 $D13B JR NZ,$D185   ;
 $D13D CALL $CB10    ;
 $D140 CP $2C        ;
 $D142 JR Z,$D185    ;
*$D144 CP (IY+$00)   ;
 $D147 JR NZ,$D188   ;
*$D149 LD A,$00      ;
 $D14B LD ($D1E2),A  ;
*$D14E INC IY        ;
 $D150 PUSH IY       ;
 $D152 POP HL        ;
 $D153 LD DE,($CDA7) ;
 $D157 SCF           ;
 $D158 CCF           ;
 $D159 SBC HL,DE     ;
 $D15B JR NZ,$D136   ;
 $D15D JR $D167      ;
*$D15F CP $23        ;
 $D161 JR Z,$D167    ;
 $D163 CP $5C        ;
 $D165 JR C,$D177    ;
*$D167 LD A,($C8CE)  ;
 $D16A CP $00        ;
 $D16C JR NZ,$D175   ;
 $D16E CALL $CB10    ;
 $D171 CP $2C        ;
 $D173 JR NZ,$D15F   ;
*$D175 SCF           ;
 $D176 RET           ;
*$D177 LD A,($C8CE)  ;
 $D17A CP $00        ;
 $D17C JR NZ,$D185   ;
 $D17E CALL $CB10    ;
 $D181 CP $2C        ;
 $D183 JR NZ,$D177   ;
*$D185 RET NC        ;
 $D186 CCF           ;
 $D187 RET           ;
*$D188 CP $23        ;
 $D18A JR NZ,$D1A0   ;
 $D18C LD ($D1E2),A  ;
 $D18F LD A,($C8CE)  ;
 $D192 CP $00        ;
 $D194 JR NZ,$D175   ;
 $D196 CALL $CB10    ;
 $D199 CP $2C        ;
 $D19B JR Z,$D175    ;
 $D19D JP $D144      ;
*$D1A0 LD B,$00      ;
 $D1A2 CP $5C        ;
 $D1A4 JR C,$D1AF    ;
 $D1A6 SUB $20       ;
 $D1A8 CP (IY+$00)   ;
 $D1AB JR Z,$D149    ;
 $D1AD LD B,$01      ;
*$D1AF CP $4E        ;
 $D1B1 JR NZ,$D1C6   ;
 $D1B3 LD A,(IY+$00) ;
 $D1B6 CP $44        ;
 $D1B8 JR Z,$D149    ;
 $D1BA CP $4C        ;
 $D1BC JR Z,$D149    ;
 $D1BE CP $43        ;
 $D1C0 JR Z,$D149    ;
 $D1C2 CP $4F        ;
 $D1C4 JR Z,$D149    ;
*$D1C6 LD A,B        ;
 $D1C7 CP $00        ;
 $D1C9 JR Z,$D1CE    ;
 $D1CB JP $D136      ;
*$D1CE LD A,($D1E2)  ;
 $D1D1 CP $00        ;
 $D1D3 JR Z,$D177    ;
 $D1D5 DEC IX        ;
 $D1D7 LD ($C8D2),IX ;
 $D1DB LD HL,$C8CF   ;
 $D1DE INC (HL)      ;
 $D1DF JP $D14E      ;

; Game status buffer entry at D1E2
g$D1E2 DEFB $00

; Current text buffer
;
; Terminated with an ENTER (#N$0D) character
g$D1E3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D1EB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D1F3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D1FB DEFB $00,$00,$00,$00,$00

; Unused
u$D200 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D208 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D210 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D218 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D220 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D228 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D230 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D238 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D240 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D248 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D250 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D258 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D260 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D268 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D270 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D278 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D280 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D288 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D290 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D298 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D2A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D2A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D2B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D2B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D2C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D2C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D2D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D2D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D2E0 DEFB $00,$00,$00
 
; Temporary storage for expanding macros
b$D2E3 DEFB $00,$00

; Expand macros to form a complete string
;
; Used by the routines at #R$D0D9 and #R$DF5E.
c$D2E5 LD IX,$D1E3   ; Point #REGix at the text buffer (#R$D1E3)
*$D2E9 LD A,($C8CE)  ; { Is this the end of the string? (#R$C8CE)
 $D2EC CP $00        ; }
 $D2EE JR NZ,$D303   ; Jump forward if so
 $D2F0 PUSH IX       ; { Otherwise, get the next character
 $D2F2 CALL $CB10    ;
 $D2F5 POP IX        ; }
 $D2F7 CP $00        ; Is bit 7 set ?
 $D2F9 JP M,$D309    ; If so, jump forward to process the macro
 $D2FC LD (IX+$00),A ; { Otherwise just add the character and loop
 $D2FF INC IX        ; back to process more
 $D301 JR $D2E9      ; }
; Reached the end of the processed text
*$D303 LD A,$0D      ; { Append a new line, then return
 $D305 LD (IX+$00),A ;
 $D308 RET           ; }
; A macro has been read in, so process it
*$D309 CALL $D30E    ; Process the macro
 $D30C JR $D2E9      ; Repeat to read more input

; Expand a macro
;
; Used by the routine at #R$D2E5
; 
; A Macro to process
; IX Pointer to text output buffer
c$D30E CP $FE        ; Is this #N$FE / #N$FF / 00?
 $D310 JR NC,$D352   ; Jump forward if it is
 $D312 AND $7F       ; Switch off bit 7
 $D314 LD HL,$8106   ; { Subtract 9 to get the real macro definition
 $D317 SUB (HL)      ; }
 $D318 CP $07        ;
 $D31A JP Z,$D3AC    ;
 $D31D CP $08        ;
 $D31F JP Z,$D3B3    ;
 $D322 SLA A         ;
 $D324 LD E,A        ;
 $D325 LD D,$00      ;
 $D327 LD IY,$CD66   ;
 $D32B ADD IY,DE     ;
 $D32D LD A,(IY+$01) ;
 $D330 LD ($D2E4),A  ;
 $D333 CP $00        ;
 $D335 JR Z,$D303    ;
 $D337 LD A,(IY+$00) ;
 $D33A LD E,A        ;
 $D33B LD IY,$C277   ;
 $D33F ADD IY,DE     ;
*$D341 LD A,(IY+$00) ;
 $D344 INC IY        ;
 $D346 LD (IX+$00),A ;
 $D349 INC IX        ;
 $D34B LD HL,$D2E4   ;
 $D34E DEC (HL)      ;
 $D34F JR NZ,$D341   ;
 $D351 RET           ;

; Substitute macro text from data table 9
;
; Used by the routines at #R$D30E and #R$D3AC.
;
; IX Buffer for output text
c$D352 LD ($D2E3),A  ; Store the macro ID (#R$D2E3)
 $D355 PUSH IX       ; { Get the next character
 $D357 CALL $CB10    ;
 $D35A POP IX        ; }
 $D35C LD ($C8CB),A  ; Store this
 $D35F CALL $D711    ; Push working variables onto the stack
 $D362 PUSH IX       ; Store pointer to the output text buffer
 $D364 LD B,$00      ; Set #REGb to data entry 0
 $D366 LD C,$08      ; Set #REGc to data table type 8
 $D368 LD A,($D2E3)  ; Restore the macro ID
 $D36B CP $FF        ; Is it #N$FF?
 $D36D JP Z,$D412    ; Jump forward if so
 $D370 LD C,$09      ; Set #REGc to data table type 9
 $D372 LD A,B        ; { Store this
 $D373 LD ($EBFA),A  ; }
 $D376 CALL $CB45    ; Get the data
 $D379 LD A,($C8CB)  ; { Put the first found byte in #REGb
 $D37C LD B,A        ; }
 $D37D INC B         ; { Is it zero?
*$D37E DEC B         ; }
 $D37F JR Z,$D386    ; If it is, the data has been found
 $D381 CALL $CB96    ; Get the text
 $D384 JR $D37E      ; Loop back while there is more to do
; The data has been found
*$D386 POP IX        ; Restore the pointer to the text buffer
*$D388 PUSH IX       ; { Get the next character 
 $D38A CALL $CB10    ;
 $D38D POP IX        ; }
 $D38F CP $00        ; { Skip the next bit if bit 7 is set
 $D391 JP M,$D3A4    ; }
 $D394 LD (IX+$00),A ; Put the character in the text buffer
 $D397 INC IX        ; Move the pointer to the text buffer forward
*$D399 LD A,($C8CE)  ; { Is this the end of the string?
 $D39C CP $00        ; }
 $D39E JR Z,$D388    ; Loop back if it isn't
; This entry point is used by the routine at #R$D412.
*$D3A0 CALL $D734    ; Pop working variables off the stack
 $D3A3 RET           ;
*$D3A4 CALL $D30E    ;
 $D3A7 JR $D399      ;

; Game status buffer entry at D3A9
g$D3A9 DEFB $00

; Pointer to string data to print
g$D3AA DEFW $0000

; Prepare text in response to a macro
;
; Used by the routine at #R$D2E5.
;
; IX Buffer for output text
c$D3AC LD C,$0C      ; Use text table #N$0C
 $D3AE LD A,($D758)  ;
 $D3B1 JR $D3B8      ;
; This entry point is used by the routine at #R$D2E5.
*$D3B3 LD C,$0E      ; Use text table #N$0E
 $D3B5 LD A,($D757)  ; Put the current player in #REGa
*$D3B8 LD ($D3AA),IX ; Store the current position of the output string
 $D3BC LD B,A        ; Use data item based on the player
 $D3BD CALL $D711    ; Push local variables onto the stack
 $D3C0 LD A,$4E      ; { Look up an entry starting with #N$4E
 $D3C2 CALL $CCD2    ; }
 $D3C5 JR NC,$D40C   ;
 $D3C7 LD A,$FF      ;
 $D3C9 LD ($D3A9),A  ;
 $D3CC LD IX,($D3AA) ;
*$D3D0 PUSH IX       ; { Process the next character
 $D3D2 CALL $CB10    ;
 $D3D5 POP IX        ; }
 $D3D7 CP $00        ;
 $D3D9 JP P,$D3E1    ;
 $D3DC CALL $D352    ;
 $D3DF JR $D3D0      ;
*$D3E1 CP $2C        ;
 $D3E3 JR Z,$D40C    ;
 $D3E5 LD ($C8B7),A  ;
 $D3E8 LD A,($D3A9)  ;
 $D3EB CP $00        ;
 $D3ED LD A,($C8B7)  ;
 $D3F0 JR Z,$D3F9    ;
 $D3F2 SUB $20       ;
 $D3F4 LD HL,$D3A9   ;
 $D3F7 LD (HL),$00   ;
*$D3F9 CP $20        ;
 $D3FB JR NZ,$D400   ;
 $D3FD LD ($D3A9),A  ;
*$D400 LD (IX+$00),A ;
 $D403 INC IX        ;
 $D405 LD A,($C8CE)  ;
 $D408 CP $00        ;
 $D40A JR Z,$D3D0    ;
*$D40C CALL $D734    ; Pop working variables off the stack
 $D40F RET           ;

; Data block at D410
b$D410 DEFB $00,$00

; Substitute macro text from data table 8
;
; Used by the routine at #R$D2E5.
;
; IX Buffer for output text
c$D412 LD C,$08      ;
 $D414 LD A,($C8CB)  ;
 $D417 LD B,A        ;
 $D418 CALL $D6C0    ;
 $D41B LD A,($C8BE)  ;
 $D41E LD ($D411),A  ;
 $D421 LD A,($C8BF)  ;
 $D424 LD ($D410),A  ;
 $D427 POP IX        ;
 $D429 LD HL,($D410) ;
 $D42C LD DE,$270F   ;
 $D42F SBC HL,DE     ;
 $D431 JR C,$D441    ;
 $D433 LD A,$31      ;
 $D435 LD (IX+$00),A ;
 $D438 INC IX        ;
 $D43A LD A,$01      ;
 $D43C LD B,$04      ;
 $D43E CALL $D4B7    ;
*$D441 LD HL,($D410) ;
 $D444 LD DE,$03E7   ;
 $D447 SBC HL,DE     ;
 $D449 JR C,$D464    ;
 $D44B LD HL,($D410) ;
 $D44E LD A,H        ;
 $D44F LD C,L        ;
 $D450 LD DE,$03E8   ;
 $D453 CALL $E7BB    ;
 $D456 LD A,C        ;
 $D457 ADD A,$30     ;
 $D459 LD (IX+$00),A ;
 $D45C INC IX        ;
 $D45E LD A,C        ;
 $D45F LD B,$03      ;
 $D461 CALL $D4B7    ;
*$D464 LD HL,($D410) ;
 $D467 LD DE,$0063   ;
 $D46A SBC HL,DE     ;
 $D46C JR C,$D487    ;
 $D46E LD HL,($D410) ;
 $D471 LD A,H        ;
 $D472 LD C,L        ;
 $D473 LD DE,$0064   ;
 $D476 CALL $E7BB    ;
 $D479 LD A,C        ;
 $D47A ADD A,$30     ;
 $D47C LD (IX+$00),A ;
 $D47F INC IX        ;
 $D481 LD A,C        ;
 $D482 LD B,$02      ;
 $D484 CALL $D4B7    ;
*$D487 LD HL,($D410) ;
 $D48A LD DE,$0009   ;
 $D48D SBC HL,DE     ;
 $D48F JR C,$D4AA    ;
 $D491 LD HL,($D410) ;
 $D494 LD A,H        ;
 $D495 LD C,L        ;
 $D496 LD DE,$000A   ;
 $D499 CALL $E7BB    ;
 $D49C LD A,C        ;
 $D49D ADD A,$30     ;
 $D49F LD (IX+$00),A ;
 $D4A2 INC IX        ;
 $D4A4 LD A,C        ;
 $D4A5 LD B,$01      ;
 $D4A7 CALL $D4B7    ;
*$D4AA LD A,($D410)  ;
 $D4AD ADD A,$30     ;
 $D4AF LD (IX+$00),A ;
 $D4B2 INC IX        ;
 $D4B4 JP $D3A0      ;
*$D4B7 LD H,$00      ;
 $D4B9 LD L,A        ;
*$D4BA LD D,H        ;
 $D4BB LD E,L        ;
 $D4BC ADD HL,HL     ;
 $D4BD ADD HL,HL     ;
 $D4BE ADD HL,DE     ;
 $D4BF ADD HL,HL     ;
 $D4C0 DJNZ $D4BA    ;
 $D4C2 EX DE,HL      ;
 $D4C3 LD HL,($D410) ;
 $D4C6 SBC HL,DE     ;
 $D4C8 LD ($D410),HL ;
 $D4CB RET           ;

; Execute a command
;
; Used by the routine at #R$E1D7.
c$D4CC CALL $CF5D    ; Set up the buffers
 $D4CF LD HL,($CDA7) ; Point #REGhl at the current end of the queue
 $D4D2 LD DE,$CDA9   ; { Subtract the start address to get an offset
 $D4D5 SBC HL,DE     ; }
 $D4D7 JR Z,$D4FE    ; Skip forward if there is nothing in the queue
 $D4D9 LD A,($CD56)  ;
 $D4DC CP $00        ;
 $D4DE JR Z,$D4F9    ;
 $D4E0 LD A,($CD57)  ;
 $D4E3 LD HL,$8110   ; Point #REGhl to the offsets table
 $D4E6 SUB (HL)      ; Subtract #N$8D
 $D4E7 LD ($C8CA),A  ; Store this
 $D4EA LD B,A        ;
 $D4EB LD C,$0B      ; Use data table #N$0B
 $D4ED LD A,$48      ; Check for entries starting #N$48
 $D4EF CALL $CCD2    ; Look up the data
 $D4F2 JR NC,$D4F9   ; Jump forward if it was not found
 $D4F4 CALL $D103    ; Check the syntax of the command
 $D4F7 JR NC,$D4FF   ; If the syntax looks wrong, display an error
*$D4F9 CALL $D520    ;
 $D4FC JR NC,$D50F   ;
; All done with the command
*$D4FE RET           ;
; The command generated a problem, so print a blocking message
*$D4FF LD C,$0B      ; Use text table #N$0B
 $D501 LD A,($C8CA)  ; { Get the table entry
 $D504 LD B,A        ; }
 $D505 CALL $D0D9    ; Check for blocking messages
 $D508 LD A,$FF      ; { Block input (#R$CD7B)
 $D50A LD ($CD7B),A  ; }
 $D50D JR C,$D4FE    ; Exit if a message was printed
*$D50F LD C,$0A      ; Use text table #N$0A
 $D511 LD B,$00      ; Start looking at the first entry ("[word]" confuses "[player]")
 $D513 LD A,$FF      ; { Block input (#R$CD7B)
 $D515 LD ($CD7B),A  ; }
 $D518 JP $D0D9      ; Check for blocking messages

; Data block at D51B
b$D51B DEFB $00,$00,$00,$00,$00

; Routine at D520
;
; Used by the routine at #R$D4CC.
c$D520 LD A,($8114)  ;
 $D523 LD HL,$8113   ;
 $D526 SUB (HL)      ;
 $D527 LD ($D51B),A  ;
 $D52A LD B,$00      ;
 $D52C LD A,$00      ;
 $D52E LD ($D51C),A  ;
*$D531 LD A,B        ;
 $D532 LD HL,$D757   ; Point #REGhl at the current player
 $D535 CP (HL)       ;
 $D536 JR Z,$D53D    ;
 $D538 LD C,$0E      ;
 $D53A CALL $D563    ;
*$D53D LD HL,$D51C   ;
 $D540 INC (HL)      ;
 $D541 LD A,(HL)     ;
 $D542 LD B,(HL)     ;
 $D543 LD HL,$D51B   ;
 $D546 CP (HL)       ;
 $D547 JR NZ,$D531   ;
 $D549 LD C,$0E      ; Set data table #N$0E
 $D54B LD A,($D757)  ; { Put the current player in #REGb
 $D54E LD B,A        ; }
 $D54F CALL $D563    ; Look for the entry
 $D552 LD C,$0C      ; Set data table #N$0C
 $D554 LD A,($D758)  ;
 $D557 LD B,A        ;
 $D558 CALL $D563    ; Look for the entry
 $D55B LD C,$0C      ;
 $D55D LD B,$00      ;
 $D55F CALL $D563    ; Look for the entry
 $D562 RET           ;

; Look up ??? in a text table
;
; Used by the routine at #R$D520.
;
; C table type to use
c$D563 LD A,$54      ; Search for an entry starting with #N$54
 $D565 CALL $CCD2    ; Do the search
 $D568 RET NC        ; Return if it wasn't found
*$D569 CALL $D57C    ;
 $D56C JR C,$D574    ;
*$D56E CALL $CCF5    ;
 $D571 JR C,$D569    ;
 $D573 RET           ;
*$D574 CALL $DA73    ;
 $D577 JR NC,$D56E   ;
 $D579 POP DE        ;
 $D57A SCF           ;
 $D57B RET           ;

; Routine at D57C
;
; Used by the routine at #R$D520.
c$D57C LD E,$02      ;
 $D57E LD D,$00      ;
*$D580 LD A,$00      ;
 $D582 LD ($D51D),A  ;
 $D585 LD ($D51E),A  ;
*$D588 LD A,($C8CE)  ;
 $D58B CP $00        ;
 $D58D JR NZ,$D5D9   ;
 $D58F CALL $CB10    ;
 $D592 CP $05        ;
 $D594 JR C,$D5C8    ;
 $D596 LD C,A        ;
 $D597 LD A,$FF      ;
 $D599 LD ($D51E),A  ;
 $D59C LD A,C        ;
 $D59D LD B,$00      ;
 $D59F CP $00        ;
 $D5A1 JP P,$D5AD    ;
 $D5A4 LD HL,$CD54   ; Point #REGhl to the start of the command buffer
 $D5A7 ADD HL,DE     ;
 $D5A8 CP (HL)       ;
 $D5A9 JR NZ,$D588   ;
 $D5AB JR $D5C1      ;
*$D5AD PUSH AF       ;
 $D5AE PUSH DE       ;
 $D5AF CALL $CB10    ;
 $D5B2 POP DE        ;
 $D5B3 LD C,A        ;
 $D5B4 POP AF        ;
 $D5B5 LD HL,$CD54   ; Point #REGhl to the start of the command buffer
 $D5B8 ADD HL,DE     ;
 $D5B9 CP (HL)       ;
 $D5BA JR NZ,$D588   ;
 $D5BC LD A,C        ;
 $D5BD INC HL        ;
 $D5BE CP (HL)       ;
 $D5BF JR NZ,$D588   ;
*$D5C1 LD A,$FF      ;
 $D5C3 LD ($D51D),A  ;
 $D5C6 JR $D588      ;
*$D5C8 SLA A         ;
 $D5CA LD E,A        ;
 $D5CB LD A,($D51D)  ;
 $D5CE CP $00        ;
 $D5D0 JR NZ,$D580   ;
 $D5D2 LD A,($D51E)  ;
 $D5D5 CP $00        ;
 $D5D7 JR Z,$D580    ;
*$D5D9 LD A,($D51E)  ;
 $D5DC XOR $FF       ;
 $D5DE JR NZ,$D5E3   ;
 $D5E0 LD A,($D51D)  ;
*$D5E3 SRL A         ;
 $D5E5 RET           ;

; Routine at D5E6
;
; Used by the routines at #R$D786, #R$D80D, #R$D825, #R$D889, #R$D93E, #R$D958,
; #R$DBB6, #R$DCE0, #R$DD6B, #R$DD9B, #R$DDD8, #R$DE83, #R$DEE2, #R$DF1B,
; #R$DF79 and #R$DF9C.
c$D5E6 CALL $CB10    ;
; This entry point is used by the routine at #R$D786.
*$D5E9 CALL $D5F5    ;
 $D5EC JR C,$D5F4    ;
 $D5EE CALL $CB10    ;
 $D5F1 CALL $D62A    ;
*$D5F4 RET           ;

; Routine at D5F5
;
; Used by the routines at #R$D5E6, #R$D649 and #R$D6AA.
c$D5F5 LD ($C8BA),A  ;
 $D5F8 CP $00        ;
 $D5FA JP M,$D649    ;
 $D5FD AND $40       ;
 $D5FF JR Z,$D61D    ;
 $D601 LD A,($C8BA)  ;
 $D604 AND $38       ;
 $D606 SRL A         ;
 $D608 SRL A         ;
 $D60A SRL A         ;
 $D60C ADD A,$09     ;
 $D60E LD ($C8BC),A  ;
 $D611 CP $09        ;
 $D613 JR NZ,$D61A   ;
 $D615 SUB $01       ;
 $D617 LD ($C8BC),A  ;
*$D61A RET NC        ;
 $D61B CCF           ;
 $D61C RET           ;
*$D61D LD A,$14      ;
 $D61F LD ($C8BC),A  ;
 $D622 LD A,$FF      ;
 $D624 LD ($C8BD),A  ;
 $D627 RET NC        ;
 $D628 CCF           ;
 $D629 RET           ;

; Routine at D62A
;
; Used by the routines at #R$D5E6, #R$D649 and #R$D6AA.
c$D62A LD ($C8BB),A  ;
 $D62D LD BC,($C8BC) ;
 $D631 LD B,$00      ;
 $D633 LD A,C        ;
 $D634 CP $14        ;
 $D636 JR Z,$D648    ;
 $D638 LD A,($C8BB)  ;
 $D63B LD HL,$8105   ;
 $D63E ADD HL,BC     ;
 $D63F SUB (HL)      ;
 $D640 LD ($C8BD),A  ;
 $D643 LD A,C        ;
 $D644 CP $08        ;
 $D646 JR Z,$D6AA    ;
*$D648 RET           ;

; Routine at D649
;
; Used by the routine at #R$D5F5.
c$D649 AND $7F       ;
 $D64B PUSH AF       ;
 $D64C LD A,$FF      ;
 $D64E LD ($C8BB),A  ;
 $D651 POP AF        ;
 $D652 LD BC,$0000   ;
*$D655 LD ($C8B7),A  ;
 $D658 LD HL,$8106   ; Point #REGhl at the offsets table (#R$8106)
 $D65B ADD HL,BC     ;
 $D65C CP (HL)       ;
 $D65D JR C,$D672    ;
 $D65F INC C         ;
 $D660 LD A,C        ;
 $D661 CP $08        ;
 $D663 LD A,($C8B7)  ;
 $D666 JR NZ,$D655   ;
 $D668 LD A,$FF      ;
 $D66A LD ($C8BC),A  ;
 $D66D LD ($C8BD),A  ;
 $D670 SCF           ;
 $D671 RET           ;
*$D672 LD HL,$C8BC   ;
 $D675 LD (HL),C     ;
 $D676 LD ($C8B7),A  ;
 $D679 LD A,C        ;
 $D67A CP $00        ;
 $D67C JR Z,$D68B    ;
 $D67E LD A,($C8B7)  ;
 $D681 LD HL,$8105   ;
 $D684 ADD HL,BC     ;
 $D685 SUB (HL)      ;
 $D686 LD ($C8BD),A  ;
 $D689 SCF           ;
 $D68A RET           ;
*$D68B LD A,($C8B7)  ;
 $D68E SLA A         ;
 $D690 LD C,A        ;
 $D691 LD B,$00      ;
 $D693 LD HL,$CD54   ; Point #REGhl to the start of the command buffer
 $D696 ADD HL,BC     ;
 $D697 LD A,(HL)     ;
 $D698 LD ($C8B8),HL ;
 $D69B CALL $D5F5    ;
 $D69E JR C,$D6A8    ;
 $D6A0 LD HL,($C8B8) ;
 $D6A3 INC HL        ;
 $D6A4 LD A,(HL)     ;
 $D6A5 CALL $D62A    ;
*$D6A8 SCF           ;
 $D6A9 RET           ;

; Routine at D6AA
;
; Used by the routine at #R$D62A.
c$D6AA LD C,$08      ; Select table 8 (user flags)
 $D6AC LD A,($C8BD)  ;
 $D6AF LD B,A        ;
 $D6B0 CALL $D6C0    ; Get the data
 $D6B3 LD A,($C8BE)  ;
 $D6B6 CALL $D5F5    ;
 $D6B9 LD A,($C8BF)  ;
 $D6BC CALL $D62A    ;
 $D6BF RET           ;

; Look up data in a table
;
; Used by the routines at #R$C99B, #R$CA3C, #R$D412, #R$D6AA, #R$D7B5, #R$D801,
; #R$DBB6, #R$DCE0, #R$DD31, #R$DDD8, #R$DEE2, #R$DF1B, #R$DF79, #R$DF9C,
; #R$E259, #R$E265, #R$E30D, #R$E3CC, #R$E453 and #R$F83F.
; .
; On return, #R$C8C2 points to the start of the data table, and #R$C8BE to the four bytes extracted
;
; B Data index
; C Data table
c$D6C0 PUSH BC        ; Store #REGbc
 $D6C1 SLA C          ; Double the action type to get a word offset
 $D6C3 PUSH BC        ; Store #REGbc
 $D6C4 LD B,$00       ; { Add the base address (#R$80FE)
 $D6C6 LD HL,$80DE    ;
 $D6C9 ADD HL,BC      ; }
 $D6CA LD A,(HL)      ; { Put the table address in #R$C8C2
 $D6CB LD ($C8C2),A   ; 
 $D6CE INC HL         ; 
 $D6CF LD A,(HL)      ;
 $D6D0 LD ($C8C3),A   ; }
 $D6D3 POP BC         ; Restore #REGbc
 $D6D4 LD C,$00       ; { Initialize the parameters (#R$C8BE) to 0
 $D6D6 LD HL,$C8BE    ; }
 $D6D9 LD (HL),C      ; 
 $D6DA LD A,B         ; Get the index
 $D6DB SLA A          ; { Quadruple it to get a 4 byte offset,
 $D6DD RL (HL)        ; and adjust the parameter offset
 $D6DF SLA A          ; 
 $D6E1 RL (HL)        ; }
 $D6E3 LD IX,$C8C2    ; Point #REGix at the start of the data table (#R$C8C2)
 $D6E7 ADD A,(IX+$00) ; { Adjust the value with the data index offset
 $D6EA LD (IX+$00),A  ; so it points to the right place
 $D6ED LD A,(HL)      ;
 $D6EE ADC A,(IX+$01) ;
 $D6F1 LD (IX+$01),A  ; }
 $D6F4 LD IY,$C8BE    ; Point #REGiy at the parameters (#R$C8BE)
 $D6F8 LD B,$04       ; 4 entries to deal with
 $D6FA LD E,(IX+$00)  ; { Put the address of the frame in #REGix
 $D6FD LD D,(IX+$01)  ;
 $D700 PUSH DE        ;
 $D701 POP IX         ; }
*$D703 LD A,(IX+$00)  ; Put the byte found in the parameter buffer
 $D706 LD (IY+$00),A  ;
 $D709 INC IX         ; { Move to the next entry
 $D70B INC IY         ; }
 $D70D DJNZ $D703     ; Loop while there is more to do
 $D70F POP BC         ; { Otherwise restore #REGbc and return
 $D710 RET            ; }

; Push working varibles onto the stack
;
; Used by the routines at #R$D2E5, #R$D3AC, #R$D84C, #R$D889, #R$DD6B, #R$DD9B,
; #R$DDD8, #R$DE83, #R$DEE2, #R$DF1B and #R$DF79.
c$D711 POP DE        ; Pop top of the stack into #REGde
 $D712 LD HL,($C8D2) ; {Push main pointer to text (#R$C8D2)
 $D715 PUSH HL       ; }
 $D716 LD HL,($C8D0) ; {Push pointer to next command text to check (#R$C8D0)
 $D719 PUSH HL       ; }
 $D71A LD HL,($C8D4) ; {Push pointer to previous text (#R$C8D4)
 $D71D PUSH HL       ; }
 $D71E LD A,($C8CE)  ; {Push string flags (#R$C8CE)
 $D721 PUSH AF       ; }
 $D722 LD A,($C8CF)  ; {Push number of characters left (#R$C8CF)
 $D725 PUSH AF       ; }
 $D726 LD A,($C8F1)  ; {Push last index (#R$C8F1)
 $D729 PUSH AF       ; }
 $D72A LD A,($C8F0)  ; {Push last buffer entry (#R$C8F0)
 $D72D PUSH AF       ; }
 $D72E LD A,($C8F2)  ; {Push last matched data ID (#R$C8F2)
 $D731 PUSH AF       ; }
 $D732 PUSH DE       ; {Push top of the stack and return
 $D733 RET           ; }

; Pop working variables off the stack
;
; Used by the routines at #R$D2E5, #R$D3AC, #R$D84C, #R$D889, #R$DD6B, #R$DD9B,
; #R$DDD8, #R$DE83, #R$DEE2 and #R$DF79.
c$D734 POP DE        ; Pop top of the stack into #REGde
 $D735 POP AF        ; {
 $D736 LD ($C8F2),A  ; Push last matched data ID (#R$C8F2)}
 $D739 POP AF        ; {
 $D73A LD ($C8F0),A  ; Push last buffer entry (#R$C8F0)}
 $D73D POP AF        ; {
 $D73E LD ($C8F1),A  ; Push last index (#R$C8F1)}
 $D741 POP AF        ; {
 $D742 LD ($C8CF),A  ; Push number of characters left (#R$C8CF)}
 $D745 POP AF        ; {
 $D746 LD ($C8CE),A  ; Push string flags (#R$C8CE)}
 $D749 POP HL        ; {
 $D74A LD ($C8D4),HL ; Push pointer to previous text (#R$C8D4)}
 $D74D POP HL        ; {
 $D74E LD ($C8D0),HL ; Push pointer to next command text to check (#R$C8D0)}
 $D751 POP HL        ; {
 $D752 LD ($C8D2),HL ; Push main pointer to text (#R$C8D2)}
 $D755 PUSH DE       ; { Return to the value set in #REGde
 $D756 RET           ; }

; Current player
g$D757 DEFB $00

; Current room graphics
g$D758 DEFB $00

; Game status buffer entry at D759
g$D759 DEFW $0000

; Data block at D75B
b$D75B DEFW $D7B5
 $D75D DEFW $D7F2
 $D75F DEFW $D7FA
 $D761 DEFW $D801
 $D763 DEFW $D80D
 $D765 DEFW $D825
 $D767 DEFW $D84C
 $D769 DEFW $D877
 $D76B DEFW $D880
 $D76D DEFW $D889
 $D76F DEFW $D8D2
 $D771 DEFW $D927
 $D773 DEFW $D92A

; Data block at D775
b$D775 DEFB $00,$00,$00,$00,$03,$FA,$22,$78
 $D77D DEFB $53,$B5,$76
 
; Data block at D780 
b$D780 DEFB $00,$00,$00,$00

; Data block at D784
b$D784 DEFB $00,$00

; Routine at D786
;
; Used by the routine at #R$D9A9.
c$D786 CALL $D5E9    ;
 $D789 LD A,($C8BC)  ;
 $D78C CP $03        ;
 $D78E JR NZ,$D7B2   ;
 $D790 LD A,($C8BD)  ;
 $D793 SLA A         ;
 $D795 LD E,A        ;
 $D796 LD D,$00      ;
 $D798 LD IX,$D75B   ;
 $D79C ADD IX,DE     ;
 $D79E LD H,(IX+$01) ;
 $D7A1 LD L,(IX+$00) ;
 $D7A4 PUSH HL       ;
 $D7A5 CALL $D5E6    ;
 $D7A8 POP HL        ;
 $D7A9 LD A,($C8BD)  ;
 $D7AC LD B,A        ;
 $D7AD LD A,($C8BC)  ;
 $D7B0 LD C,A        ;
 $D7B1 JP (HL)       ;
*$D7B2 RET NC        ;
 $D7B3 CCF           ;
 $D7B4 RET           ;

; Routine at D7B5
;
; Used by the routine at #R$DC24.
c$D7B5 LD A,C        ;
 $D7B6 CP $0C        ;
 $D7B8 JR NZ,$D7C4   ;
 $D7BA LD A,B        ;
 $D7BB LD HL,$D758   ; Point #REGhl at the current room graphic ID (#R$D758)
 $D7BE CP (HL)       ; Is it this one?
 $D7BF JR Z,$D7F0    ; Jump forward if so
 $D7C1 JP $D7F7      ;
*$D7C4 LD A,C        ;
 $D7C5 CP $0E        ;
 $D7C7 JR Z,$D7D1    ;
 $D7C9 CP $0D        ;
 $D7CB JR NZ,$D7F7   ;
 $D7CD LD C,$10      ; { Use data table #N$10
 $D7CF JR $D7D3      ; }
*$D7D1 LD C,$11      ; Otherwise use data table #N$11
*$D7D3 CALL $D6C0    ; Get the data
 $D7D6 LD HL,($CD5E) ;
 $D7D9 LD DE,($C8BE) ; Point #REGde at the extracted data
 $D7DD SCF           ;
 $D7DE CCF           ;
 $D7DF SBC HL,DE     ;
 $D7E1 JR Z,$D7F0    ;
; This entry point is used by the routine at #R$D801.
*$D7E3 LD HL,($CD60) ;
 $D7E6 SCF           ;
 $D7E7 CCF           ;
 $D7E8 LD DE,($C8BE) ; Point #REGde at the extracted data
 $D7EC SBC HL,DE     ;
 $D7EE JR NZ,$D7F7   ;
; This entry point is used by the routines at #R$D7F2, #R$D7FA, #R$D877 and
; #R$D880.
*$D7F0 SCF           ;
 $D7F1 RET           ;

; Routine at D7F2
c$D7F2 LD A,C        ;
 $D7F3 CP $0E        ;
 $D7F5 JR Z,$D7F0    ;
; This entry point is used by the routines at #R$D7B5, #R$D7FA, #R$D801,
; #R$D80D, #R$D825, #R$D84C, #R$D877, #R$D880, #R$D889, #R$D8D2, #R$D92A,
; #R$D93E and #R$D958.
*$D7F7 RET NC        ;
 $D7F8 CCF           ;
 $D7F9 RET           ;

; Routine at D7FA
c$D7FA LD A,C        ;
 $D7FB CP $0D        ;
 $D7FD JR Z,$D7F0    ;
 $D7FF JR $D7F7      ;

; Routine at D801
c$D801 LD A,C        ;
 $D802 CP $0D        ;
 $D804 JR NZ,$D7F7   ;
 $D806 LD C,$10      ; Use data table #N$10
 $D808 CALL $D6C0    ; 
 $D80B JR $D7E3      ;

; Routine at D80D
c$D80D LD HL,($C8BA) ;
 $D810 LD ($D775),HL ;
 $D813 CALL $D5E6    ;
 $D816 LD HL,($D775) ;
 $D819 LD DE,($C8BA) ;
 $D81D SCF           ;
 $D81E CCF           ;
 $D81F SBC HL,DE     ;
 $D821 JR NZ,$D7F7   ;
 $D823 SCF           ;
 $D824 RET           ;

; Routine at D825
c$D825 LD A,C        ;
 $D826 CP $14        ;
 $D828 JR NZ,$D7F7   ;
 $D82A LD HL,($C8BA) ;
 $D82D LD ($D775),HL ;
 $D830 CALL $D5E6    ;
 $D833 LD A,($C8BC)  ;
 $D836 CP $14        ;
 $D838 JR NZ,$D7F7   ;
 $D83A LD HL,($D775) ;
 $D83D LD DE,($C8BA) ;
 $D841 SCF           ;
 $D842 CCF           ;
 $D843 SBC HL,DE     ;
 $D845 JP Z,$D7F7    ;
 $D848 JR C,$D7F7    ;
 $D84A SCF           ;
 $D84B RET           ;

; Routine at D84C
c$D84C LD A,C        ;
 $D84D CP $0E        ;
 $D84F JR Z,$D859    ;
 $D851 CP $0C        ;
 $D853 JR Z,$D859    ;
 $D855 CP $0D        ;
 $D857 JR NZ,$D7F7   ;
*$D859 CALL $D711    ; Push local variables onto the stack
 $D85C LD A,$53      ;
 $D85E CALL $CCD2    ;
 $D861 JR NC,$D86D   ;
*$D863 CALL $D93E    ;
 $D866 JR C,$D872    ;
 $D868 CALL $CCF5    ;
 $D86B JR C,$D863    ;
*$D86D CALL $D734    ; Pop working variables off the stack
 $D870 JR $D7F7      ;
*$D872 CALL $D734    ; Pop working variables off the stack
 $D875 SCF           ;
 $D876 RET           ;

; Routine at D877
c$D877 LD A,C        ;
 $D878 CP $05        ;
 $D87A JP Z,$D7F0    ;
 $D87D JP $D7F7      ;

; Routine at D880
c$D880 LD A,C        ;
 $D881 CP $0C        ;
 $D883 JP Z,$D7F0    ;
 $D886 JP $D7F7      ;

; Routine at D889
c$D889 LD A,C        ;
 $D88A CP $04        ;
 $D88C JP NZ,$D7F7   ;
 $D88F LD A,($C8BA)  ;
 $D892 LD ($D777),A  ;
 $D895 CALL $D5E6    ;
 $D898 LD A,($C8BC)  ;
 $D89B LD C,A        ;
 $D89C CP $05        ;
 $D89E JR Z,$D8A5    ;
 $D8A0 CP $0C        ;
 $D8A2 JP NZ,$D7F7   ;
*$D8A5 CALL $D711    ; Push local variables onto the stack
 $D8A8 LD A,C        ;
 $D8A9 LD ($D778),A  ;
 $D8AC LD HL,($C8BA) ;
 $D8AF LD ($D775),HL ;
 $D8B2 LD A,($D758)  ;
 $D8B5 LD B,A        ;
 $D8B6 LD C,$0C      ;
 $D8B8 LD A,$57      ;
 $D8BA CALL $CCD2    ;
 $D8BD JR NC,$D8C9   ;
*$D8BF CALL $D958    ;
 $D8C2 JR C,$D8CD    ;
 $D8C4 CALL $CCF5    ;
 $D8C7 JR C,$D8BF    ;
*$D8C9 CALL $D734    ; Pop working variables off the stack
 $D8CC RET           ;
*$D8CD CALL $D734    ; Pop working variables off the stack
 $D8D0 SCF           ;
 $D8D1 RET           ;

; Routine at D8D2
c$D8D2 LD B,$08      ;
*$D8D4 LD A,($D77C)  ;
 $D8D7 CP $00        ;
 $D8D9 JP P,$D8F7    ;
 $D8DC LD IX,$D779   ;
 $D8E0 LD IY,$D77D   ;
 $D8E4 LD A,(IX+$00) ;
 $D8E7 XOR (IY+$00)  ;
 $D8EA LD (IX+$00),A ;
 $D8ED LD A,(IX+$01) ;
 $D8F0 XOR (IY+$01)  ;
 $D8F3 LD (IX+$01),A ;
 $D8F6 SCF           ;
*$D8F7 LD IX,$D779   ;
 $D8FB RL (IX+$00)   ;
 $D8FF RL (IX+$01)   ;
 $D903 RL (IX+$02)   ;
 $D907 RL (IX+$03)   ;
 $D90B DJNZ $D8D4    ;
 $D90D LD A,($C8BA)  ;
 $D910 CP $00        ;
 $D912 JP NZ,$D7F7   ;
 $D915 LD A,($D77C)  ;
 $D918 CP $65        ;
 $D91A JR C,$D91E    ;
 $D91C SUB $64       ;
*$D91E LD HL,$C8BB   ;
 $D921 CP (HL)       ;
 $D922 JP NC,$D7F7   ;
 $D925 SCF           ;
 $D926 RET           ;

; Routine at D927
c$D927 JP $DDD1      ;

; Routine at D92A
c$D92A LD A,C        ;
 $D92B CP $0E        ;
 $D92D JP NZ,$D7F7   ;
 $D930 LD A,B        ;
 $D931 CALL $E453    ;
 $D934 LD A,($C8BE)  ;
 $D937 AND $40       ;
 $D939 JP NZ,$D7F7   ;
 $D93C SCF           ;
 $D93D RET           ;

; Routine at D93E
;
; Used by the routine at #R$D84C.
c$D93E LD A,($C8CE)  ;
 $D941 CP $00        ;
 $D943 JP NZ,$D7F7   ;
 $D946 CALL $D5E6    ;
 $D949 LD HL,($C8BA) ;
 $D94C LD DE,($CD56) ;
 $D950 SCF           ;
 $D951 CCF           ;
 $D952 SBC HL,DE     ;
 $D954 JR NZ,$D93E   ;
 $D956 SCF           ;
 $D957 RET           ;

; Routine at D958
;
; Used by the routine at #R$D889.
c$D958 CALL $D5E6    ;
 $D95B LD A,($C8BA)  ;
 $D95E LD HL,$D777   ;
 $D961 CP (HL)       ;
 $D962 JP NZ,$D7F7   ;
 $D965 CALL $D5E6    ;
 $D968 LD BC,($C8BA) ;
 $D96C LD A,($D778)  ;
 $D96F CP $05        ;
 $D971 JR Z,$D97F    ;
 $D973 LD HL,($D775) ;
 $D976 PUSH BC       ;
 $D977 POP DE        ;
 $D978 SCF           ;
 $D979 CCF           ;
 $D97A SBC HL,DE     ;
 $D97C JP NZ,$D7F7   ;
*$D97F LD ($D759),BC ;
 $D983 CALL $D5E6    ;
 $D986 LD HL,($C8BA) ;
 $D989 LD ($CD64),HL ;
 $D98C LD A,($D778)  ;
 $D98F CP $0C        ;
 $D991 JR Z,$D9A7    ;
*$D993 LD A,($C8CE)  ;
 $D996 CP $00        ;
 $D998 JP NZ,$D7F7   ;
 $D99B CALL $D5E6    ;
 $D99E LD A,($C8BA)  ;
 $D9A1 LD HL,$D775   ;
 $D9A4 CP (HL)       ;
 $D9A5 JR NZ,$D993   ;
*$D9A7 SCF           ;
 $D9A8 RET           ;

; Process logic in a line of data
;
; Used by the routines at #R$DA73, #R$DF5E and #R$E30D.
c$D9A9 LD A,$00      ; Set #REGa to 0 to set some flags
 $D9AB LD ($D784),A  ;
 $D9AE LD ($D51F),A  ;
 $D9B1 LD A,($C8CE)  ;
 $D9B4 CP $00        ;
 $D9B6 JR NZ,$DA26   ;
*$D9B8 LD A,($C8CE)  ;
 $D9BB CP $00        ;
 $D9BD JR NZ,$DA13   ;
 $D9BF CALL $CB10    ;
 $D9C2 CP $2C        ;
 $D9C4 JR Z,$DA13    ;
 $D9C6 CP $2B        ;
 $D9C8 JR NZ,$D9D1   ;
 $D9CA LD A,$FF      ;
 $D9CC LD ($D51F),A  ;
 $D9CF JR $D9B8      ;
*$D9D1 LD C,A        ;
 $D9D2 CP $00        ;
 $D9D4 JP P,$D9DF    ;
 $D9D7 CALL $D786    ;
 $D9DA CALL $DA2B    ;
 $D9DD JR $D9B8      ;
*$D9DF CALL $DA4C    ;
 $D9E2 LD ($D785),A  ;
 $D9E5 LD ($C8B7),A  ;
 $D9E8 LD A,C        ;
 $D9E9 CP $2D        ;
 $D9EB JR NZ,$D9F4   ;
 $D9ED LD A,($C8B7)  ;
 $D9F0 XOR $FF       ;
 $D9F2 JR $DA0C      ;
*$D9F4 CP $2F        ;
 $D9F6 JR NZ,$DA01   ;
 $D9F8 CALL $DA4C    ;
 $D9FB LD HL,$D785   ;
 $D9FE OR (HL)       ;
 $D9FF JR $DA0C      ;
*$DA01 CP $2E        ;
 $DA03 JR NZ,$DA29   ;
 $DA05 CALL $DA4C    ;
 $DA08 LD HL,$D785   ;
 $DA0B AND (HL)      ;
*$DA0C SRL A         ;
 $DA0E CALL $DA2B    ;
 $DA11 JR $D9B8      ;
*$DA13 CALL $DA4C    ;
 $DA16 LD ($C8B7),A  ;
 $DA19 LD A,($D784)  ;
 $DA1C CP $00        ;
 $DA1E JR NZ,$DA29   ;
 $DA20 LD A,($C8B7)  ;
 $DA23 SRL A         ;
 $DA25 RET           ;
*$DA26 SCF           ;
 $DA27 RET           ;
*$DA28 POP DE        ;
*$DA29 SCF           ;
 $DA2A RET           ;
*$DA2B LD IX,$D780   ;
 $DA2F RL (IX+$00)   ;
 $DA33 RL (IX+$01)   ;
 $DA37 RL (IX+$02)   ;
 $DA3B RL (IX+$03)   ;
 $DA3F LD A,($D784)  ;
 $DA42 ADD A,$01     ;
 $DA44 LD ($D784),A  ;
 $DA47 CP $20        ;
 $DA49 JR NC,$DA28   ;
 $DA4B RET           ;
*$DA4C LD A,($D784)  ;
 $DA4F SUB $01       ;
 $DA51 LD ($D784),A  ;
 $DA54 JP M,$DA28    ;
 $DA57 LD IX,$D780   ;
 $DA5B SRL (IX+$03)  ;
 $DA5F RR (IX+$02)   ;
 $DA63 RR (IX+$01)   ;
 $DA67 RR (IX+$00)   ;
 $DA6B JR C,$DA70    ;
 $DA6D LD A,$00      ;
 $DA6F RET           ;
*$DA70 LD A,$FF      ;
 $DA72 RET           ;

; Parse a command (?)
;
; Used by the routines at #R$D520, #R$DE83 and #R$E2E2.
; At this point, #R$C8D0 points to the command text
c$DA73 CALL $CB96    ;
 $DA76 CALL $CB10    ;
 $DA79 CP $2A        ;
 $DA7B JR NZ,$DAC2   ;
*$DA7D CALL $D9A9    ;
 $DA80 JR NC,$DA8E   ;
 $DA82 LD A,($D51F)  ;
 $DA85 PUSH AF       ; { Run the command
 $DA86 CALL $DAB0    ;
 $DA89 POP AF        ; }
 $DA8A CP $00        ;
 $DA8C JR Z,$DAAE    ;
*$DA8E LD IY,($C8D0) ;
 $DA92 LD A,(IY+$01) ;
 $DA95 CP $00        ;
 $DA97 JP M,$DA9E    ;
 $DA9A CP $2A        ;
 $DA9C JR NZ,$DAAB   ;
*$DA9E CALL $CB96    ;
 $DAA1 CALL $CB10    ;
 $DAA4 CP $00        ;
 $DAA6 JP M,$DA8E    ;
 $DAA9 JR $DA7D      ;
*$DAAB SCF           ;
 $DAAC CCF           ;
 $DAAD RET           ;
*$DAAE SCF           ;
 $DAAF RET           ;

; Check input to see if a command can be executed
;
; Used by the routine at #R$DA73.
c$DAB0 LD IY,($C8D0) ; Point #REGiy at the command text to check
 $DAB4 LD A,(IY+$01) ; { Is there anything to do?
 $DAB7 CP $00        ; }
 $DAB9 JP P,$DAD1    ; Jump forward if there isn't
 $DABC CALL $CB96    ; { Make sure the input is up to date
 $DABF CALL $CB10    ; }
; This entry point is used by the routine at #R$DA73.
*$DAC2 LD HL,$E150   ; { Signal command handled
 $DAC5 LD (HL),$00   ; }
 $DAC7 CALL $DAD3    ; Run the command
 $DACA LD A,($E150)  ; { Are there more commands queued up?
 $DACD CP $00        ; }
 $DACF JR Z,$DAB0    ; Jump back to handle them if so
*$DAD1 SCF           ; { Set the carry flag and return
 $DAD2 RET           ; }

; Process any active command
;
; Used by the routine at #R$DAB0.
;
; A Command ID
c$DAD3 AND $7F       ; Reset bit 7
 $DAD5 LD HL,$8107   ; { Subtract the relevant offset (#N$12?)
 $DAD8 SUB (HL)      ; }
 $DAD9 SLA A         ; Double this to get a word offset
 $DADB LD E,A        ; { Put the offset in #REGde
 $DADC LD D,$00      ; }
 $DADE LD IX,$DAEB   ; { Add the base address of the command table (#R$DAEB)
 $DAE2 ADD IX,DE     ; }
 $DAE4 LD H,(IX+$01) ; { Extract the jump pointer from this address
 $DAE7 LD L,(IX+$00) ; }
 $DAEA JP (HL)       ; Run it

; Command jump tables
b$DAEB DEFW $DBB6   ; Command 00
 $DAED DEFW $DBB6   ; Command 01
 $DAEF DEFW $DC07   ; Command 02
 $DAF1 DEFW $DC0F   ; Command 03
 $DAF3 DEFW $DC17   ; Command 04
 $DAF5 DEFW $DC24   ; Command 05
 $DAF7 DEFW $DC7E   ; Command 06
 $DAF9 DEFW $DC85   ; Command 07
 $DAFB DEFW $DCA0   ; Command 08
 $DAFD DEFW $DCC4   ; Command 09
 $DAFF DEFW $DCE0   ; Command 0A
 $DB01 DEFW $DD31   ; Command 0B
 $DB03 DEFW $DD56   ; Command 0C
 $DB05 DEFW $DD59   ; Command 0D
 $DB07 DEFW $DD5F   ; Command 0E
 $DB09 DEFW $DD65   ; Command 0F
 $DB0B DEFW $DD6B   ; Command 10
 $DB0D DEFW $DD9B   ; Command 11
 $DB0F DEFW $DDCD   ; Command 12
 $DB11 DEFW $DDD8   ; Command 13
 $DB13 DEFW $DE83   ; Command 14
 $DB15 DEFW $DED0   ; Command 15
 $DB17 DEFW $DED9   ; Command 16
 $DB19 DEFW $DEE2   ; Command 17
 $DB1B DEFW $DF1B   ; Command 18
 $DB1D DEFW $DF52   ; Command 19
 $DB1F DEFW $DF58   ; Command 1A
 $DB21 DEFW $DD71   ; Command 1B
 $DB23 DEFW $DD8E   ; Command 1C

; Data block at DB25
b$DB25 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DB2D DEFB $00,$00,$00,$00,$00,$00,$00

; Print a blocking message and wait for SPACE to be pressed
;
; Used by the routines at #R$D0D9 and #R$DC17.
c$DB34 PUSH IY       ; Preserve #REGiy
 $DB36 LD HL,$4007   ; { Set the starting screen address
 $DB39 LD ($BF6A),HL ; }
 $DB3C LD A,$0D      ; { Put the length of the string at #R$D1E3 into #R$F529
 $DB3E LD HL,$D1E3   ; This code is conceptually similar to strlen()
 $DB41 LD BC,$0032   ;
 $DB44 CPIR          ; 
 $DB46 LD DE,$D1E4   ; 
 $DB49 SCF           ;
 $DB4A CCF           ;
 $DB4B SBC HL,DE     ;
 $DB4D LD ($F529),HL ; }
 $DB50 LD HL,$4006   ; { Clear #N$14 characters starting at #N$4006
 $DB53 LD BC,$0014   ; }
 $DB56 CALL $F30B    ; Clear this part of the screen
 $DB59 LD HL,$5806   ; { Set the attributes to #N$4F (bright white on blue)
 $DB5C LD DE,$5807   ;
 $DB5F LD BC,$0014   ;
 $DB62 LD (HL),$4F   ;
 $DB64 LDIR          ; }
 $DB66 LD IY,$D1E3   ; Point #REGiy at the text buffer
 $DB6A CALL $F52B    ; Print the string
 $DB6D LD A,$00      ; { Disable interrupts (#R$BFB0)
 $DB6F LD ($BFB0),A  ; }
 $DB72 LD DE,$0105   ; { Beep using the ROM routine at #N$03B5
 $DB75 LD HL,$031A   ;
 $DB78 CALL $03B5    ; }
; Wait for SPACE to be pressed
*$DB7B LD A,$00      ; { Clear the keyboard buffer
 $DB7D LD ($C70D),A  ;
 $DB80 LD ($C70E),A  ; }
 $DB83 CALL $C70F    ; Read a keypress
 $DB86 LD A,($C70D)  ; { Was SPACE pressed?
 $DB89 CP $20        ; }
 $DB8B JR NZ,$DB7B   ; Loop back if not
; SPACE was pressed, so carry on
 $DB8D LD ($C2CC),A  ;
 $DB90 LD A,$00      ;
 $DB92 LD ($C70D),A  ;
 $DB95 LD ($C70E),A  ;
 $DB98 LD A,$01      ; { Restore interrupts (#R$BFB0)
 $DB9A LD ($BFB0),A  ; }
 $DB9D LD HL,$4006   ;  { Restore the border edge
 $DBA0 LD BC,$0014   ;
 $DBA3 CALL $FD15    ; }
 $DBA6 LD HL,$5806   ; { Set the message attribute back to #N$38 (black on white)
 $DBA9 LD DE,$5807   ;
 $DBAC LD BC,$0014   ;
 $DBAF LD (HL),$38   ;
 $DBB1 LDIR          ; }
 $DBB3 POP IY        ; { Restore #REGiy and return
 $DBB5 RET           ; }

; Command 00 / 01 - start game
;
; Used by the routine at #R$E275.
c$DBB6 LD A,$FF      ;
 $DBB8 LD ($E150),A  ;
 $DBBB CALL $D5E6    ;
 $DBBE LD A,($C8BC)  ;
 $DBC1 CP $0E        ;
 $DBC3 JR NZ,$DC06   ;
 $DBC5 LD A,($C8BD)  ;
 $DBC8 PUSH AF       ;
 $DBC9 CALL $D5E6    ;
 $DBCC POP AF        ;
 $DBCD LD B,A        ;
 $DBCE LD C,$13      ; Use data table #N$13
 $DBD0 CALL $D6C0    ; Look up the data
 $DBD3 LD IX,$CD62   ; Point #REGix at the last sampled time
 $DBD7 LD IY,$C8BA   ;
 $DBDB LD H,(IX+$00) ;
 $DBDE LD L,(IX+$01) ;
 $DBE1 LD D,(IY+$00) ;
 $DBE4 LD E,(IY+$01) ;
 $DBE7 ADD HL,DE     ;
 $DBE8 LD IX,($C8C2) ;
 $DBEC LD A,(IX+$00) ;
 $DBEF AND $40       ;
 $DBF1 OR H          ;
 $DBF2 LD H,A        ;
 $DBF3 LD (IX+$00),H ;
 $DBF6 LD (IX+$01),L ;
 $DBF9 LD A,($C8D4)  ;
 $DBFC LD (IX+$02),A ;
 $DBFF LD A,($C8D5)  ;
 $DC02 LD (IX+$03),A ;
 $DC05 RET           ;
*$DC06 RET           ;

; Command 02 - Update panel text
c$DC07 CALL $DF5E    ; Process the current line
 $DC0A RET NC        ; Return if there is more to process
 $DC0B CALL $F3C5    ; { Display the panel
 $DC0E RET           ; and return }

; Command 03 - Speech background
c$DC0F CALL $DF5E    ;
 $DC12 RET NC        ;
 $DC13 CALL $F1A2    ;
 $DC16 RET           ;

; Command 04 - Restart game
c$DC17 LD A,$FF      ; { Block input (#R$CD7B)
 $DC19 LD ($CD7B),A  ; }
 $DC1C CALL $DF5E    ;
 $DC1F RET NC        ;
 $DC20 CALL $DB34    ; Print a blocking message and beep
 $DC23 RET           ;

; Command 05 - Speech
c$DC24 CALL $DF5E    ;
 $DC27 RET NC        ;
 $DC28 LD A,($D757)  ;
 $DC2B PUSH AF       ;
 $DC2C CALL $E265    ; Get the current character
 $DC2F CALL $CA3C    ;
 $DC32 LD C,$0D      ;
 $DC34 LD B,$06      ;
 $DC36 CALL $D7B5    ;
 $DC39 JR NC,$DC7A   ;
 $DC3B LD HL,$0000   ;
 $DC3E LD ($E45C),HL ;
 $DC41 LD HL,$4858   ;
 $DC44 LD ($E45E),HL ;
 $DC47 LD HL,$0000   ;
 $DC4A LD ($EB2D),HL ;
 $DC4D CALL $ECD4    ; Update the panels
 $DC50 LD A,$5B      ;
 $DC52 CALL $EB67    ; Draw a large character
 $DC55 LD BC,$0216   ;
 $DC58 LD DE,$090B   ;
 $DC5B LD A,$20      ;
 $DC5D LD ($E459),A  ;
 $DC60 CALL $EBC8    ;
 $DC63 LD A,$38      ;
 $DC65 LD ($F30A),A  ;
 $DC68 CALL $E265    ; Get the current character
 $DC6B LD ($F5C3),A  ;
 $DC6E LD A,$01      ;
 $DC70 LD ($F5C2),A  ;
 $DC73 LD IX,$D1E3   ; Point #REGix at the text buffer (#R$D1E3)
 $DC77 CALL $F1CA    ; Print the speech bubble
*$DC7A POP AF        ;
 $DC7B JP $CA3C      ;

; Command 06 - Big text panel
c$DC7E CALL $DF5E    ;
 $DC81 RET NC        ;
 $DC82 JP $FCB4      ; Draw the panel

; Command 07 - Update inventory (?)
c$DC85 CALL $DF9C    ;
 $DC88 LD (IY+$00),A ;
 $DC8B DEC IY        ;
 $DC8D LD A,($C8BA)  ;
 $DC90 LD (IY+$00),A ;
 $DC93 LD A,($DB32)  ;
 $DC96 CP $00        ;
 $DC98 RET NZ        ;
 $DC99 CALL $E265    ; Get the current character
 $DC9C CALL $CA3C    ;
 $DC9F RET           ;

; Command 08
c$DCA0 CALL $DF9C     ;
 $DCA3 ADD A,(IY+$00) ;
 $DCA6 LD (IY+$00),A  ;
 $DCA9 DEC IY         ;
 $DCAB LD A,($C8BA)   ;
 $DCAE ADC A,(IY+$00) ;
 $DCB1 LD (IY+$00),A  ;
 $DCB4 AND $C0        ;
 $DCB6 RET Z          ;
; This entry point is used by the routine at #R$DCC4.
*$DCB7 LD A,$00       ;
 $DCB9 LD IY,($C8C2)  ;
 $DCBD LD (IY+$00),A  ;
 $DCC0 LD (IY+$01),A  ;
 $DCC3 RET            ;

; Command 09
c$DCC4 CALL $DF9C    ;
 $DCC7 LD HL,$C8BB   ;
 $DCCA LD A,(IY+$00) ;
 $DCCD SUB (HL)      ;
 $DCCE LD (IY+$00),A ;
 $DCD1 DEC HL        ;
 $DCD2 DEC IY        ;
 $DCD4 LD A,(IY+$00) ;
 $DCD7 SBC A,(HL)    ;
 $DCD8 LD (IY+$00),A ;
 $DCDB AND $C0       ;
 $DCDD JR NZ,$DCB7   ;
 $DCDF RET           ;

; Command 0A
c$DCE0 CALL $D5E6    ;
 $DCE3 LD B,$10      ;
 $DCE5 LD A,($C8BC)  ;
 $DCE8 CP $0D        ;
 $DCEA JR Z,$DCF1    ;
 $DCEC CP $0E        ;
 $DCEE RET NZ        ;
 $DCEF LD B,$11      ;
*$DCF1 LD A,B        ;
 $DCF2 LD ($D775),A  ;
 $DCF5 LD A,($C8BD)  ;
 $DCF8 LD ($D776),A  ;
 $DCFB CALL $D5E6    ;
 $DCFE LD A,($C8BC)  ;
 $DD01 CP $0C        ;
 $DD03 JR Z,$DD08    ;
 $DD05 CP $0E        ;
 $DD07 RET NZ        ;
*$DD08 LD BC,($D775) ;
 $DD0C CALL $D6C0    ; 
 $DD0F LD IY,($C8C2) ;
 $DD13 LD A,($C8BA)  ;
 $DD16 LD (IY+$00),A ;
 $DD19 LD A,($C8BB)  ;
 $DD1C LD (IY+$01),A ;
 $DD1F LD A,($D775)  ;
 $DD22 CP $11        ;
 $DD24 RET NZ        ;
 $DD25 LD A,($D776)  ;
 $DD28 LD HL,$D757   ;
 $DD2B CP (HL)       ;
 $DD2C RET NZ        ;
 $DD2D CALL $CA3C    ;
 $DD30 RET           ;

; Command 0B
c$DD31 LD C,$11      ; Use data table #N$11
 $DD33 LD A,($D757)  ;
 $DD36 LD B,A        ;
 $DD37 CALL $D6C0    ; 
 $DD3A LD IY,($C8C2) ;
 $DD3E LD A,($D759)  ;
 $DD41 LD (IY+$00),A ;
 $DD44 LD A,($D75A)  ;
 $DD47 LD (IY+$01),A ;
 $DD4A LD A,($D757)  ;
 $DD4D CALL $CA3C    ;
 $DD50 LD A,$03      ;
 $DD52 LD ($F689),A  ;
 $DD55 RET           ;

; Command 0C - RESTART
c$DD56 JP $C920      ;

; Command 0D
c$DD59 LD A,$03      ;
 $DD5B LD ($E151),A  ;
 $DD5E RET           ;

; Command 0E
c$DD5F LD A,$01      ;
 $DD61 LD ($E151),A  ;
 $DD64 RET           ;

; Command 0F - SAVE
c$DD65 CALL $C920    ;
 $DD68 JP $CA21      ;

; Command 10
c$DD6B LD A,$07      ;
 $DD6D LD ($E151),A  ;
 $DD70 RET           ;
 $DD71 CALL $D711    ; Push local variables onto the stack
 $DD74 CALL $D5E6    ;
 $DD77 LD A,($C8BC)  ;
 $DD7A CP $0E        ;
 $DD7C JR NZ,$DD8A   ;
 $DD7E LD A,($D757)  ;
 $DD81 LD ($DB33),A  ;
 $DD84 LD A,($C8BD)  ;
 $DD87 CALL $CA3C    ;
*$DD8A CALL $D734    ; Pop working variables off the stack
 $DD8D RET           ;
 $DD8E CALL $D711    ; Push local variables onto the stack
 $DD91 LD A,($DB33)  ;
 $DD94 CALL $CA3C    ;
 $DD97 CALL $D734    ; Pop working variables off the stack
 $DD9A RET           ;

; Command 11
c$DD9B CALL $D5E6    ;
 $DD9E CALL $D711    ; Push local variables onto the stack
 $DDA1 LD A,($C8BC)  ;
 $DDA4 LD C,A        ;
 $DDA5 CP $0D        ;
 $DDA7 JR Z,$DDB1    ;
 $DDA9 CP $0E        ;
 $DDAB JR Z,$DDB1    ;
 $DDAD CP $0C        ;
 $DDAF JR NZ,$DDC9   ;
*$DDB1 LD A,($C8BD)  ;
 $DDB4 LD B,A        ;
 $DDB5 LD A,$58      ;
 $DDB7 CALL $CCD2    ;
 $DDBA JR NC,$DDC9   ;
*$DDBC CALL $DF5E    ;
 $DDBF JR NC,$DDC4   ;
 $DDC1 CALL $F1A2    ;
*$DDC4 CALL $CCF5    ;
 $DDC7 JR C,$DDBC    ;
*$DDC9 CALL $D734    ; Pop working variables off the stack
 $DDCC RET           ;

; Command 12 - RESET
c$DDCD CALL $0000    ;
 $DDD0 RET           ;
; This entry point is used by the routines at #R$D927 and #R$DDD8.
*$DDD1 LD A,$FF      ;
 $DDD3 LD ($DB29),A  ;
 $DDD6 JR $DDED      ;

; Command 13
c$DDD8 CALL $D5E6    ;
 $DDDB CALL $DDD1    ;
 $DDDE JR C,$DDE1    ;
 $DDE0 RET           ;
*$DDE1 LD A,$00      ;
 $DDE3 LD ($DB29),A  ;
 $DDE6 LD BC,$0417   ;
 $DDE9 LD ($E088),BC ;
; This entry point is used by the routine at #R$DDCD.
*$DDED CALL $D711    ; Push local variables onto the stack
 $DDF0 LD A,($C8BC)  ;
 $DDF3 LD ($DB26),A  ;
 $DDF6 LD C,A        ;
 $DDF7 CP $0C        ;
 $DDF9 JR Z,$DDFF    ;
 $DDFB CP $0E        ;
 $DDFD JR NZ,$DE78   ;
*$DDFF LD A,($C8BD)  ;
 $DE02 LD ($DB25),A  ;
 $DE05 LD A,$11      ;
 $DE07 LD ($DB27),A  ;
 $DE0A LD A,$0E      ;
 $DE0C LD ($DB28),A  ;
 $DE0F LD A,($C8C8)  ;
 $DE12 LD ($DB2A),A  ;
 $DE15 LD HL,($C8BA) ;
 $DE18 LD ($DB2B),HL ;
*$DE1B LD HL,$DB2A   ;
 $DE1E DEC (HL)      ;
 $DE1F JP M,$DE5E    ;
 $DE22 LD A,($DB2A)  ;
 $DE25 LD B,A        ;
 $DE26 LD A,($DB27)  ;
 $DE29 CP $10        ;
 $DE2B JR Z,$DE39    ;
 $DE2D LD A,($DB2A)  ;
 $DE30 LD HL,$D757   ;
 $DE33 CP (HL)       ;
 $DE34 JR Z,$DE1B    ;
 $DE36 LD A,($DB27)  ;
*$DE39 LD C,A        ;
 $DE3A CALL $D6C0    ; 
 $DE3D LD HL,($C8BE) ;
 $DE40 LD DE,($DB2B) ;
 $DE44 SCF           ;
 $DE45 CCF           ;
 $DE46 SBC HL,DE     ;
 $DE48 JR NZ,$DE1B   ;
 $DE4A LD A,($DB29)  ;
 $DE4D CP $00        ;
 $DE4F JR NZ,$DE7E   ;
 $DE51 LD A,($DB28)  ;
 $DE54 LD C,A        ;
 $DE55 LD A,($DB2A)  ;
 $DE58 LD B,A        ;
 $DE59 CALL $DFBE    ;
 $DE5C JR $DE1B      ;
*$DE5E LD A,($DB28)  ;
 $DE61 CP $0D        ;
 $DE63 JR Z,$DE78    ;
 $DE65 LD A,$0D      ;
 $DE67 LD ($DB28),A  ;
 $DE6A LD A,$10      ;
 $DE6C LD ($DB27),A  ;
 $DE6F LD A,($C8C9)  ;
 $DE72 LD ($DB2A),A  ;
 $DE75 JP $DE1B      ;
*$DE78 CALL $D734    ; Pop working variables off the stack
 $DE7B SCF           ;
 $DE7C CCF           ;
 $DE7D RET           ;
*$DE7E CALL $D734    ; Pop working variables off the stack
 $DE81 SCF           ;
 $DE82 RET           ;

; Command 14
c$DE83 CALL $D711    ; Push local variables onto the stack
 $DE86 CALL $D5E6    ;
 $DE89 LD A,($C8BC)  ;
 $DE8C LD C,A        ;
 $DE8D CP $0E        ;
 $DE8F JR NZ,$DE9E   ;
 $DE91 LD A,($C8BD)  ;
 $DE94 LD B,A        ;
 $DE95 LD HL,$D757   ;
 $DE98 CP (HL)       ;
 $DE99 JR Z,$DEA2    ;
 $DE9B CALL $DEB9    ;
*$DE9E CALL $D734    ; Pop working variables off the stack
 $DEA1 RET           ;
*$DEA2 LD B,$00      ;
*$DEA4 LD A,B        ;
 $DEA5 LD ($DB31),A  ;
 $DEA8 CALL $DEB9    ;
 $DEAB LD A,($DB31)  ;
 $DEAE ADD A,$01     ;
 $DEB0 LD B,A        ;
 $DEB1 LD HL,$C8C8   ;
 $DEB4 CP (HL)       ;
 $DEB5 JR NZ,$DEA4   ;
 $DEB7 JR $DE9E      ;
*$DEB9 LD C,$0E      ;
 $DEBB LD A,$4B      ;
 $DEBD CALL $CCD2    ;
 $DEC0 JR NC,$DECF   ;
*$DEC2 CALL $DFD2    ;
 $DEC5 JR NC,$DECA   ;
 $DEC7 CALL $DA73    ;
*$DECA CALL $CCF5    ;
 $DECD JR C,$DEC2    ;
*$DECF RET           ;

; Command 15
c$DED0 CALL $DF79    ;
 $DED3 AND $BF       ;
 $DED5 LD (IY+$00),A ;
 $DED8 RET           ;

; Command 16
c$DED9 CALL $DF79    ;
 $DEDC OR $40        ;
 $DEDE LD (IY+$00),A ;
 $DEE1 RET           ;

; Command 17
c$DEE2 CALL $D711    ; Push local variables onto the stack
 $DEE5 CALL $D5E6    ;
 $DEE8 LD A,($C8BC)  ;
 $DEEB CP $0E        ;
 $DEED JR NZ,$DF17   ;
 $DEEF LD C,$12      ; Select data table #N$12
 $DEF1 LD A,($C8BD)  ;
 $DEF4 LD B,A        ;
 $DEF5 CALL $D6C0    ; 
 $DEF8 LD HL,($C8BE) ;
 $DEFB PUSH HL       ;
 $DEFC CALL $CB10    ;
 $DEFF CALL $CB10    ;
 $DF02 LD HL,$810D   ;
 $DF05 SUB (HL)      ;
 $DF06 LD B,A        ;
 $DF07 LD C,$08      ; Select data table 8 (user flags)
 $DF09 CALL $D6C0    ; 
 $DF0C LD IY,($C8C2) ;
 $DF10 POP HL        ;
 $DF11 LD (IY+$00),L ;
 $DF14 LD (IY+$01),H ;
; This entry point is used by the routine at #R$DF1B.
*$DF17 CALL $D734    ; Pop working variables off the stack
 $DF1A RET           ;

; Command 18
c$DF1B CALL $D711    ; Push local variables onto the stack
 $DF1E CALL $D5E6    ;
 $DF21 LD A,($C8BC)  ;
 $DF24 CP $0E        ;
 $DF26 JR NZ,$DF17   ;
 $DF28 LD C,$12      ;
 $DF2A LD A,($C8BD)  ;
 $DF2D LD B,A        ;
 $DF2E CALL $D6C0    ; 
 $DF31 LD HL,($C8C2) ;
 $DF34 PUSH HL       ;
 $DF35 CALL $D5E6    ;
 $DF38 POP HL        ;
 $DF39 LD ($C8C2),HL ;
 $DF3C LD A,($C8BC)  ;
 $DF3F CP $14        ;
 $DF41 JR NZ,$DF17   ;
 $DF43 LD HL,($C8BA) ;
 $DF46 LD IY,($C8C2) ;
 $DF4A LD (IY+$00),L ;
 $DF4D LD (IY+$01),H ;
 $DF50 JR $DF17      ;

; Command 19 - Fast time
c$DF52 LD A,$01      ; { Set the flag (#R$BFDB) and return 
 $DF54 LD ($BFDB),A  ;
 $DF57 RET           ; }

; Command 1A - Normal time
c$DF58 LD A,$00      ; { Set the flag (#R$BFDB) and return 
 $DF5A LD ($BFDB),A  ;
 $DF5D RET           ; }

; Process a line of a data in a table
;
; Used by the routines at #R$DC07, #R$DC0F, #R$DC17, #R$DC24, #R$DC7E, #R$DD9B
; and #R$DFBE.
c$DF5E LD IX,($C8D2) ; Point #REGix at the current data item being looked at (#R$C8D2)
 $DF62 LD A,(IX+$01) ; Get the second byte
 $DF65 CP $2A        ; Is it #N$2A (ie: asterisk)?
 $DF67 JR NZ,$DF71   ; If not, this is just text, no actions
 $DF69 CALL $CB10    ; Process next character
 $DF6C CALL $D9A9    ;
 $DF6F JR NC,$DF76   ;
*$DF71 CALL $D2E5    ; Expand any macros
 $DF74 SCF           ; { Set the carry flag and return 
 $DF75 RET           ; }
*$DF76 SCF           ; { Reset the carry flag and return
 $DF77 CCF           ;
 $DF78 RET           ; }

; Routine at DF79
;
; Used by the routines at #R$DED0 and #R$DED9.
c$DF79 CALL $D711    ; Push local variables onto the stack
 $DF7C CALL $D5E6    ;
 $DF7F CALL $D734    ; Pop working variables off the stack
 $DF82 LD A,($C8BC)  ;
 $DF85 CP $0E        ;
 $DF87 JR NZ,$DF9A   ;
 $DF89 LD C,$13      ; Select command #N$13
 $DF8B LD A,($C8BD)  ;
 $DF8E LD B,A        ;
 $DF8F CALL $D6C0    ; 
 $DF92 LD IY,($C8C2) ;
 $DF96 LD A,(IY+$00) ;
 $DF99 RET           ;
*$DF9A POP HL        ;
 $DF9B RET           ;

; Routine at DF9C
;
; Used by the routines at #R$DC85, #R$DCA0 and #R$DCC4.
c$DF9C CALL $CB10    ;
 $DF9F CALL $CB10    ;
 $DFA2 LD HL,$810D   ;
 $DFA5 SUB (HL)      ;
 $DFA6 LD ($DB32),A  ;
 $DFA9 LD B,A        ;
 $DFAA LD C,$08      ;
 $DFAC PUSH BC       ;
 $DFAD CALL $D5E6    ;
 $DFB0 POP BC        ;
 $DFB1 CALL $D6C0    ; 
 $DFB4 LD IY,($C8C2) ;
 $DFB8 INC IY        ;
 $DFBA LD A,($C8BB)  ;
 $DFBD RET           ;

; Routine at DFBE
;
; Used by the routine at #R$DDD8.
c$DFBE LD A,$44      ;
 $DFC0 CALL $CCD2    ;
 $DFC3 RET NC        ;
*$DFC4 CALL $DF5E    ;
 $DFC7 JR NC,$DFCC   ;
 $DFC9 CALL $E08B    ;
*$DFCC CALL $CCF5    ;
 $DFCF JR C,$DFC4    ;
 $DFD1 RET           ;

; Routine at DFD2
;
; Used by the routine at #R$DE83.
c$DFD2 LD IY,($C8D2) ;
 $DFD6 LD ($DB2D),IY ;
 $DFDA LD A,($C8CF)  ;
 $DFDD ADD A,$01     ;
 $DFDF LD B,A        ;
 $DFE0 LD ($DB2F),A  ;
*$DFE3 LD A,($DB2F)  ;
 $DFE6 CP $00        ;
 $DFE8 JR Z,$DFF0    ;
 $DFEA CALL $DFF3    ;
 $DFED JR NC,$DFE3   ;
 $DFEF RET           ;
*$DFF0 SCF           ;
 $DFF1 CCF           ;
 $DFF2 RET           ;

; Routine at DFF3
;
; Used by the routine at #R$DFD2.
c$DFF3 LD IX,$C277   ;
 $DFF7 LD DE,($CD70) ;
 $DFFB LD D,$00      ;
 $DFFD ADD IX,DE     ;
 $DFFF LD A,($CD71)  ;
 $E002 ADD A,$01     ;
 $E004 LD ($DB30),A  ;
 $E007 DEC IX        ;
*$E009 INC IX        ;
 $E00B INC IY        ;
 $E00D LD HL,$DB30   ;
 $E010 DEC (HL)      ;
 $E011 LD HL,$DB2F   ;
 $E014 DEC (HL)      ;
 $E015 JR Z,$E01E    ;
 $E017 LD A,(IY+$00) ;
 $E01A CP $2C        ;
 $E01C JR NZ,$E02E   ;
*$E01E LD A,($DB30)  ;
 $E021 CP $00        ;
 $E023 JR Z,$E079    ;
 $E025 LD A,(IX+$00) ;
 $E028 CP $20        ;
 $E02A JR Z,$E079    ;
 $E02C JR NZ,$E041   ;
*$E02E LD A,($DB30)  ;
 $E031 CP $00        ;
 $E033 JR Z,$E041    ;
 $E035 LD A,(IX+$00) ;
 $E038 CP $20        ;
 $E03A JR Z,$E041    ;
 $E03C CP (IY+$00)   ;
 $E03F JR Z,$E009    ;
*$E041 LD IY,($DB2D) ;
 $E045 LD A,($C8CF)  ;
 $E048 ADD A,$01     ;
 $E04A LD ($DB2F),A  ;
*$E04D LD A,($DB30)  ;
 $E050 CP $00        ;
 $E052 JR Z,$E063    ;
 $E054 LD A,(IX+$00) ;
 $E057 CP $20        ;
 $E059 JR Z,$E009    ;
 $E05B INC IX        ;
 $E05D LD HL,$DB30   ;
 $E060 DEC (HL)      ;
 $E061 JR $E04D      ;
*$E063 INC IY        ;
 $E065 LD HL,$DB2F   ;
 $E068 DEC (HL)      ;
 $E069 JR Z,$E072    ;
 $E06B LD A,(IY+$00) ;
 $E06E CP $2C        ;
 $E070 JR NZ,$E063   ;
*$E072 LD ($DB2D),IY ;
 $E076 SCF           ;
 $E077 CCF           ;
 $E078 RET           ;
*$E079 SCF           ;
 $E07A RET           ;

; Routine at E07B
c$E07B LD A,(IY+$00) ;
 $E07E CP $0D        ;
 $E080 RET Z         ;
 $E081 CALL $C75B    ;  Draw the character
 $E084 INC IY        ;
 $E086 JR $E07B      ;

; Data block at E088
b$E088 DEFB $00,$00,$00

; Routine at E08B
;
; Used by the routine at #R$DFBE.
c$E08B LD A,$00      ;
 $E08D LD ($E08A),A  ;
 $E090 LD HL,$D1E3   ; Point #REGhl at the text buffer (#R$D1E3)
 $E093 LD ($D3AA),HL ; { Put the length in #R$F3C2
 $E096 LD BC,$0050   ;
 $E099 LD A,$0D      ;
 $E09B CPIR          ;
 $E09D LD DE,$D1E4   ;
 $E0A0 SCF           ;
 $E0A1 CCF           ;
 $E0A2 SBC HL,DE     ; 
 $E0A4 LD A,L        ;
 $E0A5 LD ($F3C2),A  ; }
*$E0A8 CP $0E        ;
 $E0AA JR NC,$E0B5   ;
 $E0AC LD ($F529),A  ;
 $E0AF LD IY,($D3AA) ;
 $E0B3 JR $E0D0      ;
*$E0B5 LD HL,($D3AA) ;
 $E0B8 LD DE,$000F   ;
 $E0BB ADD HL,DE     ;
 $E0BC LD BC,$000F   ;
 $E0BF LD A,$20      ;
 $E0C1 CPDR          ;
 $E0C3 INC HL        ;
 $E0C4 INC BC        ;
 $E0C5 LD ($F529),BC ;
 $E0C9 LD IY,($D3AA) ;
 $E0CD LD ($D3AA),HL ;
*$E0D0 LD A,($F3C2)  ;
 $E0D3 LD HL,$F529   ;
 $E0D6 SUB (HL)      ;
 $E0D7 LD ($F3C2),A  ;
 $E0DA LD BC,($E088) ;
 $E0DE LD A,B        ;
 $E0DF CP $0D        ;
 $E0E1 JR NZ,$E0FC   ;
 $E0E3 PUSH IY       ;
 $E0E5 CALL $ECD4    ; Update the panels
 $E0E8 LD A,$38      ;
 $E0EA LD BC,$0216   ;
 $E0ED LD DE,$090B   ;
 $E0F0 CALL $EBC8    ;
 $E0F3 POP IY        ;
 $E0F5 LD BC,$0417   ;
 $E0F8 LD ($E088),BC ;
*$E0FC LD A,($E08A)  ;
 $E0FF CP $00        ;
 $E101 JR NZ,$E110   ;
 $E103 DEC C         ;
 $E104 CALL $C78C    ;
 $E107 LD A,$2D      ;
 $E109 CALL $C75B    ; Draw the character
 $E10C LD BC,($E088) ;
*$E110 CALL $C78C    ;
 $E113 CALL $F52B    ; Print the string
 $E116 LD A,($F3C2)  ;
 $E119 CP $00        ;
 $E11B JR Z,$E131    ;
 $E11D LD BC,($E088) ;
 $E121 INC B         ;
 $E122 LD ($E088),BC ;
 $E126 LD A,$01      ;
 $E128 LD ($E08A),A  ;
 $E12B LD A,($F3C2)  ;
 $E12E JP $E0A8      ;
*$E131 LD BC,($E088) ;
 $E135 INC B         ;
 $E136 LD ($E088),BC ;
 $E13A LD A,B        ;
 $E13B CP $0C        ;
 $E13D RET NZ        ;
 $E13E LD BC,$0D17   ;
 $E141 LD ($E088),BC ;
 $E145 RET           ;

; Temporary pointer to data
w$E146 DEFW $0000

; Set to non zero if there is a queue of commands to execute
g$E148 DEFB $00

; Time stamp extracted from a line of data
g$E149 DEFW $0000

; Data ID of most recent event found
g$E14B DEFB $00

; Data block at E14C
b$E14C DEFB $00

; Data block at E14D
b$E14D DEFB $00,$00,$00,$00

; Set bit 1 to mark a game should be loaded
g$E151 DEFB $00

; Default time
;
; 10:27am - #N$7302 ticks
b$E152 DEFB $02,$73,$01,$00,$02,$07,$00,$00

; Main entry point
c$E15A LD IX,$5DB7   ; { Put the stack somewhere safe
 $E15E LD SP,IX      ; }
 $E160 LD DE,$0AFE   ; { Load the room definitions from tape
 $E163 LD IX,$5DB8   ;
 $E167 LD A,$FF      ;
 $E169 SCF           ;
 $E16A CALL $0556    ; }
 $E16D LD A,$00      ;
 $E16F LD ($E151),A  ;
 $E172 CALL $FD93    ; Draw the playing area
 $E175 CALL $E186    ; Initialize game data
 $E178 CALL $CA65    ; Set up the command buffers
 $E17B CALL $CAA8    ; Draw the timer
 $E17E CALL $C920    ; Set up for a new game
 $E181 CALL $CAF3    ; { Set up the interrupt routines. Note, this erases part of the
                     ; initialization routine at #R$FD93, which isn't used after tihs point. }
 $E184 JR $E1D7      ; Enter the main loop

; Initialize game data
;
; Used by the routines at #R$E15A and #R$E1B6.
c$E186 CALL $C906    ; Initialize game flags
 $E189 LD HL,($80FC) ; { Make a copy of the pointer to table F
 $E18C LD ($E146),HL ; }
 $E18F LD A,$00      ; Set #REGa to 0 for some flags
 $E191 LD ($CD7B),A  ; Allow input (#R$CD7B)
 $E194 LD ($E148),A  ;
 $E197 LD ($C2C7),A  ;
 $E19A LD A,$00      ; { Turn off fast time
 $E19C LD ($BFDB),A  ; }
; Set the default time
 $E19F LD B,$08      ; 8 bytes to copy (2 bytes for minutes, 6 bytes for digits)
 $E1A1 LD IX,$E152   ; { Copy from default time (#R$E152) to working time (#R$BFC6)
 $E1A5 LD IY,$BFC6   ;
*$E1A9 LD A,(IX+$00) ;
 $E1AC LD (IY+$00),A ;
 $E1AF INC IX        ;
 $E1B1 INC IY        ;
 $E1B3 DJNZ $E1A9    ; }
 $E1B5 RET           ; All done

; Handle loading a game
;
; Used by the routine at #R$E1D7.
c$E1B6 CALL $E186    ; Initialize game data
 $E1B9 LD HL,$E151   ;
 $E1BC SRL (HL)      ;
 $E1BE JR NC,$E1D2   ;
 $E1C0 CALL $C945    ;
 $E1C3 LD HL,$E151   ;
 $E1C6 SRL (HL)      ;
 $E1C8 JR NC,$E1D2   ;
 $E1CA CALL $CA2E    ; Load a game from tape
 $E1CD JR NC,$E1D7   ; Jump to the main loop if loading failed
 $E1CF CALL $C945    ; Read game flags from what's loaded
*$E1D2 CALL $CAA8    ; Draw the timer
 $E1D5 JR $E1D7      ; Run the main loop

; Main loop
;
; Used by the routines at #R$E15A and #R$E1B6.
c$E1D7 LD HL,$E151   ; Get the tape load flag (#R$E151)
 $E1DA SRL (HL)      ; { If bit 0 is set, load the game
 $E1DC JR C,$E1B6    ; }
 $E1DE LD A,($C2C7)  ; { Is there a command to execute? (#R$C2C7)
 $E1E1 CP $00        ; }
 $E1E3 JR Z,$E202    ; Jump forward if there isn't
; There is a command to execute
 $E1E5 LD A,($E148)  ; { Is there a command waiting in the input buffer?
 $E1E8 CP $00        ; }
 $E1EA JR Z,$E231    ; Jump forward if so
 $E1EC CALL $E259    ; Get the player flags
 $E1EF AND $40       ; Is bit 6 set?
 $E1F1 JR NZ,$E202   ; Jump forward if not
 $E1F3 LD A,($C8BE)  ;
 $E1F6 CP $00        ;
 $E1F8 JP M,$E231    ;
 $E1FB LD A,($BFDB)  ; Get the "fast timer" flag
 $E1FE CP $01        ; Is it set to fast time?
 $E200 JR Z,$E231    ; Jump forward if it is
; The command is in the input buffer, ready to be dealt with
*$E202 CALL $E252    ; Get a time snapshot
 $E205 CALL $E275    ; Check for state / room movement
 $E208 CALL $E259    ; Get the player flags
 $E20B CP $00        ; Is the command blocked? (???)
 $E20D JP P,$E1D7    ; Jump back if so
 $E210 LD A,($CD7B)  ; { Is input blocked?
 $E213 CP $00        ; }
 $E215 JR NZ,$E22A   ; If so, cancel any current command
 $E217 LD A,($E148)  ; { Is there a command waiting?
 $E21A CP $00        ; }
 $E21C JR Z,$E1D7    ; Jump back to the start of the loop if not
 $E21E LD A,($C2C7)  ; { Is a command in the input buffer?
 $E221 CP $00        ; }
 $E223 JR NZ,$E1D7   ; Jump back to the start of the loop if not
; The command is active and ready, so run it
 $E225 CALL $D4CC    ; Run the command
 $E228 JR $E1D7      ; Jump to the start of the loop.
; The command was cancelled
*$E22A LD A,$00      ; { Set to no command waiting
 $E22C LD ($E148),A  ; }
 $E22F JR $E1D7      ; Jump to the start of the loop.
; A command is waiting, so set it up for processing
*$E231 CALL $E265    ; Get the current character
 $E234 CALL $E448    ; Get the player flags
 $E237 LD A,$00      ; Set #REGa to 0 for some flags
 $E239 LD ($C2C7),A  ; Set no command to execute
 $E23C LD ($CD7B),A  ;
 $E23F LD HL,$C277   ; { Set the current position (#R$CD7C) at the start of the input buffer (#R$C277) 
 $E242 LD ($CD7C),HL ; }
 $E245 LD A,$FF      ; { Signal a backlog of commands
 $E247 LD ($E148),A  ; }
 $E24A LD A,$00      ; { Turn off the "fast time" flag (#R$BFDB)
 $E24C LD ($BFDB),A  ; }
 $E24F JP $E1D7      ; Jump to the start of the loop.

; Make a copy of the current time
;
; Used by the routines at #R$CA3C and #R$E1D7.
; This routine allows events to happen at a specific time, while the main clock continues
c$E252 LD HL,($BFC6) ; Put the current time (#R$BFC6) in #REGhl
 $E255 LD ($CD62),HL ; Store a copy of this (#R$CD62)
 $E258 RET           ; All done

; Get the player flags
;
; Used by the routine at #R$E1D7.
;
; A On return, holds player flags
c$E259 CALL $E265    ; Get the current character
 $E25C LD C,$13      ; Use data table #N$13
 $E25E CALL $D6C0    ; Extract the data
 $E261 LD A,($C8BE)  ; { Put the first extracted value in #REGa and return
 $E264 RET           ; }

; Get the current character
;
; Used by the routines at #R$CF5D, #R$DC24, #R$DC85, #R$E1D7, #R$E259 and
; #R$F83F.
;
; A On return holds 0 for Kevin and 1 for Redhawk
; B As above. This is used to pass a data index into a call to #R$D6C0
c$E265 LD C,$08      ; Use data table 8 (user flags)
 $E267 LD B,$00      ; Use index 0
 $E269 CALL $D6C0    ; Extract the data
 $E26C LD A,($C8BF)  ; Get the second byte (character flag)
 $E26F LD HL,$8113   ; Point #REGhl at the offset difference table (#N$E3)
 $E272 SUB (HL)      ; Subtract it
 $E273 LD B,A        ; { Store this in B
 $E274 RET           ; }

; Add or update a panel if required
;
; Used by the routines at #R$E1D7 and #R$E304.
c$E275 CALL $E30D    ;
 $E278 JR C,$E280    ;
*$E27A LD HL,$FFFF   ; { Set "no timestamp found" in data
 $E27D LD ($E149),HL ; }
*$E280 CALL $E3CC    ;
 $E283 JR NC,$E2FB   ;
 $E285 LD HL,($E14D) ;
 $E288 LD DE,($E149) ;
 $E28C SCF           ;
 $E28D CCF           ;
 $E28E SBC HL,DE     ;
 $E290 JR C,$E2A4    ;
; This entry point is used by the routine at #R$E2FB.
*$E292 LD A,($E14B)  ;
 $E295 LD BC,($E146) ;
 $E299 CALL $E2E2    ;
 $E29C CALL $E372    ;
 $E29F JR C,$E275    ;
 $E2A1 JP $E27A      ;
*$E2A4 LD A,($E14F)  ;
 $E2A7 CALL $E453    ;
 $E2AA LD A,($E14F)  ;
 $E2AD LD BC,($C8C0) ;
 $E2B1 CALL $E2E2    ;
 $E2B4 LD A,($E14F)  ;
 $E2B7 CALL $E453    ;
 $E2BA LD HL,($C8C0) ;
 $E2BD INC HL        ;
 $E2BE LD A,(HL)     ;
 $E2BF AND $7F       ;
 $E2C1 LD HL,$8107   ;
 $E2C4 CP (HL)       ;
 $E2C5 JR Z,$E304    ;
 $E2C7 LD HL,($C8C0) ;
 $E2CA LD A,(HL)     ;
 $E2CB SUB $01       ;
 $E2CD LD ($C8CF),A  ;
 $E2D0 LD A,$00      ;
 $E2D2 LD ($C8CE),A  ;
 $E2D5 LD ($C8D4),HL ;
 $E2D8 INC HL        ;
 $E2D9 LD ($C8D2),HL ;
 $E2DC CALL $DBB6    ;
 $E2DF JP $E275      ;

; Routine at E2E2
;
; Used by the routine at #R$E275.
c$E2E2 LD ($C8D2),BC ;
 $E2E6 LD IX,($C8D2) ;
 $E2EA LD E,(IX+$00) ;
 $E2ED LD D,$00      ;
 $E2EF ADD IX,DE     ;
 $E2F1 LD ($C8D0),IX ;
 $E2F5 CALL $CA3C    ;
 $E2F8 JP $DA73      ;

; Routine at E2FB
;
; Used by the routine at #R$E275.
c$E2FB LD A,($E149)  ;
 $E2FE CP $00        ;
 $E300 JP P,$E292    ;
 $E303 RET           ;

; Routine at E304
;
; Used by the routine at #R$E275.
c$E304 LD A,($E14F)  ;
 $E307 CALL $E448    ;
 $E30A JP $E275      ;

; Check for timed event information
;
; Used by the routine at #R$E275.
;.
; On return, holds the carry flag set if data was found
c$E30D CALL $E398    ;
 $E310 JR NC,$E36F   ;
*$E312 CALL $CB10    ; { Put the next two characters in #R$E149
 $E315 LD ($E149),A  ; 
 $E318 CALL $CB10    ; 
 $E31B LD ($E14A),A  ; }
 $E31E LD IX,$E149   ; Point #REGix at the time from the data table
 $E322 LD IY,$CD62   ; Point #REGiy at the last sampled time
 $E326 LD H,(IX+$00) ; { Put the time from data in #REGhl and the
 $E329 LD L,(IX+$01) ; sampled time in #REGde
 $E32C LD D,(IY+$00) ;
 $E32F LD E,(IY+$01) ; }
 $E332 SCF           ; { Are the times equal?
 $E333 CCF           ;
 $E334 SBC HL,DE     ; }
 $E336 JR NZ,$E36F   ; Skip the next bit if not
; A time event has been found
 $E338 CALL $CB10    ; Skip the next character
 $E33B CALL $CB10    ; Get the next character
 $E33E LD HL,$8113   ; { Subtract #N$E3
 $E341 SUB (HL)      ; }
 $E342 LD ($E14B),A  ; Store this as the found data ID
 $E345 LD C,$13      ; Select data table #N$13
 $E347 LD B,A        ; Set the data ID
 $E348 CALL $D6C0    ; Extract the data
 $E34B LD A,($C8BE)  ; Get the first extracted byte
 $E34E AND $40       ; { Is bit 6 set?
 $E350 CP $00        ; }
 $E352 JR NZ,$E366   ; Jump forward if not
 $E354 LD A,($C8CE)  ; { Jump forward if there is more data to process
 $E357 CP $00        ;
 $E359 JR NZ,$E36D   ; }
; The event has all the information and should be fired now
 $E35B LD A,($E14B)  ; Get the stored data ID
 $E35E CALL $CA3C    ; Store this
 $E361 CALL $D9A9    ;
 $E364 JR C,$E36D    ;
*$E366 CALL $E38A    ;
 $E369 JR NC,$E36F   ;
 $E36B JR $E312      ;
*$E36D SCF           ; { Set the carry flag indicating success
 $E36E RET           ; }
*$E36F SCF           ; { Clear the carry flag indicating data not found
 $E370 CCF           ;
 $E371 RET           ; }

; Routine at E372
;
; Used by the routine at #R$E275.
c$E372 LD IX,($C8D4) ;
 $E376 LD A,(IX+$01) ;
 $E379 CP $45        ;
 $E37B JR Z,$E38F    ;
 $E37D CP $46        ;
 $E37F JR NZ,$E38A   ;
 $E381 LD HL,($C8D2) ;
 $E384 LD ($E146),HL ;
 $E387 SCF           ;
 $E388 CCF           ;
 $E389 RET           ;

; Routine at E38A
;
; Used by the routines at #R$E30D and #R$E372.
c$E38A CALL $CCF5    ;
 $E38D JR NC,$E397   ;
; This entry point is used by the routine at #R$E372.
*$E38F LD HL,($C8D2) ;
 $E392 DEC HL        ;
 $E393 LD ($E146),HL ;
 $E396 SCF           ;
*$E397 RET           ;

; Routine at E398
;
; Used by the routine at #R$E30D.
c$E398 LD HL,($E146) ;
 $E39B LD ($C8D2),HL ;
 $E39E LD IX,($C8D2) ;
 $E3A2 INC IX        ;
 $E3A4 LD ($C8D2),IX ;
 $E3A8 LD A,(IX+$00) ;
 $E3AB CP $45        ;
 $E3AD JR NZ,$E3C9   ;
 $E3AF LD ($C8F1),A  ;
 $E3B2 LD ($C8F0),A  ;
 $E3B5 LD A,$00      ;
 $E3B7 LD ($C8CE),A  ;
 $E3BA LD A,(IX-$01) ;
 $E3BD SUB $02       ;
 $E3BF LD ($C8CF),A  ;
 $E3C2 LD A,$46      ;
 $E3C4 LD ($C8F2),A  ;
 $E3C7 SCF           ;
 $E3C8 RET           ;
*$E3C9 SCF           ;
 $E3CA CCF           ;
 $E3CB RET           ;

; Check for timed events
;
; Used by the routine at #R$E275.
c$E3CC LD A,($C8C8)  ;
 $E3CF SUB $01       ;
 $E3D1 LD ($E14C),A  ;
 $E3D4 LD HL,$FFFF   ;
 $E3D7 LD ($E14D),HL ;
*$E3DA LD C,$13      ; Select data table #N$13
 $E3DC LD A,($E14C)  ;
 $E3DF LD B,A        ;
 $E3E0 CALL $D6C0    ; Extract the data
 $E3E3 LD A,($C8BE)  ;
 $E3E6 CP $00        ;
 $E3E8 JP M,$E430    ;
 $E3EB LD IY,$CD62   ; Point #REGiy at the last sampled time
 $E3EF LD IX,$C8BE   ; Point #REGix at the extracted data
 $E3F3 LD A,(IX+$00) ; { Put the sampled time in #REGde and the time extracted from the table
 $E3F6 AND $3F       ; in #REGde, but leaving out the top two significant bits
 $E3F8 LD H,A        ;
 $E3F9 LD L,(IX+$01) ;
 $E3FC LD D,(IY+$00) ;
 $E3FF LD E,(IY+$01) ; }
 $E402 SCF           ; { Get a difference between the two times
 $E403 CCF           ;
 $E404 SBC HL,DE     ; }
 $E406 JR Z,$E40A    ; { Skip the code if the event hasn't occured yet
 $E408 JR NC,$E430   ; }
; An event should occur now
*$E40A LD IX,$E14D   ;
 $E40E LD IY,$C8BE   ; Point #REGiy at the extracted data
 $E412 LD H,(IX+$00) ;
 $E415 LD L,(IX+$01) ;
 $E418 LD D,(IY+$00) ;
 $E41B LD E,(IY+$01) ;
 $E41E SCF           ;
 $E41F CCF           ;
 $E420 SBC HL,DE     ;
 $E422 JR C,$E430    ;
 $E424 LD HL,($C8BE) ;
 $E427 LD ($E14D),HL ;
 $E42A LD A,($E14C)  ;
 $E42D LD ($E14F),A  ;
*$E430 LD A,($E14C)  ;
 $E433 SUB $01       ;
 $E435 LD ($E14C),A  ;
 $E438 JP P,$E3DA    ;
 $E43B LD A,($E14D)  ;
 $E43E CP $00        ;
 $E440 JP M,$E445    ;
 $E443 SCF           ;
 $E444 RET           ;
*$E445 SCF           ;
 $E446 CCF           ;
 $E447 RET           ;

; Turn on high bit on player flags (?)
;
; Used by the routines at #R$E1D7 and #R$E304.
;
; A Current character
c$E448 CALL $E453    ; Get the player flags
 $E44B LD HL,($C8C2) ; Point #REGhl at the address of the extracted data
 $E44E LD A,(HL)     ; { Set bit 7
 $E44F OR $80        ;
 $E451 LD (HL),A     ; }
 $E452 RET           ; All done

; Get player flags
;
; Used by the routines at #R$D92A, #R$E275 and #R$E448.
; A Current character
c$E453 LD B,A        ; Select data index as the character
 $E454 LD C,$13      ; Select data table #N$13
 $E456 JP $D6C0      ; Get the data

; Attribute for room background
;
; This is usually #N$28 (ie: black on cyan)
g$E459 DEFB $38

; Data block at E45A
b$E45A DEFB $00
 $E45B DEFB $00

; Temporary co-ordinate store for graphics
g$E45C DEFB $00,$00

; Data block at E45E
w$E45E DEFW $FFBF

; Data block at E460
b$E460 DEFB $00,$00,$BF,$FF

; Pointer to the character set to print, minus #N$100 (#R$F52B)
g$E464 DEFW $79E7

; Scratch buffer for temporary storing register values
g$E466 DEFB $00,$00,$00,$00,$00,$00,$01,$00
 $E46E DEFB $01,$00,$00,$00

; Draw a segment of graphic data
;
; Used by the routines at #R$EB67, #R$EC00, #R$EC56, #R$ED5E, #R$F06F, #R$F0A8,
; #R$F0EE and #R$FD93.
;
; HL From posiiton
; BC To position
c$E472 LD ($E466),HL ; { Make copies of the input values
 $E475 LD ($E468),BC ;
 $E479 LD ($E46A),BC ; }
 $E47D PUSH HL       ; { Copy #REGhl to #REGde
 $E47E POP DE        ; }
 $E47F CALL $E77A    ; { Get the next bit pattern and put it in #REGa
 $E482 LD A,($E777)  ; }
 $E485 LD ($E778),A  ; Set this as the first nybble
 $E488 PUSH BC       ; { Copy #REGbc to #REGde
 $E489 POP DE        ; }
 $E48A CALL $E77A    ; { Get the next bit pattern and put it in #REGa
 $E48D LD A,($E777)  ; }
 $E490 LD ($E779),A  ; Set this as the second nybble
*$E493 LD A,($E778)  ; { Is the first nybble zero?
 $E496 CP $00        ; }
 $E498 JR NZ,$E4A2   ; Jump forward if it isn't
 $E49A LD A,($E779)  ; { Is the second nybble zero?
 $E49D CP $00        ; }
 $E49F JP Z,$E6CA    ; Jump forward if it is, as there's no work to do
; The two nybbles need to be merged
*$E4A2 LD A,($E778)  ;
 $E4A5 LD DE,($E779) ;
 $E4A9 AND E         ;
 $E4AA CP $00        ;
 $E4AC JP NZ,$E73F   ;
 $E4AF LD A,($E778)  ;
 $E4B2 CP $00        ;
 $E4B4 JR NZ,$E4B9   ;
 $E4B6 LD A,($E779)  ;
*$E4B9 LD ($E777),A  ;
 $E4BC BIT 0,A       ;
 $E4BE JR Z,$E4E4    ;
 $E4C0 LD HL,($E466) ;
 $E4C3 LD ($E5B1),HL ;
 $E4C6 LD HL,($E468) ;
 $E4C9 LD ($E5B3),HL ;
 $E4CC LD A,($E45D)  ;
 $E4CF LD ($E5B5),A  ;
 $E4D2 CALL $E5B7    ;
 $E4D5 LD A,($E5AF)  ;
 $E4D8 LD ($E471),A  ;
 $E4DB LD A,($E45D)  ;
 $E4DE LD ($E470),A  ;
 $E4E1 JP $E571      ;
*$E4E4 BIT 1,A       ;
 $E4E6 JR Z,$E50C    ;
 $E4E8 LD HL,($E466) ;
 $E4EB LD ($E5B1),HL ;
 $E4EE LD HL,($E468) ;
 $E4F1 LD ($E5B3),HL ;
 $E4F4 LD A,($E45F)  ;
 $E4F7 LD ($E5B5),A  ;
 $E4FA CALL $E5B7    ;
 $E4FD LD A,($E5AF)  ;
 $E500 LD ($E471),A  ;
 $E503 LD A,($E45F)  ;
 $E506 LD ($E470),A  ;
 $E509 JP $E571      ;
*$E50C BIT 2,A       ;
 $E50E JR Z,$E540    ;
 $E510 LD A,($E467)  ;
 $E513 LD ($E5B1),A  ;
 $E516 LD A,($E466)  ;
 $E519 LD ($E5B2),A  ;
 $E51C LD A,($E469)  ;
 $E51F LD ($E5B3),A  ;
 $E522 LD A,($E468)  ;
 $E525 LD ($E5B4),A  ;
 $E528 LD A,($E45E)  ;
 $E52B LD ($E5B5),A  ;
 $E52E CALL $E5B7    ;
 $E531 LD A,($E5AF)  ;
 $E534 LD ($E470),A  ;
 $E537 LD A,($E45E)  ;
 $E53A LD ($E471),A  ;
 $E53D JP $E571      ;
*$E540 BIT 3,A       ;
 $E542 JR Z,$E571    ;
 $E544 LD A,($E467)  ;
 $E547 LD ($E5B1),A  ;
 $E54A LD A,($E466)  ;
 $E54D LD ($E5B2),A  ;
 $E550 LD A,($E469)  ;
 $E553 LD ($E5B3),A  ;
 $E556 LD A,($E468)  ;
 $E559 LD ($E5B4),A  ;
 $E55C LD A,($E45C)  ;
 $E55F LD ($E5B5),A  ;
 $E562 CALL $E5B7    ;
 $E565 LD A,($E5AF)  ;
 $E568 LD ($E470),A  ;
 $E56B LD A,($E45C)  ;
 $E56E LD ($E471),A  ;
*$E571 LD A,($E777)  ;
 $E574 LD DE,($E778) ;
 $E578 CP E          ;
 $E579 JR NZ,$E595   ;
 $E57B LD A,($E470)  ;
 $E57E LD ($E467),A  ;
 $E581 LD D,A        ;
 $E582 LD A,($E471)  ;
 $E585 LD ($E466),A  ;
 $E588 LD E,A        ;
 $E589 CALL $E77A    ;
 $E58C LD A,($E777)  ;
 $E58F LD ($E778),A  ;
 $E592 JP $E493      ;
*$E595 LD A,($E470)  ;
 $E598 LD ($E469),A  ;
 $E59B LD D,A        ;
 $E59C LD A,($E471)  ;
 $E59F LD ($E468),A  ;
 $E5A2 LD E,A        ;
 $E5A3 CALL $E77A    ;
 $E5A6 LD A,($E777)  ;
 $E5A9 LD ($E779),A  ;
 $E5AC JP $E493      ;

; Data block at E5AF
b$E5AF DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Routine at E5B7
;
; Used by the routine at #R$E472.
c$E5B7 LD HL,($E5B1) ;
 $E5BA LD BC,($E5B3) ;
 $E5BE LD A,C        ;
 $E5BF SUB L         ;
 $E5C0 JP NC,$E5CA   ;
 $E5C3 LD A,$01      ;
 $E5C5 LD ($E5B6),A  ;
 $E5C8 LD A,L        ;
 $E5C9 SUB C         ;
*$E5CA LD ($E63E),A  ;
 $E5CD LD A,($E5B5)  ;
 $E5D0 SUB H         ;
 $E5D1 JP NC,$E5ED   ;
 $E5D4 LD A,($E5B6)  ;
 $E5D7 CP $00        ;
 $E5D9 JR Z,$E5E2    ;
 $E5DB LD A,$00      ;
 $E5DD LD ($E5B6),A  ;
 $E5E0 JR $E5E7      ;
*$E5E2 LD A,$01      ;
 $E5E4 LD ($E5B6),A  ;
*$E5E7 LD DE,($E5B5) ;
 $E5EB LD A,H        ;
 $E5EC SUB E         ;
*$E5ED LD ($E63F),A  ;
 $E5F0 CALL $E642    ;
 $E5F3 LD HL,($E5B1) ;
 $E5F6 LD BC,($E5B3) ;
 $E5FA LD A,B        ;
 $E5FB SUB H         ;
 $E5FC JP NC,$E618   ;
 $E5FF LD A,H        ;
 $E600 SUB B         ;
 $E601 LD E,A        ;
 $E602 LD A,($E5B6)  ;
 $E605 CP $00        ;
 $E607 JR Z,$E611    ;
 $E609 LD A,$00      ;
 $E60B LD ($E5B6),A  ;
 $E60E JP $E619      ;
*$E611 LD A,$01      ;
 $E613 LD ($E5B6),A  ;
 $E616 JR $E619      ;
*$E618 LD E,A        ;
*$E619 LD D,$00      ;
 $E61B LD A,($E640)  ;
 $E61E LD C,A        ;
 $E61F LD A,($E641)  ;
 $E622 CALL $E7BB    ;
 $E625 LD HL,($E5B1) ;
 $E628 LD A,($E5B6)  ;
 $E62B CP $00        ;
 $E62D JR Z,$E633    ;
 $E62F LD A,L        ;
 $E630 SUB C         ;
 $E631 JR $E635      ;
*$E633 LD A,L        ;
 $E634 ADD A,C       ;
*$E635 LD ($E5AF),A  ;
 $E638 LD A,$00      ;
 $E63A LD ($E5B6),A  ;
 $E63D RET           ;

; Data block at E63E
b$E63E DEFB $00,$00,$00,$00

; Routine at E642
;
; Used by the routines at #R$CEAA, #R$E5B7 and #R$E65B.
c$E642 LD HL,($E63D) ;
 $E645 LD L,$00      ;
 $E647 LD DE,($E63F) ;
 $E64B LD D,$00      ;
 $E64D LD B,$08      ;
*$E64F ADD HL,HL     ;
 $E650 JR NC,$E653   ;
 $E652 ADD HL,DE     ;
*$E653 DJNZ $E64F    ;
 $E655 LD ($E640),HL ;
 $E658 RET           ;

; Data block at E659
b$E659 DEFB $00,$00

; Routine at E65B
;
; Used by the routine at #R$E6CA.
c$E65B LD A,($E463)  ;
 $E65E LD DE,($E461) ;
 $E662 SUB E         ;
 $E663 LD ($E63F),A  ;
 $E666 LD A,($E65A)  ;
 $E669 LD DE,($E45D) ;
 $E66D SUB E         ;
 $E66E LD ($E63E),A  ;
 $E671 CALL $E642    ;
 $E674 LD A,($E45F)  ;
 $E677 LD DE,($E45D) ;
 $E67B SUB E         ;
 $E67C LD E,A        ;
 $E67D LD D,$00      ;
 $E67F LD A,($E640)  ;
 $E682 LD C,A        ;
 $E683 LD A,($E641)  ;
 $E686 CALL $E7BB    ;
 $E689 LD A,C        ;
 $E68A LD DE,($E461) ;
 $E68E ADD A,E       ;
 $E68F LD ($E65A),A  ;
 $E692 LD A,($E462)  ;
 $E695 LD DE,($E460) ;
 $E699 SUB E         ;
 $E69A LD ($E63E),A  ;
 $E69D LD A,($E659)  ;
 $E6A0 LD DE,($E45C) ;
 $E6A4 SUB E         ;
 $E6A5 LD ($E63F),A  ;
 $E6A8 CALL $E642    ;
 $E6AB LD A,($E45E)  ;
 $E6AE LD DE,($E45C) ;
 $E6B2 SUB E         ;
 $E6B3 LD E,A        ;
 $E6B4 LD D,$00      ;
 $E6B6 LD A,($E640)  ;
 $E6B9 LD C,A        ;
 $E6BA LD A,($E641)  ;
 $E6BD CALL $E7BB    ;
 $E6C0 LD A,C        ;
 $E6C1 LD DE,($E460) ;
 $E6C5 ADD A,E       ;
 $E6C6 LD ($E659),A  ;
 $E6C9 RET           ;

; Routine at E6CA
;
; Used by the routine at #R$E472.
c$E6CA LD HL,($E466) ;
 $E6CD LD ($E659),HL ;
 $E6D0 CALL $E65B    ;
 $E6D3 LD HL,($E659) ;
 $E6D6 PUSH HL       ;
 $E6D7 LD HL,($E468) ;
 $E6DA LD ($E659),HL ;
 $E6DD CALL $E65B    ;
 $E6E0 LD BC,($E659) ;
 $E6E4 POP HL        ;
 $E6E5 PUSH BC       ;
 $E6E6 CALL $E743    ;
 $E6E9 POP BC        ;
 $E6EA LD DE,$0101   ;
 $E6ED LD A,B        ;
 $E6EE SUB H         ;
 $E6EF JR NC,$E6F5   ;
 $E6F1 DEC D         ;
 $E6F2 DEC D         ;
 $E6F3 NEG           ;
*$E6F5 LD B,A        ;
 $E6F6 LD A,C        ;
 $E6F7 SUB L         ;
 $E6F8 JR NC,$E6FE   ;
 $E6FA DEC E         ;
 $E6FB DEC E         ;
 $E6FC NEG           ;
*$E6FE LD C,A        ;
 $E6FF OR B          ;
 $E700 JR Z,$E73F    ;
 $E702 LD A,C        ;
 $E703 CP B          ;
 $E704 PUSH HL       ;
 $E705 LD H,D        ;
 $E706 LD L,E        ;
 $E707 LD ($E46C),HL ;
 $E70A LD L,$00      ;
 $E70C JR C,$E712    ;
 $E70E LD H,L        ;
 $E70F LD L,E        ;
 $E710 LD C,B        ;
 $E711 LD B,A        ;
*$E712 LD ($E46E),HL ;
 $E715 LD H,B        ;
 $E716 LD A,B        ;
 $E717 SRL A         ;
 $E719 LD L,A        ;
*$E71A LD A,L        ;
 $E71B ADD A,C       ;
 $E71C JR C,$E721    ;
 $E71E CP B          ;
 $E71F JR C,$E729    ;
*$E721 SUB B         ;
 $E722 LD L,A        ;
 $E723 LD DE,($E46C) ;
 $E727 JR $E72E      ;
*$E729 LD L,A        ;
 $E72A LD DE,($E46E) ;
*$E72E EX (SP),HL    ;
 $E72F LD A,H        ;
 $E730 ADD A,D       ;
 $E731 LD H,A        ;
 $E732 LD A,L        ;
 $E733 ADD A,E       ;
 $E734 LD L,A        ;
 $E735 PUSH BC       ;
 $E736 CALL $E743    ;
 $E739 POP BC        ;
 $E73A EX (SP),HL    ;
 $E73B DEC H         ;
 $E73C JR NZ,$E71A   ;
 $E73E POP HL        ;
; This entry point is used by the routine at #R$E472.
*$E73F LD HL,($E46A) ;
 $E742 RET           ;

; Routine at E743
;
; Used by the routines at #R$E6CA and #R$F51E.
;
; H
; L
c$E743 LD A,L        ;
 $E744 AND $C0       ;
 $E746 RRA           ;
 $E747 SCF           ;
 $E748 RRA           ;
 $E749 RRCA          ;
 $E74A XOR L         ;
 $E74B AND $F8       ;
 $E74D XOR L         ;
 $E74E LD D,A        ;
 $E74F LD A,H        ;
 $E750 RLCA          ;
 $E751 RLCA          ;
 $E752 RLCA          ;
 $E753 XOR L         ;
 $E754 AND $C7       ;
 $E756 XOR L         ;
 $E757 RLCA          ;
 $E758 RLCA          ;
 $E759 LD E,A        ;
 $E75A LD A,H        ;
 $E75B AND $07       ;
 $E75D LD B,A        ;
 $E75E INC B         ;
 $E75F LD A,$FE      ;
*$E761 RRCA          ;
 $E762 DJNZ $E761    ;
 $E764 LD B,A        ;
 $E765 LD A,($E45B)  ;
 $E768 LD C,A        ;
 $E769 LD A,(DE)     ;
 $E76A BIT 1,C       ;
 $E76C JR NZ,$E76F   ;
 $E76E AND B         ;
*$E76F BIT 3,C       ;
 $E771 JR NZ,$E775   ;
 $E773 XOR B         ;
 $E774 CPL           ;
*$E775 LD (DE),A     ;
 $E776 RET           ;

; Temporary graphic bitfield
;
; Used by the routine at #R$E77A
g$E777 DEFB $00

; Temporary graphic bitfield
;
; Used by the routine at #R$E472
g$E778 DEFB $00

; Temporary graphic bitfield
;
; Used by the routine at #R$E472
g$E779 DEFB $00

; Translate a graphic into a bit pattern
;
; Used by the routine at #R$E472.
; On return, #R$E777 holds the bit pattern to put on screen
;
; DE Place to move to
c$E77A LD A,$00      ; { Initialize the bit pattern to zeros
 $E77C LD ($E777),A  ; }
 $E77F LD A,D        ;
 $E780 LD HL,($E45C) ; Put the from address (#R$E45C) in #REGhl
 $E783 LD A,D        ;
 $E784 CP H          ;
 $E785 JR NC,$E78F   ;
 $E787 LD A,($E777)  ; { Set bit 0 
 $E78A SET 0,A       ;
 $E78C LD ($E777),A  ; }
*$E78F LD A,E        ;
 $E790 CP L          ;
 $E791 JR NC,$E79B   ;
 $E793 LD A,($E777)  ; { Set bit 3
 $E796 SET 3,A       ;
 $E798 LD ($E777),A  ; }
*$E79B LD HL,($E45E) ;
 $E79E LD A,D        ;
 $E79F CP H          ;
 $E7A0 JR C,$E7AC    ;
 $E7A2 JR Z,$E7AC    ;
 $E7A4 LD A,($E777)  ; { Set bit 1
 $E7A7 SET 1,A       ; }
 $E7A9 LD ($E777),A  ;
*$E7AC LD A,E        ;
 $E7AD CP L          ;
 $E7AE JR C,$E7BA    ;
 $E7B0 JR Z,$E7BA    ;
 $E7B2 LD A,($E777)  ; { Set bit 2
 $E7B5 SET 2,A       ;
 $E7B7 LD ($E777),A  ; }
*$E7BA RET           ; All done

; Routine at E7BB
;
; Used by the routines at #R$D412, #R$E5B7, #R$E65B, #R$EE95 and #R$F0EE.
c$E7BB LD HL,$0000   ;
 $E7BE LD B,$10      ;
*$E7C0 RL C          ;
 $E7C2 RLA           ;
 $E7C3 ADC HL,HL     ;
 $E7C5 SBC HL,DE     ;
 $E7C7 JR NC,$E7CA   ;
 $E7C9 ADD HL,DE     ;
*$E7CA CCF           ;
 $E7CB DJNZ $E7C0    ;
 $E7CD RL C          ;
 $E7CF RLA           ;
 $E7D0 RET           ;

; Background letter A
b$E7D1 DEFB $02,$04,$02,$0C,$04,$0E,$0E,$0E
 $E7D9 DEFB $0E,$0C,$0A,$0C,$0A,$04,$0E,$04
 $E7E1 DEFB $0E,$02,$04,$02,$02,$04,$FE,$04
 $E7E9 DEFB $04,$04,$0C,$08,$0C,$08,$04,$04
 $E7F1 DEFB $04,$FF

; Background letter B
b$E7F3 DEFB $02,$02,$02,$0C,$04,$0E,$06,$0E
 $E7FB DEFB $08,$0C,$0A,$0E,$0C,$0E,$0E,$0C
 $E803 DEFB $0E,$02,$02,$02,$FE,$04,$04,$04
 $E80B DEFB $0C,$06,$0C,$06,$04,$04,$04,$FE
 $E813 DEFB $08,$04,$08,$0C,$0C,$0C,$0C,$04
 $E81B DEFB $08,$04,$FF

; Background letter C
b$E81E DEFB $02,$04,$02,$0C,$04,$0E,$06,$0E
 $E826 DEFB $04,$0C,$04,$04,$0C,$04,$0C,$0C
 $E82E DEFB $0A,$0E,$0C,$0E,$0E,$0C,$0E,$04
 $E836 DEFB $0A,$02,$04,$02,$02,$04,$FF

; Background letter D
b$E83D DEFB $02,$02,$02,$0A,$06,$0E,$0A,$0E
 $E845 DEFB $0E,$0A,$0E,$02,$02,$02,$FE,$04
 $E84D DEFB $04,$04,$0A,$06,$0C,$0A,$0C,$0C
 $E855 DEFB $0A,$0C,$04,$04,$04,$FF

; Background letter E
b$E85B DEFB $02,$02,$02,$0E,$04,$0E,$04,$04
 $E863 DEFB $06,$04,$06,$0C,$08,$0C,$08,$04
 $E86B DEFB $0C,$04,$0C,$0E,$0E,$0E,$0E,$02
 $E873 DEFB $02,$02,$FF

; Background letter F
b$E876 DEFB $02,$02,$02,$0E,$04,$0E,$04,$04
 $E87E DEFB $06,$04,$06,$0C,$08,$0C,$08,$04
 $E886 DEFB $0E,$04,$0E,$02,$02,$02,$FF

; Background letter G
b$E88D DEFB $02,$04,$02,$0E,$04,$0E,$04,$0C
 $E895 DEFB $04,$04,$0C,$04,$0C,$0C,$0A,$0C
 $E89D DEFB $0A,$08,$08,$08,$08,$0E,$0E,$0E
 $E8A5 DEFB $0E,$0C,$0E,$04,$0C,$02,$04,$02
 $E8AD DEFB $02,$04,$FF

; Background letter H
b$E8B0 DEFB $02,$02,$02,$04,$06,$04,$06,$0C
 $E8B8 DEFB $02,$0C,$02,$0E,$0E,$0E,$0E,$0C
 $E8C0 DEFB $08,$0C,$08,$04,$0E,$04,$0E,$02
 $E8C8 DEFB $02,$02,$FF

; Background letter I
b$E8CB DEFB $02,$02,$02,$0C,$04,$0C,$04,$08
 $E8D3 DEFB $0C,$08,$0C,$0C,$0E,$0C,$0E,$02
 $E8DB DEFB $0C,$02,$0C,$06,$04,$06,$04,$02
 $E8E3 DEFB $02,$02,$FF

; Background letter J
b$E8E6 DEFB $02,$0C,$02,$0E,$0A,$0E,$0E,$0C
 $E8EE DEFB $0E,$04,$0C,$02,$08,$02,$08,$04
 $E8F6 DEFB $0C,$04,$0C,$0A,$0A,$0C,$02,$0C
 $E8FE DEFB $FF

; Background letter K
b$E8FF DEFB $02,$02,$02,$04,$06,$04,$06,$08
 $E907 DEFB $02,$0C,$04,$0C,$08,$08,$0E,$0E
 $E90F DEFB $0E,$0C,$08,$06,$08,$04,$0E,$04
 $E917 DEFB $0E,$02,$02,$02,$FF

; Background letter L
b$E91C DEFB $02,$02,$02,$04,$0C,$04,$0C,$0E
 $E924 DEFB $0E,$0E,$0E,$02,$02,$02,$FF

; Background letter M
b$E92B DEFB $02,$02,$02,$04,$05,$07,$05,$09
 $E933 DEFB $02,$0C,$02,$0E,$0E,$0E,$0E,$0C
 $E93B DEFB $06,$0C,$08,$07,$08,$09,$06,$04
 $E943 DEFB $0E,$04,$0E,$02,$02,$02,$FF

; Background letter N
b$E94A DEFB $02,$02,$02,$04,$0A,$0C,$02,$0C
 $E952 DEFB $02,$0E,$0E,$0E,$0E,$0C,$06,$04
 $E95A DEFB $0E,$04,$0E,$02,$02,$02,$FF

; Background letter O
b$E961 DEFB $02,$04,$02,$0C,$04,$0E,$0C,$0E
 $E969 DEFB $0E,$0C,$0E,$04,$0C,$02,$04,$02
 $E971 DEFB $02,$04,$FE,$04,$04,$04,$0C,$0C
 $E979 DEFB $0C,$0C,$04,$04,$04,$FF

; Background letter P
b$E97F DEFB $02,$02,$02,$0C,$04,$0E,$08,$0E
 $E987 DEFB $0A,$0C,$0A,$04,$0E,$04,$0E,$02
 $E98F DEFB $02,$02,$FE,$04,$04,$04,$0C,$08
 $E997 DEFB $0C,$08,$04,$04,$04,$FF

; Background letter Q
b$E99D DEFB $02,$04,$02,$0C,$04,$0E,$0C,$0E
 $E9A5 DEFB $0E,$0C,$0E,$04,$0C,$02,$04,$02
 $E9AD DEFB $02,$04,$FE,$04,$04,$04,$0C,$0C
 $E9B5 DEFB $0C,$0C,$0A,$08,$06,$0A,$06,$0C
 $E9BD DEFB $08,$0C,$04,$04,$04,$FF

; Background letter R
b$E9C3 DEFB $02,$02,$02,$0C,$04,$0E,$08,$0E
 $E9CB DEFB $0A,$0C,$0E,$0E,$0E,$0C,$0A,$0A
 $E9D3 DEFB $0A,$04,$0E,$04,$0E,$02,$02,$02
 $E9DB DEFB $FE,$04,$04,$04,$0C,$08,$0C,$08
 $E9E3 DEFB $04,$04,$04,$FF

; Background letter S
b$E9E7 DEFB $02,$04,$02,$0C,$04,$0C,$04,$04
 $E9EF DEFB $06,$04,$06,$0C,$08,$0E,$0C,$0E
 $E9F7 DEFB $0E,$0C,$0E,$04,$0C,$02,$0A,$02
 $E9FF DEFB $0A,$04,$0C,$04,$0C,$0C,$08,$0C
 $EA07 DEFB $08,$04,$06,$02,$04,$02,$02,$04
 $EA0F DEFB $FF

; Background letter T
b$EA10 DEFB $02,$00,$02,$0E,$04,$0E,$04,$08
 $EA18 DEFB $0E,$08,$0E,$06,$04,$06,$04,$00
 $EA20 DEFB $02,$00,$FF

; Background letter U
b$EA23 DEFB $02,$02,$02,$04,$0C,$04,$0C,$0C
 $EA2B DEFB $02,$0C,$02,$0E,$0C,$0E,$0E,$0C
 $EA33 DEFB $0E,$04,$0C,$02,$02,$02,$FF

; Background letter V
b$EA3A DEFB $02,$02,$02,$04,$0A,$04,$0C,$06
 $EA42 DEFB $0C,$0A,$0A,$0C,$02,$0C,$02,$0E
 $EA4A DEFB $0A,$0E,$0E,$0A,$0E,$06,$0A,$02
 $EA52 DEFB $02,$02,$FF

; Background letter W
b$EA55 DEFB $02,$02,$02,$04,$0B,$04,$09,$07
 $EA5D DEFB $09,$09,$0B,$0C,$02,$0C,$02,$0E
 $EA65 DEFB $0E,$0E,$0E,$0C,$0B,$09,$0B,$07
 $EA6D DEFB $0E,$04,$0E,$02,$02,$02,$FF

; Background letter X
b$EA74 DEFB $02,$02,$02,$04,$06,$07,$06,$09
 $EA7C DEFB $02,$0C,$02,$0E,$07,$0A,$09,$0A
 $EA84 DEFB $0E,$0E,$0E,$0C,$0A,$09,$0A,$07
 $EA8C DEFB $0E,$04,$0E,$02,$09,$06,$07,$06
 $EA94 DEFB $02,$02,$FF

; Background letter Y
b$EA97 DEFB $02,$00,$02,$02,$06,$06,$06,$08
 $EA9F DEFB $02,$0C,$02,$0E,$08,$08,$0E,$08
 $EAA7 DEFB $0E,$06,$08,$06,$02,$00,$FF

; Background letter Z
b$EAAE DEFB $02,$02,$02,$0E,$04,$0E,$0C,$04
 $EAB6 DEFB $0C,$0E,$0E,$0E,$0E,$02,$0C,$02
 $EABE DEFB $04,$0C,$04,$02,$02,$02,$FF

; Background radio graphic
b$EAC5 DEFB $28,$10,$40,$48,$FE,$58,$38,$40
 $EACD DEFB $00,$28,$10,$FE,$40,$01,$50,$01
 $EAD5 DEFB $58,$19,$FE,$38,$11,$33,$14,$FE
 $EADD DEFB $33,$16,$3B,$11,$FE,$3D,$12,$32
 $EAE5 DEFB $1A,$FE,$36,$1A,$FE,$3B,$16,$36
 $EAED DEFB $1A,$FE,$39,$1A,$3B,$19,$FE,$2F
 $EAF5 DEFB $0A,$2B,$02,$2B,$01,$FE,$27,$01
 $EAFD DEFB $2D,$0C,$FE,$36,$10,$34,$11,$FE
 $EB05 DEFB $34,$29,$4C,$1B,$FF

; Background graphic
b$EB0A DEFB $00,$00,$00,$0F,$FE,$0F,$00,$0F
 $EB12 DEFB $0F,$FE,$04,$00,$0B,$07,$0F,$07
 $EB1A DEFB $FE,$00,$0C,$03,$0F,$FF

; Draw a large text string
;
; Used by the routine at #R$EF86.
;
; IY Pointer to null-terminated string
c$EB20 LD A,(IY+$00) ; { Is this the end of the string?
 $EB23 CP $00        ; }
 $EB25 RET Z         ; Return if to, nothing to do
 $EB26 CALL $EB67    ; Draw the character
 $EB29 INC IY        ; { Move onto the next one
 $EB2B JR $EB20      ; }

; Position to update panels
g$EB2D DEFW $0000

; Large letter lookup table
;
; Used by the routine at #R$EB67
b$EB2F DEFW $E7D1   ; A
 $EB31 DEFW $E7F3   ; B
 $EB33 DEFW $E81E   ; C
 $EB35 DEFW $E83D   ; D
 $EB37 DEFW $E85B   ; E
 $EB39 DEFW $E876   ; F
 $EB3B DEFW $E88D   ; G
 $EB3D DEFW $E8B0   ; H
 $EB3F DEFW $E8CB   ; I
 $EB41 DEFW $E8E6   ; J
 $EB43 DEFW $E8FF   ; K
 $EB45 DEFW $E91C   ; L
 $EB47 DEFW $E92B   ; M
 $EB49 DEFW $E94A   ; N
 $EB4B DEFW $E961   ; O
 $EB4D DEFW $E97F   ; P
 $EB4F DEFW $E99D   ; Q
 $EB51 DEFW $E9C3   ; R
 $EB53 DEFW $E9E7   ; S
 $EB55 DEFW $EA10   ; T
 $EB57 DEFW $EA23   ; U
 $EB59 DEFW $EA3A   ; V
 $EB5B DEFW $EA55   ; W
 $EB5D DEFW $EA74   ; X
 $EB5F DEFW $EA97   ; Y
 $EB61 DEFW $EAAE   ; Z
 $EB63 DEFW $EAC5   ; Radio
 $EB65 DEFW $EB0A   ; Background

; Draw a large letter
;
; Used by the routines at #R$DC24, #R$EB20, #R$F043 and #R$FCB4.
;
; A ASCII code of letter
c$EB67 PUSH IY       ; Store #REGiy
 $EB69 CP $20        ; Is this a space?
 $EB6B JR Z,$EBBA    ; If so, nothing to do so move on
 $EB6D CP $60        ; Is it an upper case letter?
 $EB6F JR C,$EB73    ; Jump forward if it is
 $EB71 SUB $20       ; Otherwise convert to upper case
*$EB73 SUB $41       ; Convert from an ASCII letter down a zero based offset
 $EB75 RLA           ; Double it to get a word offset
 $EB76 LD B,$00      ; { Put this in #REGbc
 $EB78 LD C,A        ; }
 $EB79 LD HL,$EB2F   ; { Add the base address of the large letter table (#R$EB2f)
 $EB7C ADD HL,BC     ; }
 $EB7D LD A,(HL)     ; { Put the found address in #REGde
 $EB7E LD E,A        ;
 $EB7F INC HL        ;
 $EB80 LD A,(HL)     ;
 $EB81 LD D,A        ; }
 $EB82 PUSH DE       ; { Copy this to #REGiy
 $EB83 POP IY        ; }
 $EB85 LD DE,($EB2D) ; Put the position to draw in #REGde
 $EB89 JR $EBAA      ; Start the drawing
; Do the drawing. At this point, #REGiy points to the graphic data, and #REGhl points to the onscreen position
*$EB8B LD A,(IY+$00) ; Get the next data byte
 $EB8E CP $FF        ; Is it the end of the data?
 $EB90 JR Z,$EBBA    ; Jump forward if so
 $EB92 CP $FE        ; It is a change of position?
 $EB94 JR Z,$EBA8    ; Jump forward if so
 $EB96 ADD A,E       ; { Add the position found to the base position in #REGde
 $EB97 LD C,A        ; and store it in #REGbc
 $EB98 LD A,(IY+$01) ;
 $EB9B ADD A,D       ;
 $EB9C LD B,A        ; }
 $EB9D PUSH DE       ; Remember #REGde
 $EB9E CALL $E472    ; Do the drawing
 $EBA1 POP DE        ; Restore #REGde
 $EBA2 INC IY        ; { Point #REGiy to the next definition
 $EBA4 INC IY        ; }
 $EBA6 JR $EB8B      ; Jump back to draw some more
; Change position
*$EBA8 INC IY        ; Point #REGiy at the position data
; Get the next place to draw
*$EBAA LD A,(IY+$00) ; { Get the offset from (#REGiy)
 $EBAD ADD A,E       ; add to the base position in #REGde
 $EBAE LD L,A        ; and store in #REGhl
 $EBAF LD A,(IY+$01) ;
 $EBB2 ADD A,D       ;
 $EBB3 LD H,A        ; }
 $EBB4 INC IY        ; { Move to the next place in the graphic definition
 $EBB6 INC IY        ; }
 $EBB8 JR $EB8B      ; Jump back to draw it
; End of drawing
*$EBBA POP IY        ; Restore #REGiy
 $EBBC LD HL,($EB2D) ; Put the current posiiton (#R$EB2D) in #REGhl
 $EBBF LD A,H        ; { Move down a row 
 $EBC0 ADD A,$10     ;
 $EBC2 LD H,A        ; }
 $EBC3 LD ($EB2D),HL ; Set it back
 $EBC6 RET           ;

; Temporary storage for attribute
;
; Used by the routine in #R$EBC8
g$EBC7 DEFB $00

; Fill a panel with an attribute
;
; Used by the routines at #R$DC24, #R$E08B, #R$EC97, #R$F3C5, #R$F68A, #R$FCB4
; and #R$FD93.
;
; BC Start position
; DE Width and height
; A Attribute to fill
c$EBC8 PUSH DE       ; Store #REGde
 $EBC9 LD ($EBC7),A  ; Store #REGa in a temporary area
*$EBCC CALL $EBE7    ; Convert the position to an attribute address
; At this point, #REGhl points to an attribute address
 $EBCF LD A,($EBC7)  ; Restore #REGa
 $EBD2 LD (HL),A     ; Set the attribute
 $EBD3 INC C         ; Move across one column
 $EBD4 DEC D         ; Decrement number of rows
 $EBD5 LD A,D        ; { Has the last row been filled?
 $EBD6 CP $00        ; }
 $EBD8 JR NZ,$EBCC   ; Loop back if it hasn't
 $EBDA POP DE        ; Restore #REGde
 $EBDB DEC E         ; Decrement number of columns
 $EBDC LD A,E        ; { Has the last column been filled?
 $EBDD CP $00        ; }
 $EBDF RET Z         ; If so, return, everything's done
 $EBE0 INC B         ; { Otherwise, move forward to the next row
 $EBE1 PUSH DE       ; and loop back
 $EBE2 LD A,C        ;
 $EBE3 SUB D         ;
 $EBE4 LD C,A        ;
 $EBE5 JR $EBCC      ; }

; Convert a co-ordinate to an attribute address
;
; Used by the routines at #R$EBC8 and #R$ED00.
;
; BC On entry, holds the Y and X co-ordinates
; HL On exit, points to the attribute address
c$EBE7 LD A,B        ; Put the Y co-ordinate in #REGa
 $EBE8 SRA A         ; { Shift right to extract the top 5 bits
 $EBEA SRA A         ;
 $EBEC SRA A         ; }
 $EBEE ADD A,$58     ; Add the high byte of the attribute display (#N$5800)
 $EBF0 LD H,A        ; Set this in #REGh.
 $EBF1 LD A,B        ; Restore the Y co-ordinate in #REGa
 $EBF2 AND $07       ; Clear all bits other than the bottom 3
 $EBF4 RRCA          ; { Shift this to point at the correct row on the attribute display
 $EBF5 RRCA          ;
 $EBF6 RRCA          ; }
 $EBF7 ADD A,C       ; Add the X co-ordinate
 $EBF8 LD L,A        ; Set this in #REGl.
 $EBF9 RET           ; All done

; Multi-purpose counter
g$EBFA DEFB $00

; Data block at EBFB
b$EBFB DEFB $00

; Data block at EBFC
w$EBFC DEFW $0000

; Game status buffer entry at EBFE
g$EBFE DEFB $00

; Game status buffer entry at EBFF
g$EBFF DEFB $00

; Routine at EC00
;
; Used by the routines at #R$EC34, #R$ED5E, #R$EE95, #R$EF86, #R$EFEC and
; #R$FD93.
c$EC00 LD HL,($EBFC) ;
 $EC03 LD BC,($EBFC) ;
 $EC07 LD A,($EBFE)  ;
 $EC0A ADD A,B       ;
 $EC0B LD B,A        ;
 $EC0C CALL $E472    ;
 $EC0F LD BC,($EBFC) ;
 $EC13 LD A,($EBFE)  ;
 $EC16 ADD A,B       ;
 $EC17 LD B,A        ;
 $EC18 LD A,($EBFF)  ;
 $EC1B ADD A,C       ;
 $EC1C LD C,A        ;
 $EC1D CALL $E472    ;
 $EC20 LD BC,($EBFC) ;
 $EC24 LD A,($EBFF)  ;
 $EC27 ADD A,C       ;
 $EC28 LD C,A        ;
 $EC29 CALL $E472    ;
 $EC2C LD BC,($EBFC) ;
 $EC30 CALL $E472    ;
 $EC33 RET           ;

; Room drawing routine 10
;
; Used by the routine at #R$EC97
c$EC34 LD H,(IX+$02) ;
 $EC37 LD L,(IX+$01) ;
 $EC3A LD ($EBFC),HL ;
 $EC3D LD A,(IX+$03) ;
 $EC40 LD ($EBFE),A  ;
 $EC43 LD A,(IX+$04) ;
 $EC46 LD ($EBFF),A  ;
 $EC49 CALL $EC00    ;
 $EC4C LD DE,$0005   ;
 $EC4F ADD IX,DE     ;
 $EC51 JP $ECBA      ;

; Data block at EC54
b$EC54 DEFB $00,$00

; Routine at EC56
;
; Used by the routine at #R$ED5E.
c$EC56 LD A,$08      ;
 $EC58 LD ($E45B),A  ;
*$EC5B LD HL,($EC54) ;
 $EC5E LD BC,($EC54) ;
 $EC62 LD A,B        ;
 $EC63 ADD A,E       ;
 $EC64 LD B,A        ;
 $EC65 PUSH DE       ;
 $EC66 CALL $E472    ;
 $EC69 POP DE        ;
 $EC6A DEC D         ;
 $EC6B LD A,D        ;
 $EC6C CP $00        ;
 $EC6E JR Z,$EC79    ;
 $EC70 LD HL,($EC54) ;
 $EC73 INC L         ;
 $EC74 LD ($EC54),HL ;
 $EC77 JR $EC5B      ;
*$EC79 LD A,$00      ;
 $EC7B LD ($E45B),A  ;
 $EC7E RET           ;

; Room routine table
b$EC7F DEFW $ECD3   ; Routine 00
 $EC81 DEFW $ED5E   ; Routine 02
 $EC83 DEFW $EE95   ; Routine 04
 $EC85 DEFW $EF86   ; Routine 06
 $EC87 DEFW $EFEC   ; Routine 08
 $EC89 DEFW $F043   ; Routine 0A
 $EC8B DEFW $EC8B   ; Routine 0C
 $EC8D DEFW $EC8D   ; Routine 0E
 $EC8F DEFW $EC34   ; Routine 10
 $EC91 DEFW $F06F   ; Routine 12
 $EC93 DEFW $F0A8   ; Routine 14
 $EC95 DEFW $EC95   ; Routine 16

; Draw a room background
;
; Used by the routine at #R$F68A.
;
; IX Pointer to room data
c$EC97 CALL $ECD4    ; Update the panels
 $EC9A LD A,($E459)  ; { Get the attribute for the room (#R$E459)
 $EC9D AND $38       ; and swap PAPER and INK components
 $EC9F RRA           ;
 $ECA0 RRA           ;
 $ECA1 RRA           ; 
 $ECA2 LD C,A        ;
 $ECA3 LD A,($E459)  ; 
 $ECA6 AND $38       ; 
 $ECA8 OR C          ; }
 $ECA9 LD BC,$0216   ; { Fill the panel with this
 $ECAC LD DE,$090B   ;
 $ECAF CALL $EBC8    ; }
 $ECB2 LD A,(IX+$00) ; { Set the new room attribute
 $ECB5 LD ($E459),A  ; }
 $ECB8 INC IX        ; Point #REGix to the next entry
; This entry point is used by the routines at #R$EC34, #R$ED5E, #R$EE95,
; #R$EF86, #R$EFEC, #R$F043, #R$F06F and #R$F0A8.
*$ECBA LD HL,$EC7F   ; Point #REGhl at the start of the room routine table
 $ECBD LD B,$00      ; { Get the offset and add this
 $ECBF LD C,(IX+$00) ; 
 $ECC2 ADD HL,BC     ; }
 $ECC3 PUSH HL       ; { Put the address in #REGde
 $ECC4 POP DE        ; }
 $ECC5 LD A,(DE)     ; { Put the jump location in #REGhl
 $ECC6 LD L,A        ;
 $ECC7 INC DE        ;
 $ECC8 LD A,(DE)     ;
 $ECC9 LD H,A        ; }
 $ECCA JP (HL)       ; Run it
 $ECCB LD DE,$0005   ; { Move to the next entry
 $ECCE ADD IX,DE     ;
 $ECD0 JP $ECBA      ; }

; Room drawing routine 00 : End routine
c$ECD3 RET           ;

; Update panels
;
; Used by the routines at #R$DC24, #R$E08B, #R$EC97, #R$F3C5, #R$F68A and
; #R$FCB4.
c$ECD4 LD A,($C2CD)  ; Get the wait time (#R$C2CD)
 $ECD7 CP $00        ; { If this is zero, skip to updating the panels
 $ECD9 JR Z,$ECE3    ; }
 $ECDB LD B,A        ; Set a counter in #REGb to the wait time
*$ECDC PUSH BC       ; { Pause
 $ECDD CALL $F29A    ;
 $ECE0 POP BC        ; }
 $ECE1 DJNZ $ECDC    ; Loop until the counter is zero.
; Wait done, now update the panels
*$ECE3 LD A,$05      ;
 $ECE5 LD ($C2CD),A  ;
 $ECE8 CALL $F241    ; { Jump back if BREAK was pressed
 $ECEB JR C,$ECD4    ; }
 $ECED LD BC,$020C   ; { Shift the middle panel to the left
 $ECF0 CALL $ED00    ; }
 $ECF3 LD BC,$0216   ; { Shift the right panel to the middle
 $ECF6 CALL $ED00    ; }
 $ECF9 LD BC,$0216   ; { Initialize the right panel
 $ECFC CALL $ED4C    ; }
 $ECFF RET           ; All done

; Shift this panel to the left
;
; Used by the routine at #R$ECD4.
;
; BC Co-ordinates of panel
c$ED00 PUSH BC       ;
 $ED01 CALL $C78C    ;
 $ED04 LD HL,($BF6A) ;
 $ED07 LD DE,$000A   ;
 $ED0A SBC HL,DE     ;
 $ED0C EX DE,HL      ;
 $ED0D LD HL,($BF6A) ;
 $ED10 PUSH HL       ;
 $ED11 PUSH DE       ;
 $ED12 LD A,$08      ;
*$ED14 LD ($EBFA),A  ;
 $ED17 LD BC,$0009   ;
 $ED1A LDIR          ;
 $ED1C POP DE        ;
 $ED1D POP HL        ;
 $ED1E INC H         ;
 $ED1F INC D         ;
 $ED20 PUSH HL       ;
 $ED21 PUSH DE       ;
 $ED22 LD A,($EBFA)  ;
 $ED25 SBC A,$01     ;
 $ED27 CP $00        ;
 $ED29 JR NZ,$ED14   ;
 $ED2B POP DE        ;
 $ED2C POP HL        ;
 $ED2D POP BC        ;
 $ED2E PUSH HL       ;
 $ED2F PUSH BC       ;
 $ED30 PUSH DE       ;
 $ED31 CALL $EBE7    ; Convert to an attribute address
 $ED34 LD DE,$000A   ;
 $ED37 SBC HL,DE     ;
 $ED39 EX DE,HL      ;
 $ED3A CALL $EBE7    ; Convert to an attribute address
 $ED3D LD BC,$0009   ;
 $ED40 LDIR          ;
 $ED42 POP DE        ;
 $ED43 POP BC        ;
 $ED44 POP HL        ;
 $ED45 INC B         ;
 $ED46 LD A,B        ;
 $ED47 CP $0D        ;
 $ED49 RET Z         ;
 $ED4A JR $ED00      ;

; Clear the contents of a panel
;
; Used by the routine at #R$ECD4.
;
; BC Co-ordinates of panel
c$ED4C PUSH BC       ; Store the co-ordinates
 $ED4D CALL $C78C    ; Convert the co-ordinates to screen co-ordinates
 $ED50 LD BC,$0008   ; { Clear this part of the screen
 $ED53 CALL $F30B    ; }
 $ED56 POP BC        ; Restore co-ordinates
 $ED57 INC B         ; Increase the row
 $ED58 LD A,B        ; { Loop until all rows done
 $ED59 CP $0D        ;
 $ED5B RET Z         ; }
 $ED5C JR $ED4C      ; Otherwise continue

; Room drawing routine 02
;
; Used by the routine at #R$EC97
c$ED5E LD H,(IX+$02) ;
 $ED61 LD L,(IX+$01) ;
 $ED64 LD ($EBFC),HL ;
 $ED67 LD A,(IX+$03) ;
 $ED6A LD ($EBFE),A  ;
 $ED6D LD A,(IX+$04) ;
 $ED70 LD ($EBFF),A  ;
 $ED73 CALL $EC00    ;
 $ED76 LD A,(IX+$05) ;
 $ED79 PUSH IX       ;
 $ED7B EX (SP),IY    ;
 $ED7D POP HL        ;
 $ED7E LD DE,$0006   ;
 $ED81 ADD IY,DE     ;
 $ED83 BIT 0,A       ;
 $ED85 CALL NZ,$EDA6 ;
 $ED88 BIT 1,A       ;
 $ED8A CALL NZ,$F0EE ;
 $ED8D BIT 4,A       ;
 $ED8F CALL NZ,$EDD9 ;
 $ED92 BIT 5,A       ;
 $ED94 CALL NZ,$EE07 ;
 $ED97 BIT 6,A       ;
 $ED99 CALL NZ,$EE49 ;
 $ED9C PUSH IY       ;
 $ED9E EX (SP),IX    ;
 $EDA0 POP IY        ;
 $EDA2 JP $ECBA      ;

; Data block at EDA5
b$EDA5 DEFB $00

; Routine at EDA6
;
; Used by the routine at #R$ED5E.
c$EDA6 PUSH AF       ;
 $EDA7 LD HL,($EBFC) ;
 $EDAA PUSH HL       ;
 $EDAB LD DE,($EBFE) ;
 $EDAF LD A,H        ;
 $EDB0 ADD A,E       ;
 $EDB1 LD ($EDA5),A  ;
*$EDB4 LD HL,($EBFC) ;
 $EDB7 LD DE,($EBFE) ;
 $EDBB LD A,H        ;
 $EDBC ADD A,$06     ;
 $EDBE LD BC,($EDA5) ;
 $EDC2 CP C          ;
 $EDC3 JR NC,$EDD3   ;
 $EDC5 LD H,A        ;
 $EDC6 LD ($EBFC),HL ;
 $EDC9 PUSH HL       ;
 $EDCA POP BC        ;
 $EDCB LD A,C        ;
 $EDCC ADD A,D       ;
 $EDCD LD C,A        ;
 $EDCE CALL $E472    ;
 $EDD1 JR $EDB4      ;
*$EDD3 POP HL        ;
 $EDD4 POP AF        ;
 $EDD5 LD ($EBFC),HL ;
 $EDD8 RET           ;

; Routine at EDD9
;
; Used by the routine at #R$ED5E.
c$EDD9 PUSH AF       ;
 $EDDA LD HL,($EBFE) ;
 $EDDD PUSH HL       ;
 $EDDE LD HL,($EBFC) ;
 $EDE1 PUSH HL       ;
 $EDE2 LD DE,$0505   ;
 $EDE5 SBC HL,DE     ;
 $EDE7 LD ($EBFC),HL ;
 $EDEA LD A,($EBFE)  ;
 $EDED ADD A,$0A     ;
 $EDEF LD ($EBFE),A  ;
 $EDF2 LD A,($EBFF)  ;
 $EDF5 ADD A,$05     ;
 $EDF7 LD ($EBFF),A  ;
 $EDFA CALL $EC00    ;
 $EDFD POP HL        ;
 $EDFE LD ($EBFC),HL ;
 $EE01 POP HL        ;
 $EE02 LD ($EBFE),HL ;
 $EE05 POP AF        ;
 $EE06 RET           ;

; Routine at EE07
;
; Used by the routine at #R$ED5E.
c$EE07 PUSH AF       ;
 $EE08 LD HL,($EBFE) ;
 $EE0B PUSH HL       ;
 $EE0C LD HL,($EBFC) ;
 $EE0F PUSH HL       ;
 $EE10 LD A,($EBFE)  ;
 $EE13 LD E,(IY+$00) ;
 $EE16 SBC A,E       ;
 $EE17 RRA           ;
 $EE18 LD E,A        ;
 $EE19 ADD A,H       ;
 $EE1A LD H,A        ;
 $EE1B LD A,L        ;
 $EE1C ADD A,E       ;
 $EE1D LD L,A        ;
 $EE1E LD ($EBFC),HL ;
 $EE21 LD ($EC54),HL ;
 $EE24 LD A,(IY+$00) ;
 $EE27 LD ($EBFE),A  ;
 $EE2A LD E,A        ;
 $EE2B LD A,(IY+$01) ;
 $EE2E LD ($EBFF),A  ;
 $EE31 LD D,A        ;
 $EE32 CALL $EC56    ;
 $EE35 CALL $EC00    ;
 $EE38 CALL $F0EE    ;
 $EE3B POP HL        ;
 $EE3C LD ($EBFC),HL ;
 $EE3F POP HL        ;
 $EE40 LD ($EBFE),HL ;
 $EE43 POP AF        ;
 $EE44 INC IY        ;
 $EE46 INC IY        ;
 $EE48 RET           ;

; Routine at EE49
;
; Used by the routine at #R$ED5E.
c$EE49 PUSH AF       ;
 $EE4A LD HL,($EBFE) ;
 $EE4D PUSH HL       ;
 $EE4E LD HL,($EBFC) ;
 $EE51 PUSH HL       ;
 $EE52 LD A,($EBFE)  ;
 $EE55 LD E,(IY+$00) ;
 $EE58 SBC A,E       ;
 $EE59 RRA           ;
 $EE5A LD E,A        ;
 $EE5B ADD A,H       ;
 $EE5C LD H,A        ;
 $EE5D LD A,($EBFF)  ;
 $EE60 ADD A,L       ;
 $EE61 SBC A,E       ;
 $EE62 LD E,(IY+$01) ;
 $EE65 SBC A,E       ;
 $EE66 LD L,A        ;
 $EE67 LD ($EBFC),HL ;
 $EE6A LD ($EC54),HL ;
 $EE6D LD A,(IY+$00) ;
 $EE70 LD ($EBFE),A  ;
 $EE73 LD E,A        ;
 $EE74 LD A,(IY+$01) ;
 $EE77 LD ($EBFF),A  ;
 $EE7A LD D,A        ;
 $EE7B CALL $EC56    ;
 $EE7E CALL $EC00    ;
 $EE81 CALL $F0EE    ;
 $EE84 POP HL        ;
 $EE85 LD ($EBFC),HL ;
 $EE88 POP HL        ;
 $EE89 LD ($EBFE),HL ;
 $EE8C POP AF        ;
 $EE8D INC IY        ;
 $EE8F INC IY        ;
 $EE91 RET           ;

; Data block at EE92
b$EE92 DEFB $00,$00,$00

; Room drawing routine 04
;
; Used by the routine at #R$EC97
c$EE95 LD H,(IX+$02) ;
 $EE98 LD L,(IX+$01) ;
 $EE9B LD ($EBFC),HL ;
 $EE9E LD A,(IX+$03) ;
 $EEA1 LD ($EBFE),A  ;
 $EEA4 LD A,(IX+$04) ;
 $EEA7 LD ($EBFF),A  ;
 $EEAA CALL $EC00    ;
 $EEAD LD A,$00      ;
 $EEAF LD ($EE94),A  ;
 $EEB2 LD A,(IX+$05) ;
 $EEB5 LD HL,($EBFC) ;
 $EEB8 PUSH HL       ;
 $EEB9 LD HL,($EBFE) ;
 $EEBC PUSH HL       ;
 $EEBD BIT 7,A       ;
 $EEBF JR Z,$EEC6    ;
 $EEC1 LD HL,$EE94   ;
 $EEC4 SET 0,(HL)    ;
*$EEC6 AND $70       ;
 $EEC8 RRA           ;
 $EEC9 RRA           ;
 $EECA RRA           ;
 $EECB RRA           ;
 $EECC LD ($EE92),A  ;
 $EECF LD A,(IX+$05) ;
 $EED2 AND $07       ;
 $EED4 LD ($EE93),A  ;
 $EED7 LD A,(IX+$05) ;
 $EEDA BIT 3,A       ;
 $EEDC JR NZ,$EEE4   ;
 $EEDE CALL $EF1F    ;
 $EEE1 JP $EF54      ;
*$EEE4 LD HL,($EBFC) ;
 $EEE7 PUSH HL       ;
 $EEE8 LD HL,($EBFE) ;
 $EEEB PUSH HL       ;
 $EEEC LD A,($EE93)  ;
 $EEEF RLA           ;
 $EEF0 RLA           ;
 $EEF1 LD ($EE93),A  ;
 $EEF4 ADD A,$08     ;
 $EEF6 LD ($EBFF),A  ;
 $EEF9 CALL $EF1F    ;
 $EEFC POP HL        ;
 $EEFD LD ($EBFE),HL ;
 $EF00 POP HL        ;
 $EF01 LD ($EBFC),HL ;
 $EF04 LD A,L        ;
 $EF05 ADD A,$04     ;
 $EF07 LD BC,($EE93) ;
 $EF0B ADD A,C       ;
 $EF0C LD L,A        ;
 $EF0D LD ($EBFC),HL ;
 $EF10 LD A,($EBFF)  ;
 $EF13 SUB C         ;
 $EF14 SUB $04       ;
 $EF16 LD ($EBFF),A  ;
 $EF19 CALL $EF1F    ;
 $EF1C JP $EF54      ;

; Routine at EF1F
;
; Used by the routine at #R$EE95.
c$EF1F LD A,($EBFE)  ;
 $EF22 SUB $04       ;
 $EF24 LD C,A        ;
 $EF25 LD A,$00      ;
 $EF27 LD DE,($EE92) ;
 $EF2B LD D,$00      ;
 $EF2D CALL $E7BB    ;
 $EF30 LD A,C        ;
 $EF31 SUB $04       ;
 $EF33 LD ($EBFE),A  ;
 $EF36 LD A,($EBFF)  ;
 $EF39 SUB $08       ;
 $EF3B LD ($EBFF),A  ;
 $EF3E LD HL,($EBFC) ;
 $EF41 LD A,H        ;
 $EF42 ADD A,$04     ;
 $EF44 LD H,A        ;
 $EF45 LD A,L        ;
 $EF46 ADD A,$04     ;
 $EF48 LD L,A        ;
 $EF49 LD ($EBFC),HL ;
 $EF4C LD A,($EE92)  ;
 $EF4F LD B,A        ;
 $EF50 CALL $EF5F    ;
 $EF53 RET           ;
*$EF54 POP HL        ;
 $EF55 LD ($EBFE),HL ;
 $EF58 POP HL        ;
 $EF59 LD ($EBFC),HL ;
 $EF5C JP $EF7E      ;
*$EF5F PUSH BC       ;
 $EF60 CALL $EC00    ;
 $EF63 LD A,($EE94)  ;
 $EF66 CP $00        ;
 $EF68 JR Z,$EF6D    ;
 $EF6A CALL $F0EE    ;
*$EF6D LD HL,($EBFC) ;
 $EF70 LD A,($EBFE)  ;
 $EF73 ADD A,H       ;
 $EF74 ADD A,$04     ;
 $EF76 LD H,A        ;
 $EF77 LD ($EBFC),HL ;
 $EF7A POP BC        ;
 $EF7B DJNZ $EF5F    ;
 $EF7D RET           ;
*$EF7E LD DE,$0007   ;
 $EF81 ADD IX,DE     ;
 $EF83 JP $ECBA      ;

; Room drawing routine 06
;
; Used by the routine at #R$EC97
;
; IX Pointer to text data
c$EF86 LD H,(IX+$02) ;
 $EF89 LD L,(IX+$01) ;
 $EF8C LD ($EBFC),HL ;
 $EF8F LD A,(IX+$03) ;
 $EF92 LD ($EBFE),A  ;
 $EF95 LD A,(IX+$04) ;
 $EF98 LD ($EBFF),A  ;
 $EF9B PUSH IX       ; { Put the string in #REGiy
 $EF9D EX (SP),IY    ; }
 $EF9F POP HL        ; Tidy the stack
 $EFA0 LD DE,$0005   ; { Move to the start of the text
 $EFA3 ADD IY,DE     ; }
 $EFA5 LD HL,($EBFC) ;
 $EFA8 LD ($EB2D),HL ;
 $EFAB CALL $EB20    ; Draw the string
 $EFAE LD HL,$E45B   ;
 $EFB1 LD (HL),$01   ;
 $EFB3 CALL $EC00    ;
 $EFB6 LD A,$00      ;
 $EFB8 LD ($E45B),A  ;
 $EFBB PUSH IY       ;
 $EFBD EX (SP),IX    ;
 $EFBF POP IY        ;
 $EFC1 INC IX        ;
 $EFC3 JP $ECBA      ;

; Data block at EFC6
b$EFC6 DEFB $00,$05,$06,$00,$06,$0A,$0C,$05
 $EFCE DEFB $FF

; Data block at EFCF
b$EFCF DEFB $06,$00,$00,$07,$0C,$07,$FF

; Data block at EFD6
b$EFD6 DEFB $00,$00,$06,$07,$0C,$00,$FF

; Data block at EFDD
b$EFDD DEFB $0C,$00,$06,$05,$00,$0A,$FF

; Data block at EFE4
b$EFE4 DEFW $EFC6
 $EFE6 DEFW $EFCF
 $EFE8 DEFW $EFD6
 $EFEA DEFW $EFDD

; Room drawing routine 08
;
; Used by the routine at #R$EC97
c$EFEC LD H,(IX+$02) ;
 $EFEF LD L,(IX+$01) ;
 $EFF2 LD ($EB2D),HL ;
 $EFF5 LD A,(IX+$03) ;
 $EFF8 RLA           ;
 $EFF9 LD C,A        ;
 $EFFA LD B,$00      ;
 $EFFC LD HL,$EFE4   ;
 $EFFF ADD HL,BC     ;
 $F000 LD A,(HL)     ;
 $F001 LD E,A        ;
 $F002 INC HL        ;
 $F003 LD A,(HL)     ;
 $F004 LD D,A        ;
 $F005 PUSH DE       ;
 $F006 POP IY        ;
 $F008 LD A,(IX+$03) ;
 $F00B CP $05        ;
 $F00D JR NC,$F037   ;
 $F00F LD A,$0A      ;
 $F011 LD ($EBFE),A  ;
 $F014 LD A,$06      ;
 $F016 LD ($EBFF),A  ;
*$F019 LD DE,($EB2D) ;
 $F01D LD A,(IY+$00) ;
 $F020 CP $FF        ;
 $F022 JR Z,$F037    ;
 $F024 ADD A,E       ;
 $F025 LD L,A        ;
 $F026 LD A,(IY+$01) ;
 $F029 ADD A,D       ;
 $F02A LD H,A        ;
 $F02B LD ($EBFC),HL ;
 $F02E CALL $EC00    ;
 $F031 INC IY        ;
 $F033 INC IY        ;
 $F035 JR $F019      ;
*$F037 INC IX        ;
 $F039 INC IX        ;
 $F03B INC IX        ;
 $F03D INC IX        ;
 $F03F JP $ECBA      ;
 $F042 RET           ;

; Room drawing routine 0A
;
; Used by the routine at #R$EC97
c$F043 LD L,(IX+$01) ;
 $F046 LD A,($E45D)  ;
 $F049 LD H,A        ;
 $F04A LD ($EB2D),HL ;
 $F04D LD A,($E45F)  ;
 $F050 LD BC,($E45C) ;
 $F054 SUB B         ;
 $F055 RRA           ;
 $F056 RRA           ;
 $F057 RRA           ;
 $F058 RRA           ;
 $F059 ADD A,$01     ;
 $F05B LD B,A        ;
*$F05C LD A,(IX+$02) ;
 $F05F PUSH BC       ;
 $F060 CALL $EB67    ; Draw a big character
 $F063 POP BC        ;
 $F064 DJNZ $F05C    ;
 $F066 INC IX        ;
 $F068 INC IX        ;
 $F06A INC IX        ;
 $F06C JP $ECBA      ;

; Room drawing routine 12
;
; Used by the routine at #R$EC97
c$F06F INC IX        ;
 $F071 LD H,(IX+$01) ;
 $F074 LD L,(IX+$00) ;
 $F077 INC IX        ;
 $F079 INC IX        ;
*$F07B LD A,(IX+$00) ;
 $F07E CP $FF        ;
 $F080 JR Z,$F0A1    ;
 $F082 CP $FE        ;
 $F084 JR Z,$F093    ;
 $F086 LD C,A        ;
 $F087 LD B,(IX+$01) ;
 $F08A CALL $E472    ;
 $F08D INC IX        ;
 $F08F INC IX        ;
 $F091 JR $F07B      ;
*$F093 INC IX        ;
 $F095 LD L,(IX+$00) ;
 $F098 LD H,(IX+$01) ;
 $F09B INC IX        ;
 $F09D INC IX        ;
 $F09F JR $F07B      ;
*$F0A1 INC IX        ;
 $F0A3 JP $ECBA      ;

; Data block at F0A6
b$F0A6 DEFB $00,$00

; Room drawing routine 14
;
; Used by the routine at #R$EC97
c$F0A8 LD H,(IX+$02) ;
 $F0AB LD L,(IX+$01) ;
 $F0AE LD ($F0A6),HL ;
 $F0B1 PUSH HL       ;
 $F0B2 POP BC        ;
 $F0B3 LD C,$00      ;
 $F0B5 CALL $E472    ;
 $F0B8 LD HL,($F0A6) ;
 $F0BB PUSH HL       ;
 $F0BC POP BC        ;
 $F0BD LD B,$00      ;
 $F0BF CALL $E472    ;
 $F0C2 LD HL,($F0A6) ;
 $F0C5 LD A,H        ;
 $F0C6 ADD A,$20     ;
 $F0C8 LD H,A        ;
 $F0C9 LD A,L        ;
 $F0CA ADD A,$10     ;
 $F0CC LD L,A        ;
 $F0CD PUSH HL       ;
 $F0CE POP BC        ;
 $F0CF LD B,$00      ;
 $F0D1 PUSH HL       ;
 $F0D2 CALL $E472    ;
 $F0D5 POP HL        ;
 $F0D6 LD BC,($F0A6) ;
 $F0DA LD A,C        ;
 $F0DB SUB $20       ;
 $F0DD LD C,A        ;
 $F0DE CALL $E472    ;
 $F0E1 INC IX        ;
 $F0E3 INC IX        ;
 $F0E5 INC IX        ;
 $F0E7 JP $ECBA      ;

; Data block at F0EA
b$F0EA DEFB $00,$00,$00,$00

; Routine at F0EE
;
; Used by the routines at #R$ED5E and #R$EE95.
c$F0EE LD HL,($EBFC) ;
 $F0F1 PUSH AF       ;
 $F0F2 PUSH HL       ;
 $F0F3 LD HL,($EBFE) ;
 $F0F6 PUSH HL       ;
 $F0F7 LD BC,($EBFE) ;
 $F0FB LD B,$00      ;
 $F0FD LD A,$00      ;
 $F0FF LD DE,$0005   ;
 $F102 CALL $E7BB    ;
 $F105 LD A,C        ;
 $F106 LD ($EBFE),A  ;
 $F109 LD BC,($EBFF) ;
 $F10D LD B,$00      ;
 $F10F LD A,$00      ;
 $F111 LD DE,$0004   ;
 $F114 CALL $E7BB    ;
 $F117 LD A,C        ;
 $F118 LD ($EBFF),A  ;
 $F11B LD HL,($EBFC) ;
 $F11E LD A,($EBFE)  ;
 $F121 RRA           ;
 $F122 LD D,A        ;
 $F123 LD A,($EBFF)  ;
 $F126 RRA           ;
 $F127 LD E,A        ;
 $F128 ADD HL,DE     ;
 $F129 LD ($F0EA),HL ;
 $F12C LD ($F0EC),HL ;
 $F12F LD DE,$0003   ;
*$F132 LD BC,($F0EA) ;
 $F136 LD A,($EBFE)  ;
 $F139 ADD A,B       ;
 $F13A LD B,A        ;
 $F13B LD ($F0EA),BC ;
 $F13F LD HL,($F0EC) ;
 $F142 LD A,($EBFF)  ;
 $F145 ADD A,L       ;
 $F146 LD L,A        ;
 $F147 LD ($F0EC),HL ;
 $F14A PUSH DE       ;
 $F14B CALL $E472    ;
 $F14E POP DE        ;
 $F14F LD A,E        ;
 $F150 SUB $01       ;
 $F152 LD E,A        ;
 $F153 CP $00        ;
 $F155 JR NZ,$F132   ;
 $F157 LD BC,($F0EA) ;
 $F15B LD DE,($EBFE) ;
 $F15F LD A,B        ;
 $F160 ADD A,D       ;
 $F161 LD B,A        ;
 $F162 LD ($F0EA),BC ;
 $F166 LD HL,($F0EC) ;
 $F169 LD A,H        ;
 $F16A ADD A,E       ;
 $F16B LD H,A        ;
 $F16C LD ($F0EC),HL ;
 $F16F CALL $E472    ;
 $F172 LD DE,$0003   ;
*$F175 LD BC,($F0EA) ;
 $F179 LD A,($EBFF)  ;
 $F17C ADD A,C       ;
 $F17D LD C,A        ;
 $F17E LD ($F0EA),BC ;
 $F182 LD HL,($F0EC) ;
 $F185 LD A,($EBFE)  ;
 $F188 ADD A,H       ;
 $F189 LD H,A        ;
 $F18A LD ($F0EC),HL ;
 $F18D PUSH DE       ;
 $F18E CALL $E472    ;
 $F191 POP DE        ;
 $F192 DEC E         ;
 $F193 LD A,E        ;
 $F194 CP $00        ;
 $F196 JR NZ,$F175   ;
 $F198 POP HL        ;
 $F199 LD ($EBFE),HL ;
 $F19C POP HL        ;
 $F19D LD ($EBFC),HL ;
 $F1A0 POP AF        ;
 $F1A1 RET           ;

; Draw a background for a character speaking
;
; Used by the routines at #R$DC0F and #R$DD9B.
c$F1A2 CALL $F83F    ; Set up sprite data
 $F1A5 RET NC        ;
 $F1A6 LD IX,$D1E3   ; Point #REGix at the text buffer (#R$D1E3)
 $F1AA LD ($D3AA),IX ;
 $F1AE LD A,(IX+$00) ;
 $F1B1 CP $40        ;
 $F1B3 JR Z,$F1C8    ;
 $F1B5 LD A,$01      ; { Set the "character speaking" flag
 $F1B7 LD ($F688),A  ; }
 $F1BA PUSH IX       ; { Draw the sprites
 $F1BC CALL $F68A    ; 
 $F1BF POP IX        ; }
 $F1C1 LD A,$00      ; { Turn off the "character speaking" flag
 $F1C3 LD ($F688),A  ; }
 $F1C6 JR $F1CA      ; Print the speech bubble
*$F1C8 INC IX        ;

; Print a scrolling speech bubble
;
; Used by the routines at #R$DC24 and #R$F1A2.
;
; IX pointer to text
c$F1CA LD ($D3AA),IX ;
*$F1CE CALL $F32C    ;
 $F1D1 LD HL,($D3AA) ;
 $F1D4 LD BC,$0050   ;
 $F1D7 LD A,$0D      ;
 $F1D9 CPIR          ;
 $F1DB LD A,C        ;
 $F1DC CP $47        ;
 $F1DE JR NC,$F214   ;
 $F1E0 LD IX,($D3AA) ;
 $F1E4 LD B,$05      ;
*$F1E6 PUSH BC       ;
 $F1E7 CALL $F29A    ;
 $F1EA POP BC        ;
 $F1EB DJNZ $F1E6    ;
*$F1ED LD A,(IX+$00) ;
 $F1F0 CP $0D        ;
 $F1F2 JR Z,$F23A    ;
 $F1F4 CALL $F275    ;
 $F1F7 LD HL,$407E   ;
 $F1FA LD ($BF6A),HL ;
 $F1FD LD A,(IX+$00) ;
 $F200 CP $60        ;
 $F202 JR NC,$F20A   ;
 $F204 CP $40        ;
 $F206 JR C,$F20A    ;
 $F208 ADD A,$20     ;
*$F20A CALL $C75B    ;  Draw the character
 $F20D INC IX        ;
 $F20F CALL $F29A    ;
 $F212 JR $F1ED      ;
*$F214 LD HL,$4077   ;
 $F217 LD ($BF6A),HL ;
 $F21A LD IY,($D3AA) ;
 $F21E LD B,$08      ;
*$F220 LD A,(IY+$00) ;
 $F223 CP $0D        ;
 $F225 JR Z,$F23A    ;
 $F227 CP $60        ;
 $F229 JR NC,$F231   ;
 $F22B CP $40        ;
 $F22D JR C,$F231    ;
 $F22F ADD A,$20     ;
*$F231 PUSH BC       ;
 $F232 CALL $C75B    ;  Draw the character
 $F235 POP BC        ;
 $F236 INC IY        ;
 $F238 DJNZ $F220    ;
*$F23A CALL $F241    ;
 $F23D RET NC        ;
 $F23E JP $F1CE      ; Jump back to draw some more

; Return with the carry flag set if BREAK was pressed
;
; Used by the routines at #R$ECD4 and #R$F1CA.
c$F241 LD A,$00      ; { Disable interrupts
 $F243 LD ($BFB0),A  ; }
 $F246 LD ($C70D),A  ; { Clear any recent key press
 $F249 LD ($C70E),A  ; }
 $F24C CALL $C70F    ; Read a keypress
 $F24F LD A,($C70D)  ; { Put the ASCII character in #R$C2CC
 $F252 LD ($C2CC),A  ; }
 $F255 LD A,($C70E)  ; Get the shift state
 $F258 CP $18        ; Was CAPS pressed?
 $F25A JR NZ,$F265   ; Jump forward if not
 $F25C LD A,($C70D)  ; Get the key press
 $F25F CP $20        ; Was SPACE pressed?
 $F261 JR NZ,$F265   ; Jump forward if not
 $F263 SCF           ; { Set carry flag and return
 $F264 RET           ; }
*$F265 LD A,$00      ; { Clear keyboard buffers
 $F267 LD ($C70D),A  ;
 $F26A LD ($C70E),A  ; }
 $F26D LD A,$01      ; { Restore interrupts
 $F26F LD ($BFB0),A  ; }
 $F272 SCF           ; { Reset carry flag and return
 $F273 CCF           ;
 $F274 RET           ; }

; Scroll speech bubble text
;
; Used by the routine at #R$F1CA.
c$F275 LD BC,$0008   ;
 $F278 LD HL,$4077   ;
 $F27B LD DE,$4076   ;
 $F27E LD A,$08      ;
 $F280 LD ($EBFA),A  ;
*$F283 PUSH BC       ;
 $F284 PUSH HL       ;
 $F285 PUSH DE       ;
 $F286 LDIR          ;
 $F288 POP DE        ;
 $F289 POP HL        ;
 $F28A POP BC        ;
 $F28B INC H         ;
 $F28C INC D         ;
 $F28D LD A,($EBFA)  ;
 $F290 SUB $01       ;
 $F292 LD ($EBFA),A  ;
 $F295 CP $00        ;
 $F297 JR NZ,$F283   ;
 $F299 RET           ;

; Pause
;
; Used by the routines at #R$ECD4 and #R$F1CA.
c$F29A LD C,$FF      ;
*$F29C LD B,$FF      ;
*$F29E DJNZ $F29E    ;
 $F2A0 DEC C         ;
 $F2A1 LD A,C        ;
 $F2A2 CP $00        ;
 $F2A4 JR NZ,$F29C   ;
 $F2A6 RET           ;

; Speech bubble graphic bottom
;
; #CALL:print_udg(#PC,speech_2,9,1,40)
b$F2A7 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $F2AF DEFB $FF,$80,$00,$00,$00,$00,$00,$00
 $F2B7 DEFB $00,$01,$80,$00,$00,$00,$00,$00
 $F2BF DEFB $00,$00,$01,$C0,$00,$00,$00,$00
 $F2C7 DEFB $00,$00,$00,$03,$3F,$00,$00,$00
 $F2CF DEFB $00,$00,$00,$00,$1C,$00,$FF,$FF
 $F2D7 DEFB $FF,$FF,$FF,$FF,$FF,$E0

; Speech bubble graphic top
;
; #CALL:print_udg(#PC,speech_1,9,1,40)
b$F2DD DEFB $00,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $F2E5 DEFB $E0,$3F,$00,$00,$00,$00,$00,$00
 $F2ED DEFB $00,$1C,$C0,$00,$00,$00,$00,$00
 $F2F5 DEFB $00,$00,$03

; Speech bubble graphic tip
;
; #CALL:print_udg(#PC,speech_3,1,1,40)
b$F2F8 DEFB $00,$00,$81,$82,$44,$48,$30,$20
 $F300 DEFB $00,$00,$00,$01,$83,$87,$8F,$9F

; Number of rows left to clear on a column
;
; Used by the routine in #R$F30B
g$F308 DEFB $00

; Game status buffer at F309
g$F309 DEFB $00

; Number of bits across when drawing a sprite
g$F30A DEFB $18

; Blank out part of the screen
;
; Used by the routines at #R$DB34, #R$ED4C, #R$F32C, #R$F3C5 and #R$FD93.
;
; HL Topleft screen address
; BC Number of columns to clear
c$F30B PUSH HL       ; { Copy #REGhl to #REGde and increment it. This allows the LDIR
 $F30C POP DE        ; instruction to do a bulk replace 
 $F30D INC DE        ; }
 $F30E LD A,$08      ; { Set 8 rows to clear (#R$F308)
 $F310 LD ($F308),A  ; }
*$F313 LD (HL),$00   ; Clear the first element
 $F315 PUSH BC       ; { Bulk replace the rest
 $F316 PUSH HL       ;
 $F317 PUSH DE       ;
 $F318 LDIR          ;
 $F31A POP DE        ; 
 $F31B POP HL        ;
 $F31C POP BC        ; }
 $F31D INC H         ; { Move forward a row and a column
 $F31E INC D         ; }
 $F31F LD A,($F308)  ; { Decrement the row count
 $F322 SUB $01       ;
 $F324 LD ($F308),A  ; }
 $F327 CP $00        ; { Loop while there is more to clear
 $F329 JR NZ,$F313   ; }
 $F32B RET           ; Otherwise return

; Print the outline of a speech bubble
;
; Used by the routine at #R$F1CA.
c$F32C LD HL,$4056   ; { Clear 8 characters starting at #N$4056
 $F32F LD BC,$0008   ; 
 $F332 CALL $F30B    ; }
 $F335 LD HL,$F2DD   ; { Set the next graphic (#R$FAC3) to the top (#R$F2DD)
 $F338 LD ($FAC3),HL ; }
 $F33B LD A,$03      ;
 $F33D LD ($FAC5),A  ;
 $F340 LD A,$09      ;
 $F342 LD ($FAC6),A  ;
 $F345 LD A,$B0      ;
 $F347 LD ($FAC8),A  ;
 $F34A LD A,$13      ;
 $F34C LD ($FAC7),A  ;
 $F34F CALL $FADD    ; Draw it
 $F352 LD HL,$F2A7   ; { Set the next graphic (#R$FAC3) to the bottom (#R$F2A7)
 $F355 LD ($FAC3),HL ; }
 $F358 LD A,$06      ;
 $F35A LD ($FAC5),A  ;
 $F35D LD A,$1F      ;
 $F35F LD ($FAC7),A  ;
 $F362 CALL $FADD    ;
 $F365 LD HL,$4076   ; { Clear 8 characters starting at #N$4076
 $F368 LD BC,$0008   ;
 $F36B CALL $F30B    ; }
 $F36E LD HL,$F2F8   ; { Set the next graphic (#R$FAC3) to the tip (#R$F2F8)
 $F371 LD ($FAC3),HL ; }
 $F374 LD A,$01      ;
 $F376 LD ($FAC6),A  ;
 $F379 LD A,$08      ;
 $F37B LD ($FAC5),A  ;
 $F37E LD A,$22      ;
 $F380 LD ($FAC7),A  ;
 $F383 LD DE,($F30A) ;
 $F387 LD A,$00      ;
 $F389 LD ($F309),A  ;
 $F38C LD A,($F5C2)  ;
 $F38F CP $01        ;
 $F391 JR Z,$F3A6    ;
 $F393 LD HL,$F5C3   ;
*$F396 LD A,($D757)  ;
 $F399 CP (HL)       ;
 $F39A JR Z,$F3A6    ;
 $F39C INC HL        ;
 $F39D LD A,($F309)  ;
 $F3A0 ADD A,E       ;
 $F3A1 LD ($F309),A  ;
 $F3A4 JR $F396      ;
*$F3A6 LD A,E        ;
 $F3A7 RRA           ;
 $F3A8 ADD A,$04     ;
 $F3AA LD E,A        ;
 $F3AB LD A,($F309)  ;
 $F3AE ADD A,E       ;
 $F3AF ADD A,$B0     ;
 $F3B1 LD ($FAC8),A  ;
 $F3B4 LD HL,$F300   ;
 $F3B7 LD DE,$F93B   ;
 $F3BA LD BC,$0008   ;
 $F3BD LDIR          ;
 $F3BF JP $FAF7      ;

; Data block at F3C2
b$F3C2 DEFB $00,$02,$30

; Update panel
;
; Used by the routine at #R$DC07.
c$F3C5 CALL $F83F    ; Put the sprites in the panel
 $F3C8 RET NC        ;
 $F3C9 LD HL,$D1E3   ; Point #REGhl at the text buffer (#R$D1E3)
 $F3CC LD ($D3AA),HL ; Store this
 $F3CF LD A,$0D      ; { Put the length in #R$F3C2
 $F3D1 LD BC,$0024   ;
 $F3D4 LD HL,$D1E3   ;
 $F3D7 CPIR          ;
 $F3D9 LD DE,$D1E4   ;
 $F3DC SCF           ;
 $F3DD CCF           ;
 $F3DE SBC HL,DE     ; 
 $F3E0 LD A,L        ;
 $F3E1 LD ($F3C2),A  ; }
 $F3E4 LD IX,($D3AA) ; Point #REGix at the text buffer
 $F3E8 LD A,(IX+$00) ;
 $F3EB CP $40        ;
 $F3ED JR Z,$F40A    ;
 $F3EF CP $3D        ;
 $F3F1 JR Z,$F3FC    ;
 $F3F3 PUSH IX       ; {
 $F3F5 CALL $F68A    ; Draw sprites on the panel 
 $F3F8 POP IX        ; }
 $F3FA JR $F414      ;
*$F3FC CALL $ECD4    ;
 $F3FF LD A,$38      ;
 $F401 LD BC,$0216   ;
 $F404 LD DE,$090B   ;
 $F407 CALL $EBC8    ;
*$F40A LD A,($F3C2)  ;
 $F40D SUB $01       ;
 $F40F LD ($F3C2),A  ;
 $F412 INC IX        ;
*$F414 LD A,(IX+$00) ;
 $F417 CP $28        ;
 $F419 JR NZ,$F422   ;
 $F41B LD A,$02      ;
 $F41D LD ($F3C3),A  ;
 $F420 JR $F42B      ;
*$F422 CP $29        ;
 $F424 JR NZ,$F437   ;
 $F426 LD A,$0B      ;
 $F428 LD ($F3C3),A  ;
*$F42B LD A,($F3C2)  ;
 $F42E SUB $01       ;
 $F430 LD ($F3C2),A  ;
 $F433 INC IX        ;
 $F435 JR $F44A      ;
*$F437 LD A,($F3C3)  ;
 $F43A CP $02        ;
 $F43C JR Z,$F445    ;
 $F43E LD A,$02      ;
 $F440 LD ($F3C3),A  ;
 $F443 JR $F44A      ;
*$F445 LD A,$0B      ;
 $F447 LD ($F3C3),A  ;
*$F44A LD ($D3AA),IX ;
 $F44E LD A,($F3C2)  ;
 $F451 CP $13        ;
 $F453 JP C,$F4D8    ;
 $F456 LD HL,($D3AA) ;
 $F459 LD DE,$0012   ;
 $F45C ADD HL,DE     ;
*$F45D LD A,(HL)     ;
 $F45E CP $20        ;
 $F460 JR Z,$F465    ;
 $F462 DEC HL        ;
 $F463 JR $F45D      ;
*$F465 LD IY,($D3AA) ;
 $F469 LD DE,($D3AA) ;
 $F46D SBC HL,DE     ;
 $F46F LD ($F529),HL ;
 $F472 LD A,($F3C3)  ;
 $F475 LD C,$16      ;
 $F477 LD B,A        ;
 $F478 PUSH BC       ;
 $F479 CALL $C78C    ; Convert co-ordinates to a screen address
 $F47C LD BC,$0008   ; Set 8 characters to clear
 $F47F CALL $F30B    ; Clear this part of the screen
 $F482 CALL $F52B    ; Print the string
 $F485 POP BC        ;
 $F486 PUSH BC       ;
 $F487 LD DE,$0901   ;
 $F48A LD A,($F3C4)  ;
 $F48D CALL $EBC8    ;
 $F490 LD HL,($D3AA) ;
 $F493 LD DE,($F529) ;
 $F497 LD D,$00      ;
 $F499 ADD HL,DE     ;
 $F49A INC HL        ;
 $F49B PUSH HL       ;
 $F49C POP IY        ;
 $F49E LD DE,($D3AA) ;
 $F4A2 SBC HL,DE     ;
 $F4A4 PUSH HL       ;
 $F4A5 POP DE        ;
 $F4A6 LD HL,($F3C2) ;
 $F4A9 SBC HL,DE     ;
 $F4AB LD ($F529),HL ;
 $F4AE POP BC        ;
 $F4AF INC B         ;
 $F4B0 PUSH BC       ;
 $F4B1 CALL $C78C    ; Convert co-ordinates to a screen address
 $F4B4 LD BC,$0008   ; Set 8 characters to clear
 $F4B7 CALL $F30B    ; Clear this part of the screen
 $F4BA CALL $F52B    ; Print the string
 $F4BD POP BC        ;
 $F4BE LD DE,$0901   ;
 $F4C1 LD A,($F3C4)  ;
 $F4C4 CALL $EBC8    ;
 $F4C7 LD A,($F3C3)  ;
 $F4CA CP $0B        ;
 $F4CC JR Z,$F4D3    ;
 $F4CE LD BC,$AF20   ;
 $F4D1 JR $F514      ;
*$F4D3 LD BC,$AF57   ;
 $F4D6 JR $F514      ;
*$F4D8 LD A,($F3C2)  ;
 $F4DB LD ($F529),A  ;
 $F4DE LD IY,($D3AA) ;
 $F4E2 LD A,($F3C3)  ;
 $F4E5 CP $02        ;
 $F4E7 JR Z,$F4EB    ;
 $F4E9 LD A,$0C      ;
*$F4EB LD C,$16      ;
 $F4ED LD B,A        ;
 $F4EE PUSH BC       ;
 $F4EF CALL $C78C    ; Convert co-ordinates to a screen address
 $F4F2 LD BC,$0008   ; Set 8 characters to clear
 $F4F5 CALL $F30B    ; Clear this part of the screen
 $F4F8 CALL $F52B    ; Print the string
 $F4FB POP BC        ;
 $F4FC LD DE,$0901   ;
 $F4FF LD A,($F3C4)  ;
 $F502 CALL $EBC8    ;
 $F505 LD A,($F3C3)  ;
 $F508 CP $0B        ;
 $F50A JR Z,$F511    ;
 $F50C LD BC,$AF18   ;
 $F50F JR $F514      ;
*$F511 LD BC,$AF5F   ;
*$F514 PUSH BC       ;
 $F515 POP HL        ;
 $F516 LD A,H        ;
 $F517 ADD A,$48     ;
 $F519 LD H,A        ;
 $F51A CALL $F51E    ;
 $F51D RET           ;

; Draw a box
;
; Used by the routines at #R$F3C5 and #R$FD93.
;
; HL From co-ordinates
; BC To co-ordinates
c$F51E PUSH BC       ; Store #REGbc
 $F51F CALL $E743    ;
 $F522 POP BC        ; Restore #REGbc
 $F523 DEC H         ; Decrement the row count
 $F524 LD A,B        ; { Has it reached the target row?
 $F525 CP H          ; }
 $F526 JR NZ,$F51E   ; Jump back if not
 $F528 RET           ; Otherwise return

; Length of string for drawing text
b$F529 DEFB $00,$00

; Print a string
;
; Used by the routines at #R$DB34, #R$E08B and #R$F3C5.
;
; IY Pointer to the string data
c$F52B LD HL,$F529   ; Point #REGhl to the length
 $F52E LD B,(HL)     ; Store it in #REGb
 $F52F PUSH IY       ; { Put the text in #REGhl
 $F531 POP HL        ; }
 $F532 LD DE,($BF6A) ; Put the screen address to draw (#R$BF6A) in #REGde
*$F536 PUSH BC       ; { Store main registers
 $F537 PUSH HL       ;
 $F538 PUSH DE       ; }
 $F539 LD A,(HL)     ;
 $F53A LD HL,($E464) ;
 $F53D LD C,A        ;
 $F53E LD B,$00      ;
 $F540 SLA C         ;
 $F542 RL B          ;
 $F544 SLA C         ;
 $F546 RL B          ;
 $F548 SLA C         ;
 $F54A RL B          ;
 $F54C XOR A         ;
 $F54D ADC HL,BC     ;
 $F54F LD B,$08      ;
*$F551 LD A,(HL)     ;
 $F552 SRL A         ;
 $F554 LD (DE),A     ;
 $F555 INC HL        ;
 $F556 INC D         ;
 $F557 DJNZ $F551    ;
 $F559 POP DE        ;
 $F55A POP HL        ;
 $F55B POP BC        ;
 $F55C DJNZ $F560    ;
 $F55E JR $F5BD      ;
*$F560 INC HL        ;
 $F561 PUSH BC       ;
 $F562 PUSH HL       ;
 $F563 PUSH DE       ;
 $F564 LD A,(HL)     ;
 $F565 LD HL,($E464) ;
 $F568 LD C,A        ;
 $F569 LD B,$00      ;
 $F56B SLA C         ;
 $F56D RL B          ;
 $F56F SLA C         ;
 $F571 RL B          ;
 $F573 SLA C         ;
 $F575 RL B          ;
 $F577 XOR A         ;
 $F578 ADC HL,BC     ;
 $F57A LD B,$08      ;
*$F57C LD A,(HL)     ;
 $F57D SRL A         ;
 $F57F SRL A         ;
 $F581 SRL A         ;
 $F583 SRL A         ;
 $F585 SRL A         ;
 $F587 LD C,A        ;
 $F588 LD A,(DE)     ;
 $F589 OR C          ;
 $F58A LD (DE),A     ;
 $F58B INC D         ;
 $F58C INC HL        ;
 $F58D DJNZ $F57C    ;
 $F58F POP DE        ; { Restore main registers
 $F590 POP HL        ;
 $F591 POP BC        ; }
; Calculate the next position on screen
 $F592 LD A,D        ;
 $F593 CP $40        ;
 $F595 JR NZ,$F5A1   ;
 $F597 LD A,E        ;
 $F598 CP $FF        ;
 $F59A JR NZ,$F5A1   ;
 $F59C LD DE,$4800   ; Set the screen address to the start of the middle third of the display area
 $F59F JR $F5B1      ;
*$F5A1 LD A,D        ;
 $F5A2 CP $48        ;
 $F5A4 JR NZ,$F5B0   ;
 $F5A6 LD A,E        ;
 $F5A7 CP $FF        ;
 $F5A9 JR NZ,$F5B0   ;
 $F5AB LD DE,$5000   ; Set the screen address to the start of the bottom third of the display area
 $F5AE JR $F5B1      ;
*$F5B0 INC DE        ;
; 
*$F5B1 INC HL        ; Move to the next position in the string
 $F5B2 LD A,D        ;
 $F5B3 ADD A,$A8     ;
 $F5B5 RET C         ;
 $F5B6 DEC B         ; Move to the next character
 $F5B7 LD A,B        ; { Have we reached the end?
 $F5B8 CP $00        ; }
 $F5BA JP NZ,$F536   ; Jump back if not
*$F5BD LD ($BF6A),DE ; { Store the next screen address (#R$BF6A) and return
 $F5C1 RET           ; }

; Number of sprites in a room
g$F5C2 DEFB $00

; Buffer for sprites in a room
g$F5C3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5CB DEFB $00

; Sprite lookup data
b$F5CC DEFB $00,$0D,$01,$06,$01,$06,$02,$00
 $F5D4 DEFB $00,$00,$01,$00,$01,$00,$02,$01
 $F5DC DEFB $00,$05,$00,$05,$00,$05,$00,$05
 $F5E4 DEFB $00,$07,$00,$07,$00,$07,$00,$07
 $F5EC DEFB $00,$0B,$00,$0B,$00,$0B,$00,$0B
 $F5F4 DEFB $00,$06,$00,$06,$00,$06,$00,$06
 $F5FC DEFB $00,$0A,$00,$0A,$00,$0A,$00,$0A
 $F604 DEFB $00,$07,$00,$07,$00,$07,$00,$07
 $F60C DEFB $00,$04,$01,$03,$01,$03,$02,$05
 $F614 DEFB $00,$02,$01,$01,$01,$01,$02,$03
 $F61C DEFB $00,$01,$01,$04,$01,$04,$02,$02
 $F624 DEFB $00,$03,$01,$02,$01,$02,$02,$04
 $F62C DEFB $00,$0C,$01,$05,$01,$05,$02,$06
 $F634 DEFB $00,$08,$00,$08,$00,$08,$00,$08
 $F63C DEFB $00,$09,$00,$09,$00,$09,$00,$09
 $F644 DEFB $00,$0C,$01,$05,$01,$05,$02,$06
 $F64C DEFB $00,$0C,$01,$05,$01,$05,$02,$06
 $F654 DEFB $00,$0B,$00,$0B,$00,$0B,$00,$0B
 $F65C DEFB $00,$0D,$01,$06,$01,$06,$02,$00
 $F664 DEFB $00,$0D,$01,$06,$01,$06,$02,$00
 $F66C DEFB $00,$00

; Data block at F66E
b$F66E DEFW $002C,$90BC
 $F672 DEFW $0008,$909C
 $F676 DEFW $1808,$8850
 $F67A DEFW $2850,$9098
 $F67E DEFW $2874,$90BC
 $F682 DEFW $182C,$8874

; Game status buffer entry at F686
g$F686 DEFB $05

; Game status buffer entry at F687
g$F687 DEFB $00

; Set to 1 to draw a sprite for speaking something
g$F688 DEFB $00

; Game status buffer entry at F689
g$F689 DEFB $01

; Draw sprites and backgrounds in a panel
;
; Used by the routines at #R$F1A2 and #R$F3C5.
c$F68A LD IX,$F5C2   ; Point #REGix at the sprite data (#R$F5C2)
 $F68E LD A,(IX+$00) ; Put the count of sprites in #REGa
 $F691 CP $01        ; Is there only one sprite?
 $F693 JR NZ,$F6D8   ; Jump forward if there are several
 $F695 LD A,($F688)  ; { Is the sprite speaking something?
 $F698 CP $00        ; }
 $F69A JR Z,$F6D8    ; Jump forward if not
 $F69C LD A,($F689)  ;
 $F69F CP $01        ;
 $F6A1 JR NZ,$F6D8   ;
; Draw the player close up.
 $F6A3 LD HL,$68B7   ; Set #REGhl to large Kevin (#R$68B7)
 $F6A6 LD A,($D757)  ; Get current character (#R$D757)
 $F6A9 CP $00        ; Is it Kevin?
 $F6AB JR Z,$F6B0    ; Jump forward if so
 $F6AD LD HL,$6A3F   ; Otherwise, set #REGhl to large Redhawk (#R$6A3F)
*$F6B0 LD ($FAC3),HL ; Set this as the next sprite to draw
 $F6B3 LD A,$B8      ; { Set the screen co-ordinates
 $F6B5 LD ($FAC8),A  ;
 $F6B8 LD A,$30      ;
 $F6BA LD ($FAC7),A  ; }
 $F6BD LD A,$38      ; { Set number of rows
 $F6BF LD ($FAC5),A  ; }
 $F6C2 LD ($F30A),A  ; { Set number of pixels across }
 $F6C5 LD A,$07      ; { Set number of columns
 $F6C7 LD ($FAC6),A  ; }
 $F6CA CALL $ECD4    ; Update the panels
 $F6CD LD A,$01      ; { Set to merge
 $F6CF LD ($FADC),A  ; }
 $F6D2 CALL $FADD    ; Do the drawing
 $F6D5 JP $F832      ; Nothing else to draw here, so skip forward
; Draw mid-range characters
*$F6D8 LD A,($D758)  ; Get the current room graphic ID (#R$D758)
 $F6DB CP $29        ; 
 $F6DD JP NC,$F74C   ;
 $F6E0 LD A,(IX+$00) ;
 $F6E3 CP $03        ;
 $F6E5 JR NZ,$F6FC   ;
 $F6E7 LD A,($F686)  ;
 $F6EA CP $00        ;
 $F6EC JR Z,$F6F5    ;
 $F6EE LD A,$00      ;
 $F6F0 LD ($F686),A  ;
 $F6F3 JR $F756      ;
*$F6F5 LD A,$01      ;
 $F6F7 LD ($F686),A  ;
 $F6FA JR $F756      ;
*$F6FC CP $02        ;
 $F6FE JR NZ,$F726   ;
 $F700 LD A,($F686)  ;
 $F703 CP $02        ;
 $F705 JR Z,$F70E    ;
 $F707 LD A,$02      ;
 $F709 LD ($F686),A  ;
 $F70C JR $F756      ;
*$F70E LD A,$03      ;
 $F710 LD ($F686),A  ;
 $F713 LD A,($F689)  ;
 $F716 CP $01        ;
 $F718 JR NZ,$F756   ;
 $F71A LD A,$01      ;
 $F71C LD ($F686),A  ;
 $F71F LD A,$04      ;
 $F721 LD ($F689),A  ;
 $F724 JR $F756      ;
*$F726 LD A,($F686)  ;
 $F729 CP $04        ;
 $F72B JR Z,$F734    ;
 $F72D LD A,$04      ;
 $F72F LD ($F686),A  ;
 $F732 JR $F756      ;
*$F734 LD A,$05      ;
 $F736 LD ($F686),A  ;
 $F739 LD A,($F689)  ;
 $F73C CP $01        ;
 $F73E JR NZ,$F756   ;
 $F740 LD A,$00      ;
 $F742 LD ($F686),A  ;
 $F745 LD A,$04      ;
 $F747 LD ($F689),A  ;
 $F74A JR $F756      ;
*$F74C LD A,$02      ;
 $F74E LD ($F686),A  ;
 $F751 LD A,$03      ;
 $F753 LD ($F689),A  ;
*$F756 LD A,($F686)  ; Get lookup flag (??) (#R$F686)
 $F759 SLA A         ; { Multiply by 4 to get the right offset
 $F75B SLA A         ; }
 $F75D LD E,A        ; { Store this in #REGde
 $F75E LD D,$00      ; }
 $F760 LD HL,$F66E   ; { Add the base address (#R$F66E)
 $F763 ADD HL,DE     ; }
 $F764 PUSH HL       ; { Store this in #REGix
 $F765 POP IX        ; }
 $F767 LD A,(IX+$00) ; { Store the co-ordinates in #R$E45C
 $F76A LD ($E45D),A  ;
 $F76D LD A,(IX+$01) ;
 $F770 LD ($E45C),A  ; }
 $F773 LD A,(IX+$02) ;
 $F776 LD ($E45F),A  ;
 $F779 LD A,(IX+$03) ;
 $F77C LD ($E45E),A  ;
 $F77F LD A,($D758)  ; Put the current room (#R$D758) in #REGa
 $F782 SLA A         ; Double it to get a word offset
 $F784 LD HL,$5DB6   ; Point #REGhl to just before the room table (#R$5DB8)
 $F787 LD C,A        ; { Add the offset to point to the room data
 $F788 LD B,$00      ;
 $F78A ADD HL,BC     ; }
 $F78B LD E,(HL)     ; { Put the pointer to room data in #REGde
 $F78C INC HL        ;
 $F78D LD D,(HL)     ; }
 $F78E PUSH DE       ; { Copy this to #REGix
 $F78F POP IX        ; }
 $F791 CALL $EC97    ; Draw the background
 $F794 LD A,($F689)  ;
 $F797 SUB $01       ;
 $F799 LD ($F689),A  ;
 $F79C CP $00        ;
 $F79E JR NZ,$F7CE   ;
 $F7A0 LD A,$03      ;
 $F7A2 LD ($F689),A  ;
 $F7A5 LD A,($F688)  ;
 $F7A8 CP $00        ;
 $F7AA JR NZ,$F7AE   ;
 $F7AC JR $F7CE      ;
*$F7AE LD A,$01      ;
 $F7B0 LD ($F687),A  ;
 $F7B3 LD A,$C0      ;
 $F7B5 LD ($F8B9),A  ;
 $F7B8 LD A,($F5C2)  ; {Put the count of sprites in #REGb
 $F7BB LD B,A        ; }
 $F7BC LD HL,$D757   ;
 $F7BF LD A,$01      ; { Set one sprite in the room
 $F7C1 LD ($F5C2),A  ; }
 $F7C4 LD DE,$F5C3   ; Point #REGde to the sprite definitons
*$F7C7 LD A,(DE)     ;
 $F7C8 CP (HL)       ;
 $F7C9 JR Z,$F7E8    ;
 $F7CB INC DE        ;
 $F7CC DJNZ $F7C7    ;
*$F7CE LD DE,$F5C2   ; Set #REGde to just before the sprite buffer (#R$F5C3)
 $F7D1 LD A,($F5C2)  ;
 $F7D4 LD ($F687),A  ;
*$F7D7 INC DE        ;
 $F7D8 LD IX,($80EE) ; Point #REGix at the flags table (#R$81FC)
 $F7DC LD A,(IX+$0D) ;
 $F7DF CP $00        ;
 $F7E1 JR Z,$F7E8    ;
 $F7E3 LD A,$06      ;
 $F7E5 LD ($F686),A  ;
*$F7E8 LD A,(DE)     ;
 $F7E9 SLA A         ; { Multiply by 8
 $F7EB SLA A         ;
 $F7ED SLA A         ; }
 $F7EF LD BC,$F5CC   ; Set #REGbc to the base offset of the sprite definition table
 $F7F2 LD L,A        ; { Put the offset in #REGhl
 $F7F3 LD H,$00      ; }
 $F7F5 ADD HL,BC     ; Add them
 $F7F6 LD A,($F686)  ;
 $F7F9 AND $FE       ;
 $F7FB LD C,A        ;
 $F7FC LD B,$00      ;
 $F7FE ADD HL,BC     ;
 $F7FF LD A,(HL)     ;
 $F800 LD ($FAC3),A  ;
 $F803 INC HL        ;
 $F804 LD A,(HL)     ;
 $F805 LD ($FAC4),A  ;
 $F808 PUSH DE       ; { Draw the sprite
 $F809 CALL $F8BA    ;
 $F80C POP DE        ; }
 $F80D LD A,($F687)  ;
 $F810 SUB $01       ;
 $F812 LD ($F687),A  ;
 $F815 CP $00        ;
 $F817 JP NZ,$F7D7   ;
 $F81A LD A,$B0      ;
 $F81C LD ($F8B9),A  ;
 $F81F LD A,($F689)  ;
 $F822 CP $03        ;
 $F824 JR NZ,$F832   ;
 $F826 LD A,($F5C2)  ;
 $F829 CP $01        ;
 $F82B JR NZ,$F832   ;
 $F82D LD A,$38      ;
 $F82F LD ($F30A),A  ;
*$F832 LD BC,$0216   ; { Fill the background with the appropriate attribute (#R$E459)
 $F835 LD DE,$090B   ;
 $F838 LD A,($E459)  ;
 $F83B CALL $EBC8    ; }
 $F83E RET           ; All done

; Put sprites in a panel
;
; Used by the routines at #R$F1A2 and #R$F3C5.
c$F83F CALL $E265    ; Get the current character
 $F842 LD C,$11      ; Select data table #N$11
 $F844 CALL $D6C0    ; Get the data
 $F847 LD A,($C8BF)  ; Put the current character in #REGa
 $F84A LD HL,$CD5F   ;
 $F84D CP (HL)       ;
 $F84E JR NZ,$F8B0   ;
 $F850 LD IY,$F5C3   ; Point #REGiy at the sprite definitions (#R$F5C3)
 $F854 LD A,$00      ; { Set no sprites currently in a room
 $F856 LD ($F5C2),A  ; }
 $F859 LD HL,$C8C8   ;
 $F85C LD B,(HL)     ;
 $F85D LD C,$11      ; Select data table #N$11
*$F85F PUSH IY       ; { Get the data 
 $F861 CALL $D6C0    ;  
 $F864 POP IY        ; }
 $F866 LD A,($C8BF)  ; Put the character in #REGa
 $F869 LD HL,$CD5F   ;
 $F86C CP (HL)       ;
 $F86D JR NZ,$F87C   ;
 $F86F LD (IY+$00),B ;
 $F872 INC IY        ;
 $F874 LD A,($F5C2)  ; { Increment the sprite count
 $F877 ADD A,$01     ;
 $F879 LD ($F5C2),A  ; }
*$F87C DEC B         ;
 $F87D LD A,B        ;
 $F87E CP $00        ;
 $F880 JP P,$F85F    ;
 $F883 LD IY,$F5C3   ; Point #REGiy at the sprite definitions (#R$F5C3)
 $F887 LD A,(IY-$01) ; Put the sprite count in #REGa
 $F88A CP $04        ; { Skip the next bit if there are 3 sprites in the room
 $F88C JR C,$F8AE    ; }
 $F88E LD HL,$D757   ;
 $F891 LD B,$00      ;
*$F893 LD A,(IY+$00) ;
 $F896 CP (HL)       ;
 $F897 JR Z,$F89E    ;
 $F899 INC IY        ;
 $F89B INC B         ;
 $F89C JR $F893      ;
*$F89E LD A,B        ;
 $F89F CP $04        ;
 $F8A1 JR C,$F8A9    ;
 $F8A3 LD A,($D757)  ;
 $F8A6 LD ($F5C5),A  ;
*$F8A9 LD A,$03      ; { Set 3 sprites in the room
 $F8AB LD ($F5C2),A  ; }
*$F8AE SCF           ;
 $F8AF RET           ;
*$F8B0 SCF           ;
 $F8B1 CCF           ;
 $F8B2 RET           ;

; Pointers to sprite positions
b$F8B3 DEFW $6BC7
 $F8B5 DEFW $725A
 $F8B7 DEFW $779C

; Data block at F8B9
b$F8B9 DEFB $B0

; Draw a sprite in the panel
;
; Used by the routine in #R$F68A
; On entry, #R$FAC3 points to the address holding the sprite data
c$F8BA LD A,($FAC3)  ; Put the index in #REGa
 $F8BD SLA A         ; Double it to get a word offset
 $F8BF LD HL,$F8B3   ; Point #REGhl at the sprite position table (#R$F8B3)
 $F8C2 LD C,A        ; { Add the offset for this sprite type
 $F8C3 LD B,$00      ;
 $F8C5 ADD HL,BC     ; }
 $F8C6 LD E,(HL)     ; { Put the address pointed to in #REGde
 $F8C7 INC HL        ;
 $F8C8 LD D,(HL)     ; }
 $F8C9 EX DE,HL      ; Swap it into #REGhl
 $F8CA LD A,(HL)     ; { Set this as the number of rows to draw (#R$FAC5)
 $F8CB LD ($FAC5),A  ; }
 $F8CE INC HL        ; Move to the next entry
 $F8CF LD A,(HL)     ; { Set this as the number of columns to draw (#R$FAC6)
 $F8D0 LD ($FAC6),A  ; }
 $F8D3 SLA A         ; { Multiply by 8 to get the number of bits
 $F8D5 SLA A         ;
 $F8D7 SLA A         ; }
 $F8D9 LD ($F30A),A  ; Set this (#R$F30A)
 $F8DC INC HL        ; Increment #REGhl to point to the sprite size
 $F8DD LD A,($FAC4)  ; Put the high byte of sprite data in #REGa
 $F8E0 CP $00        ; Is it zero?
 $F8E2 JR Z,$F8EB    ; If so, we're pointing at the correct sprite
 $F8E4 LD B,A        ; Count the number of sprites
 $F8E5 LD E,(HL)     ; { Put the sprite size in (#REGde)
 $F8E6 LD D,$00      ; }
*$F8E8 ADD HL,DE     ; Add it
 $F8E9 DJNZ $F8E8    ; Repeat until the right sprite is pointed to
*$F8EB INC HL        ; Increment #REGhl to point to the sprite
; #REGhl now points at the correct sprite to use
 $F8EC LD ($FAC3),HL ; Put a copy of this in #R$FAC3
 $F8EF LD A,($F8B9)  ; Put the previously drawn offset in #REGa
 $F8F2 LD ($FAC8),A  ; Set this as the x co-ordinate
 $F8F5 LD DE,($FAC5) ; Put the size in #REGde
 $F8F9 LD A,$68      ; { Subtract #N$68 from the height to give an offset relative to the frame
 $F8FB SUB E         ; }
 $F8FC LD ($FAC7),A  ; Store this as the y co-ordinate
 $F8FF LD A,$28      ;
 $F901 CP E          ;
 $F902 JR NZ,$F90C   ;
 $F904 LD A,($FAC7)  ;
 $F907 SUB $04       ;
 $F909 LD ($FAC7),A  ;
*$F90C LD A,D        ; Get the width
 $F90D SLA A         ; { Multiply by 8 to give a pixel count
 $F90F SLA A         ;
 $F911 SLA A         ; }
 $F913 LD D,A        ; Set this
 $F914 LD A,($FAC8)  ; { Add the height
 $F917 ADD A,D       ; }
 $F918 LD ($F8B9),A  ; Store this
 $F91B LD A,$00      ;
 $F91D LD ($FADC),A  ;
 $F920 JP $FADD      ; Draw it

; Unused
u$F923 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F92B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F933 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Working graphic buffer
b$F93B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F943 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F94B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F953 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F95B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F963 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F96B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F973 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F97B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F983 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F98B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F993 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F99B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9A3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9AB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9B3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9BB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9C3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9CB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9D3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9DB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9E3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9EB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9F3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9FB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA03 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA0B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA13 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA1B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA23 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA2B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA33 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA3B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA43 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA4B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA53 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA5B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA63 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA6B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA73 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA7B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA83 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA8B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA93 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA9B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAA3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAAB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAB3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FABB DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Address of next sprite data to draw into the graphic buffer
g$FAC3 DEFB $0000

; Number of rows to draw into the graphic buffer
g$FAC5 DEFB $00

; Number of columns to draw into the graphic buffer
g$FAC6 DEFB $00

; Next screen co-ordinate to draw into the graphic buffer
g$FAC7 DEFB $00,$00

; Bitmasks
b$FAC9 DEFB $80,$40,$20,$10,$08,$04,$02,$01

; Game status buffer entry at FAD1
g$FAD1 DEFW $0000
 
; Game status buffer entry at FAD3
g$FAD3 DEFW $0000

; Game status buffer entry at FAD5
g$FAD5 DEFB $00

; Pointer to current bitmask entry
g$FAD6 DEFW $0000

; Game status buffer entry at FAD8
g$FAD8 DEFW $0000

; Game status buffer entry at FADA
g$FADA DEFB $00

; Game status buffer entry at FADB
g$FADB DEFB $00

; Set to 1 if a sprite should be merged with the background
g$FADC DEFB $00

; Draw into the graphics buffer
;
; Used by the routines at #R$F32C, #R$F68A, #R$F8BA and #R$FD93.
c$FADD LD HL,$F93B   ; { Wipe the current contents
 $FAE0 LD DE,$F93C   ;
 $FAE3 LD (HL),$00   ;
 $FAE5 LD BC,$0187   ;
 $FAE8 LDIR          ; }
 $FAEA LD A,($FADC)  ; { Should the sprite be merged? (#R$FADC)
 $FAED CP $00        ; }
 $FAEF JR NZ,$FAF7   ; Skip the next bit if not
; The sprite needs merging with the background
 $FAF1 CALL $FB2E    ;
 $FAF4 CALL $FBD1    ;
; This entry point is used by the routine at #R$F32C.
*$FAF7 LD IX,$F93B   ; Point #REGix to the graphics buffer
*$FAFB LD HL,($FAC7) ; Get the next screen co-ordinate to draw
 $FAFE CALL $FC96    ; Convert this to a screen address
 $FB01 LD HL,($FAC3) ; Point #REGhl at the sprite data
 $FB04 LD A,($FAC6)  ; { Set #REGb to the number of columns
 $FB07 LD B,A        ; }
*$FB08 NOP           ;
 $FB09 LD A,(DE)     ; Get the current screen contents 
 $FB0A AND (IX+$00)  ; Filter against what's in the buffer
 $FB0D OR (HL)       ; Merge the pixels
 $FB0E LD (DE),A     ; Set the new value on screen
 $FB0F INC HL        ; { Move forward 8 pixels
 $FB10 INC IX        ;
 $FB12 INC IY        ;
 $FB14 INC DE        ; }
 $FB15 DJNZ $FB08    ; Loop until all columns drawn
 $FB17 LD ($FAC3),HL ; Set the next sprite address
 $FB1A LD BC,($FAC7) ; { Move down one row
 $FB1E INC C         ; }
 $FB1F LD A,($FAC5)  ; { Set one row less to draw
 $FB22 SUB $01       ;
 $FB24 LD ($FAC5),A  ; }
 $FB27 RET Z         ; Return if everything's drawn
 $FB28 LD ($FAC7),BC ; { Otherwise set the new destination co-ordinates
 $FB2C JR $FAFB      ; and loop back to draw some more }

; Routine at FB2E
;
; Used by the routine at #R$FADD.
c$FB2E LD HL,($FAC3) ;
 $FB31 LD ($FAD1),HL ;
 $FB34 LD HL,$F93B   ;
 $FB37 LD ($FAD3),HL ;
 $FB3A LD HL,$0001   ;
 $FB3D LD ($FAD8),HL ;
 $FB40 LD HL,$FAC9   ; { Set the current bitmask (#R$FAD6) to the start of the list (#R$FAC9)
 $FB43 LD ($FAD6),HL ; }
 $FB46 CALL $FB71    ;
 $FB49 LD HL,($FAC3) ;
 $FB4C LD IX,$F93B   ;
 $FB50 LD DE,($FAC6) ;
 $FB54 LD D,$00      ;
 $FB56 DEC E         ;
 $FB57 ADD HL,DE     ;
 $FB58 ADD IX,DE     ;
 $FB5A LD ($FAD1),HL ;
 $FB5D LD ($FAD3),IX ;
 $FB61 LD HL,$FFFF   ;
 $FB64 LD ($FAD8),HL ;
 $FB67 LD HL,$FAD0   ;
 $FB6A LD ($FAD6),HL ;
 $FB6D CALL $FB71    ;
 $FB70 RET           ;

; Routine at FB71
;
; Used by the routine at #R$FB2E.
c$FB71 LD A,($FAC5)  ;
 $FB74 LD ($FAD5),A  ;
 $FB77 LD IX,($FAD3) ;
 $FB7B LD HL,($FAD1) ;
 $FB7E LD DE,($FAD8) ;
 $FB82 LD A,($FAC6)  ;
 $FB85 LD B,A        ;
*$FB86 LD A,(HL)     ;
 $FB87 CP $00        ;
 $FB89 JR NZ,$FB97   ;
 $FB8B LD A,$FF      ;
 $FB8D LD (IX+$00),A ;
 $FB90 ADD IX,DE     ;
 $FB92 ADD HL,DE     ;
 $FB93 DJNZ $FB86    ;
 $FB95 JR $FBAE      ;
*$FB97 LD IY,($FAD6) ;
*$FB9B AND (IY+$00)  ;
 $FB9E JR NZ,$FBAE   ;
 $FBA0 LD A,(IY+$00) ;
 $FBA3 OR (IX+$00)   ;
 $FBA6 LD (IX+$00),A ;
 $FBA9 LD A,(HL)     ;
 $FBAA ADD IY,DE     ;
 $FBAC JR $FB9B      ;
*$FBAE LD A,($FAD5)  ;
 $FBB1 SUB $01       ;
 $FBB3 LD ($FAD5),A  ;
 $FBB6 RET Z         ;
 $FBB7 LD HL,($FAD1) ;
 $FBBA LD IX,($FAD3) ;
 $FBBE LD BC,($FAC6) ;
 $FBC2 LD B,$00      ;
 $FBC4 ADD HL,BC     ;
 $FBC5 ADD IX,BC     ;
 $FBC7 LD ($FAD1),HL ;
 $FBCA LD ($FAD3),IX ;
 $FBCE JP $FB86      ;

; Routine at FBD1
;
; Used by the routine at #R$FADD.
c$FBD1 LD HL,($FAC3) ;
 $FBD4 LD ($FAD1),HL ;
 $FBD7 LD HL,$FAC9   ; { Set the current bitmask (#R$FAD6) to the start of the list (#R$FAC9)
 $FBDA LD ($FAD6),HL ; }
 $FBDD LD A,($FAC6)  ;
 $FBE0 LD L,A        ;
 $FBE1 LD H,$00      ;
 $FBE3 LD ($FAD8),HL ;
 $FBE6 LD HL,$F93B   ;
 $FBE9 LD ($FAD3),HL ;
 $FBEC LD A,$00      ;
 $FBEE LD ($FADA),A  ;
 $FBF1 CALL $FC2B    ;
 $FBF4 LD HL,($FAC3) ;
 $FBF7 LD IX,$F93B   ;
 $FBFB LD DE,($FAC6) ;
 $FBFF LD D,$00      ;
 $FC01 LD A,($FAC5)  ;
 $FC04 LD B,A        ;
*$FC05 ADD HL,DE     ;
 $FC06 ADD IX,DE     ;
 $FC08 DJNZ $FC05    ;
 $FC0A LD ($FAD1),HL ;
 $FC0D LD ($FAD3),IX ;
 $FC11 LD A,($FAC6)  ;
 $FC14 NEG           ;
 $FC16 LD L,A        ;
 $FC17 LD H,$FF      ;
 $FC19 LD ($FAD8),HL ;
 $FC1C LD HL,$FAD0   ;
 $FC1F LD ($FAD6),HL ;
 $FC22 LD A,$01      ;
 $FC24 LD ($FADA),A  ;
 $FC27 CALL $FC2B    ;
 $FC2A RET           ;
*$FC2B LD A,($FAC6)  ;
 $FC2E LD ($FAD5),A  ;
 $FC31 LD DE,($FAD8) ;
*$FC35 LD B,$00      ;
 $FC37 LD IY,($FAD6) ;
*$FC3B LD HL,($FAD1) ;
 $FC3E LD IX,($FAD3) ;
 $FC42 LD A,($FAC5)  ;
 $FC45 LD ($FADB),A  ;
*$FC48 LD A,(HL)     ;
 $FC49 AND (IY+$00)  ;
 $FC4C JR NZ,$FC64   ;
 $FC4E LD A,(IY+$00) ;
 $FC51 OR (IX+$00)   ;
 $FC54 LD (IX+$00),A ;
 $FC57 ADD HL,DE     ;
 $FC58 ADD IX,DE     ;
 $FC5A LD A,($FADB)  ;
 $FC5D SUB $01       ;
 $FC5F LD ($FADB),A  ;
 $FC62 JR NZ,$FC48   ;
*$FC64 INC B         ;
 $FC65 LD A,B        ;
 $FC66 CP $08        ;
 $FC68 JR Z,$FC79    ;
 $FC6A INC IY        ;
 $FC6C LD A,($FADA)  ;
 $FC6F CP $00        ;
 $FC71 JR Z,$FC3B    ;
 $FC73 DEC IY        ;
 $FC75 DEC IY        ;
 $FC77 JR $FC3B      ;
*$FC79 LD A,($FAD5)  ;
 $FC7C SUB $01       ;
 $FC7E LD ($FAD5),A  ;
 $FC81 RET Z         ;
 $FC82 LD HL,($FAD1) ;
 $FC85 INC HL        ;
 $FC86 LD ($FAD1),HL ;
 $FC89 LD IX,($FAD3) ;
 $FC8D INC IX        ;
 $FC8F LD ($FAD3),IX ;
 $FC93 JP $FC35      ;

; Convert a co-ordinate into a screen address
;
; Used by the routine at #R$FADD.
;
; H x co-ordinate
; L y co-ordinate
; DE On return, holds the screen address to draw at
c$FC96 LD A,L        ;
 $FC97 AND $C0       ;
 $FC99 RRA           ;
 $FC9A SCF           ;
 $FC9B RRA           ;
 $FC9C RRCA          ;
 $FC9D XOR L         ;
 $FC9E AND $F8       ;
 $FCA0 XOR L         ;
 $FCA1 LD D,A        ;
 $FCA2 LD A,H        ;
 $FCA3 RLCA          ;
 $FCA4 RLCA          ;
 $FCA5 RLCA          ;
 $FCA6 XOR L         ;
 $FCA7 AND $C7       ;
 $FCA9 XOR L         ;
 $FCAA RLCA          ;
 $FCAB RLCA          ;
 $FCAC LD E,A        ;
 $FCAD RET           ;

; Attributes to use for big text panel
b$FCAE DEFB $28,$30,$18,$20

; Pointer to next attribute to use for big text panel
b$FCB2 DEFW $FCAE

; Print big panel text
;
; On entry, #R$D1E3 points to the big panel text
c$FCB4 PUSH IY       ;
 $FCB6 PUSH IX       ;
 $FCB8 LD IY,$D1E3   ; Point #REGiy at the text buffer (#R$D1E3)
 $FCBC LD HL,$0800   ;
 $FCBF LD ($E45C),HL ;
 $FCC2 LD HL,$2858   ;
 $FCC5 LD ($E45E),HL ;
 $FCC8 LD HL,$1010   ;
 $FCCB LD ($EB2D),HL ;
 $FCCE CALL $ECD4    ; Update the panels
*$FCD1 LD A,(IY+$00) ;
 $FCD4 CP $0D        ;
 $FCD6 JR Z,$FCED    ;
 $FCD8 PUSH IY       ;
 $FCDA CALL $EB67    ; Draw a big character
 $FCDD POP IY        ;
 $FCDF INC IY        ;
 $FCE1 LD HL,($EB2D) ;
 $FCE4 LD DE,$F010   ;
 $FCE7 ADD HL,DE     ;
 $FCE8 LD ($EB2D),HL ;
 $FCEB JR $FCD1      ;
*$FCED LD HL,($FCB2) ;
 $FCF0 INC HL        ;
 $FCF1 LD ($FCB2),HL ;
 $FCF4 LD DE,$FCB2   ;
 $FCF7 SCF           ;
 $FCF8 CCF           ;
 $FCF9 SBC HL,DE     ;
 $FCFB JR NZ,$FD03   ;
 $FCFD LD HL,$FCAE   ;
 $FD00 LD ($FCB2),HL ;
*$FD03 LD HL,($FCB2) ;
 $FD06 LD A,(HL)     ;
 $FD07 LD BC,$0216   ;
 $FD0A LD DE,$090B   ;
 $FD0D CALL $EBC8    ;
 $FD10 POP IX        ;
 $FD12 POP IY        ;
 $FD14 RET           ;

; Draw a block stripes across the screen
;
; Used by the routines at #R$DB34 and #R$FD93.
;
; HL Start address
; BC Length
c$FD15 PUSH HL       ;
 $FD16 POP DE        ;
 $FD17 INC DE        ;
 $FD18 LD A,$04      ;
 $FD1A LD ($F308),A  ;
*$FD1D LD A,$00      ;
 $FD1F CALL $FD34    ;
 $FD22 LD A,$FF      ;
 $FD24 CALL $FD34    ;
 $FD27 LD A,($F308)  ;
 $FD2A SUB $01       ;
 $FD2C LD ($F308),A  ;
 $FD2F CP $00        ;
 $FD31 JR NZ,$FD1D   ;
 $FD33 RET           ;

; Fill a line on screen with a byte
;
; Used by the routine at #R$FD15.
;
; HL Start address. On exit, points to the next line
; DE Start address + 1. On exit, points to the next line
; BC Length
; A Byte to fill with
c$FD34 LD (HL),A     ;
 $FD35 PUSH BC       ;
 $FD36 PUSH HL       ;
 $FD37 PUSH DE       ;
 $FD38 LDIR          ;
 $FD3A POP DE        ;
 $FD3B POP HL        ;
 $FD3C POP BC        ;
 $FD3D INC H         ;
 $FD3E INC D         ;
 $FD3F RET           ;

; Data for clearing the input area
b$FD40 DEFB $49,$59,$0F,$0F,$49,$59,$0F,$5F
 $FD48 DEFB $49,$59,$0F,$AF,$41,$0A,$77,$17
 $FD50 DEFB $49,$08,$77,$7F,$49,$08,$7F,$7F
 $FD58 DEFB $11,$12,$77,$DF,$E9,$22,$8F,$0F

; Data for clearing the panels
;
; Format is Y, X, length
b$FD60 DEFB $0F,$03,$07
 $FD63 DEFB $0F,$10,$08
 $FD66 DEFB $10,$10,$08
 $FD69 DEFB $0F,$1C,$01
 $FD6C DEFB $10,$1C,$01
 $FD6F DEFB $12,$02,$1C
 $FD72 DEFB $13,$02,$1C
 $FD75 DEFB $14,$02,$1C
 $FD78 DEFB $15,$02,$1C

; Buffer at FD7B
b$FD7B DEFB $B2,$12,$B2,$F9,$93,$F9
 $FD81 DEFB $8A,$E1,$8A,$F1,$79,$F1
 $FD87 DEFB $88,$81,$88,$C9,$79,$C9
 $FD8D DEFB $82,$19,$82,$59,$79,$59

; Draw the playing area
;
; This routine is later overwritten at the routine at #R$CAF3 with an IM2 jump
; table to #N$FDFD, which jumps to #R$BF6C
c$FD93 LD HL,$4000   ; { Clear the screen
 $FD96 LD DE,$4001   ;
 $FD99 LD BC,$1AFF   ;
 $FD9C LD (HL),$00   ;
 $FD9E LDIR          ; }
; Fill the playing area with stripes
 $FDA0 LD HL,$4001   ; { Draw a block of stripes across the screen
 $FDA3 LD BC,$001E   ;
 $FDA6 CALL $FD15    ; }
 $FDA9 LD BC,$0E01   ; { Get the screen co-ordinates for #N$0E,01
*$FDAC PUSH BC       ; which returns holding them in #REGhl and #REGbc.
 $FDAD CALL $C78C    ; }
 $FDB0 LD BC,$001E   ; { Draw a block of stripes here
 $FDB3 CALL $FD15    ; }
 $FDB6 POP BC        ; Restore co-ordinates
 $FDB7 INC B         ; Move to the next line
 $FDB8 LD A,B        ; { Have we reached the bottom of this area?
 $FDB9 CP $17        ; }
 $FDBB JR NZ,$FDAC   ; Jump back if not
; Draw the picture frames
 $FDBD LD HL,$0008   ;
 $FDC0 LD BC,$0108   ;
 $FDC3 CALL $F51E    ;
 $FDC6 LD HL,$0070   ;
 $FDC9 LD BC,$0170   ;
 $FDCC CALL $F51E    ;
 $FDCF LD IX,$FD60   ; Point #REGix to panel layout data (#R$FD60)
 $FDD3 LD A,$09      ; { Set 9 points to draw (#R$EBFA)
 $FDD5 LD ($EBFA),A  ; }
*$FDD8 LD B,(IX+$00) ;
 $FDDB LD C,(IX+$01) ;
 $FDDE CALL $C78C    ; Convert co-ordinates to a screen address
 $FDE1 LD C,(IX+$02) ;
 $FDE4 LD B,$00      ;
 $FDE6 CALL $F30B    ; Clear this part of the screen
 $FDE9 LD DE,$0003   ;
 $FDEC ADD IX,DE     ;
 $FDEE LD A,($EBFA)  ;
 $FDF1 SUB $01       ;
 $FDF3 LD ($EBFA),A  ;
 $FDF6 JR NZ,$FDD8   ;
 $FDF8 LD HL,$4377   ;
 $FDFB LD BC,$4381   ;
 $FDFE CALL $C82D    ;
 $FE01 LD IX,$FD40   ;
 $FE05 LD B,$08      ;
*$FE07 LD A,(IX+$00) ;
 $FE0A LD ($EBFE),A  ;
 $FE0D LD A,(IX+$01) ;
 $FE10 LD ($EBFF),A  ;
 $FE13 LD A,(IX+$02) ;
 $FE16 LD ($EBFC),A  ;
 $FE19 LD A,(IX+$03) ;
 $FE1C LD ($EBFD),A  ;
 $FE1F PUSH BC       ;
 $FE20 CALL $EC00    ;
 $FE23 POP BC        ;
 $FE24 LD DE,$0004   ;
 $FE27 ADD IX,DE     ;
 $FE29 DJNZ $FE07    ;
 $FE2B LD IX,$FD7B   ;
 $FE2F LD A,$04      ;
 $FE31 LD ($F308),A  ;
*$FE34 LD L,(IX+$00) ;
 $FE37 LD H,(IX+$01) ;
 $FE3A LD C,(IX+$02) ;
 $FE3D LD B,(IX+$03) ;
 $FE40 PUSH IX       ;
 $FE42 CALL $E472    ;
 $FE45 POP IX        ;
 $FE47 LD C,(IX+$04) ;
 $FE4A LD B,(IX+$05) ;
 $FE4D PUSH IX       ;
 $FE4F CALL $E472    ;
 $FE52 POP IX        ;
 $FE54 LD C,(IX+$02) ;
 $FE57 LD B,(IX+$03) ;
 $FE5A INC B         ;
 $FE5B INC H         ;
 $FE5C PUSH IX       ;
 $FE5E CALL $E472    ;
 $FE61 POP IX        ;
 $FE63 LD DE,$0006   ;
 $FE66 ADD IX,DE     ;
 $FE68 LD A,($F308)  ;
 $FE6B SUB $01       ;
 $FE6D LD ($F308),A  ;
 $FE70 JR NZ,$FE34   ;
 ; Draw the graphics next to the status bars
 $FE72 LD A,$70      ; { Draw at #N$70, #N$70
 $FE74 LD ($FAC8),A  ;
 $FE77 LD A,$70      ;
 $FE79 LD ($FAC7),A  ; }
 $FE7C LD HL,$BF08   ; Point #REGhl at the status bar graphic (#R$BF08)
 $FE7F LD ($FAC3),HL ; Set this as the graphic to draw (#R$FAC3)
 $FE82 LD A,$03      ; { Set the width to 3
 $FE84 LD ($FAC6),A  ; }
 $FE87 LD A,$20      ; { Set the height to #N$20
 $FE89 LD ($FAC5),A  ; }
 $FE8C LD A,$01      ; { Set to merge with background
 $FE8E LD ($FADC),A  ; }
 $FE91 CALL $FADD    ; Draw it
; Draw an empty space at the bottom of the screen
 $FE94 LD A,$B0      ; { Draw at #N$08,#N$B0
 $FE96 LD ($FAC7),A  ; 
 $FE99 LD A,$08      ;
 $FE9B LD ($FAC8),A  ; }
 $FE9E LD HL,$5B00   ; { Draw at a bit of memory currently unused
 $FEA1 LD ($FAC3),HL ; }
 $FEA4 LD A,$1F      ; { Set the width to #N$1F
 $FEA6 LD ($FAC6),A  ; }
 $FEA9 LD A,$08      ; { Set the height to 8
 $FEAB LD ($FAC5),A  ; }
 $FEAE LD A,$01      ; { Set to merge with background
 $FEB0 LD ($FADC),A  ; }
 $FEB3 CALL $FADD    ; Draw it
 $FEB6 LD A,$B8      ; { Draw at #N$08,#N$B8
 $FEB8 LD ($FAC7),A  ;
 $FEBB LD A,$08      ;
 $FEBD LD ($FAC8),A  ; }
 $FEC0 LD HL,$C155   ;
 $FEC3 LD ($FAC3),HL ;
 $FEC6 LD A,$08      ;
 $FEC8 LD ($FAC5),A  ;
 $FECB LD A,$1F      ;
 $FECD LD ($FAC6),A  ;
 $FED0 CALL $FADD    ; Draw it
 $FED3 LD BC,$0001   ;
 $FED6 LD DE,$1F18   ;ß
 $FED9 LD A,$38      ;
 $FEDB CALL $EBC8    ;
 $FEDE LD A,$B0      ;
 $FEE0 LD ($E461),A  ;
 $FEE3 LD A,$10      ;
 $FEE5 LD ($E460),A  ;
 $FEE8 LD A,$F7      ;
 $FEEA LD ($E463),A  ;
 $FEED LD A,$67      ;
 $FEEF LD ($E462),A  ;
 $FEF2 RET           ;

; Unused
u$FEF3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEFB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF03 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF0B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF13 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF1B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF23 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF2B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF33 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF3B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF43 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF4B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF53 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF5B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF63 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF6B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF73 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF7B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF83 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF8B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF93 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF9B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFA3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFAB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFB3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFBB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFC3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFCB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFD3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFDB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFE3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFEB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFF3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FFFB DEFB $00,$00,$00,$00,$00
